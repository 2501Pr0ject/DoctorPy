#!/usr/bin/env python3
"""
Script de lancement des microservices DoctorPy
"""

import subprocess
import sys
import time
from pathlib import Path
import asyncio
import signal
from typing import List
import psutil


class ServiceManager:
    """Gestionnaire des microservices"""
    
    def __init__(self):
        self.processes: List[subprocess.Popen] = []
        self.services = [
            {
                "name": "Auth Service",
                "script": "run_auth.py",
                "port": 8001,
                "description": "Service d'authentification et gestion des utilisateurs"
            },
            {
                "name": "RAG Service", 
                "script": "run_rag.py",
                "port": 8002,
                "description": "Service de r√©cup√©ration et g√©n√©ration assist√©e (RAG)"
            },
            {
                "name": "Quest Service",
                "script": "run_quest.py", 
                "port": 8004,
                "description": "Service de gamification et gestion des qu√™tes"
            }
        ]
    
    def check_port_available(self, port: int) -> bool:
        """V√©rifie si un port est disponible"""
        for conn in psutil.net_connections():
            if conn.laddr.port == port:
                return False
        return True
    
    def start_service(self, service: dict) -> subprocess.Popen:
        """D√©marre un service sp√©cifique"""
        print(f"üöÄ D√©marrage {service['name']} sur le port {service['port']}...")
        
        # V√©rifier si le port est libre
        if not self.check_port_available(service['port']):
            print(f"‚ö†Ô∏è  Port {service['port']} d√©j√† utilis√© pour {service['name']}")
            return None
        
        try:
            # Lancer le service
            process = subprocess.Popen([
                sys.executable, service['script']
            ], cwd=Path(__file__).parent)
            
            # Attendre un peu pour v√©rifier que le service d√©marre
            time.sleep(2)
            
            if process.poll() is None:  # Process still running
                print(f"‚úÖ {service['name']} d√©marr√© avec succ√®s (PID: {process.pid})")
                return process
            else:
                print(f"‚ùå √âchec du d√©marrage de {service['name']}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur d√©marrage {service['name']}: {e}")
            return None
    
    def start_all_services(self):
        """D√©marre tous les services"""
        print("üåü D√©marrage des microservices DoctorPy")
        print("=" * 50)
        
        for service in self.services:
            print(f"\\nüìã {service['description']}")
            process = self.start_service(service)
            if process:
                self.processes.append(process)
            time.sleep(1)  # D√©lai entre les d√©marrages
        
        if self.processes:
            print(f"\\nüéâ {len(self.processes)} services d√©marr√©s avec succ√®s!")
            self.print_status()
        else:
            print("\\n‚ùå Aucun service n'a pu √™tre d√©marr√©")
    
    def print_status(self):
        """Affiche le statut des services"""
        print("\\n" + "=" * 50)
        print("üìä STATUT DES SERVICES")
        print("=" * 50)
        
        for i, service in enumerate(self.services):
            if i < len(self.processes) and self.processes[i] and self.processes[i].poll() is None:
                status = "üü¢ RUNNING"
                pid = self.processes[i].pid
            else:
                status = "üî¥ STOPPED"
                pid = "N/A"
            
            print(f"{service['name']:<20} {status:<12} Port: {service['port']:<6} PID: {pid}")
        
        print("\\nüåê URLs d'acc√®s:")
        for service in self.services:
            print(f"‚Ä¢ {service['name']}: http://localhost:{service['port']}/docs")
        
        print(f"\\nüí° Pour arr√™ter tous les services: Ctrl+C")
    
    def stop_all_services(self):
        """Arr√™te tous les services"""
        print("\\nüõë Arr√™t des services...")
        
        for i, process in enumerate(self.processes):
            if process and process.poll() is None:
                service_name = self.services[i]['name'] if i < len(self.services) else f"Service {i}"
                print(f"üîÑ Arr√™t de {service_name}...")
                
                try:
                    process.terminate()
                    process.wait(timeout=5)
                    print(f"‚úÖ {service_name} arr√™t√©")
                except subprocess.TimeoutExpired:
                    print(f"‚ö†Ô∏è  Force l'arr√™t de {service_name}...")
                    process.kill()
                    process.wait()
                    print(f"‚úÖ {service_name} forc√© √† s'arr√™ter")
                except Exception as e:
                    print(f"‚ùå Erreur arr√™t {service_name}: {e}")
        
        print("‚úÖ Tous les services ont √©t√© arr√™t√©s")
    
    def monitor_services(self):
        """Surveille les services en continu"""
        try:
            print("\\nüîç Surveillance des services (Ctrl+C pour arr√™ter)...")
            while True:
                time.sleep(30)  # V√©rification toutes les 30 secondes
                
                # V√©rifier si tous les services sont encore actifs
                running_count = 0
                for i, process in enumerate(self.processes):
                    if process and process.poll() is None:
                        running_count += 1
                    else:
                        service_name = self.services[i]['name'] if i < len(self.services) else f"Service {i}"
                        print(f"‚ö†Ô∏è  {service_name} s'est arr√™t√© de mani√®re inattendue")
                
                if running_count == 0:
                    print("‚ùå Tous les services se sont arr√™t√©s")
                    break
                    
        except KeyboardInterrupt:
            print("\\n‚èπÔ∏è  Interruption demand√©e par l'utilisateur")
        finally:
            self.stop_all_services()


def main():
    """Point d'entr√©e principal"""
    print("ü§ñ DoctorPy Microservices Manager")
    print("Version 1.0.0")
    print()
    
    manager = ServiceManager()
    
    # Gestionnaire de signal pour arr√™t propre
    def signal_handler(signum, frame):
        print("\\n‚ö†Ô∏è  Signal d'arr√™t re√ßu")
        manager.stop_all_services()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # D√©marrer tous les services
        manager.start_all_services()
        
        if manager.processes:
            # Surveiller les services
            manager.monitor_services()
        
    except Exception as e:
        print(f"üí• Erreur critique: {e}")
        manager.stop_all_services()
        sys.exit(1)


if __name__ == "__main__":
    main()