{
  "chunk_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_024",
  "original_doc_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40",
  "content": "sub() replace() replace() word swordfish sdeedfish word \\bword\\b word replace() Another common task is deleting every occurrence of a single character from a string or replacing it with another single character. You might do this with something like re. sub('\\n', ' ', S), but translate() is capable of doing both tasks and will be faster than any regular expression operation can be. re. sub('\\n', ' ', S) translate() In short, before turning to the re module, consider whether your problem can be solved with a faster and simpler string method. re ### match() versus search()¶ The match() function only checks if the RE matches at the beginning of the string while search() will scan forward through the string for a match. It’s important to keep this distinction in mind. Remember, match() will only report a successful match which will start at 0; if the match wouldn’t start at zero, match() will not report it. match() search() match() match() >>> print(re. match('super', 'superstition'). span()) (0, 5) >>> print(re. match('super', 'insuperable')) None On the other hand, search() will scan forward through the string, reporting the first match it finds. search() >>> print(re. search('super', 'superstition'). span()) (0, 5) >>> print(re. search('super', 'insuperable'). span()) (2, 7) Sometimes you’ll be tempted to keep using re. match(), and just add. to the front of your RE. Resist this temptation and use re. search() instead. The regular expression compiler does some analysis of REs in order to speed up the process of looking for a match. One such analysis figures out what the first character of a match must be; for example, a pattern starting with Crow must match starting with a 'C'. The analysis lets the engine quickly scan through the string looking for the starting character, only trying the full match if a 'C' is found. re. match(). * re. search() Crow 'C' 'C' Adding. defeats this optimization, requiring scanning to the end of the string and then backtracking to find a match for the rest of the RE. Use re. search() instead. * re.",
  "title": "Regular Expression HOWTO.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 24,
  "start_char": 48668,
  "end_char": 50730,
  "token_count": 478,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_ac8c5a4a74040ab8.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:41.050613"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_024.txt"
}