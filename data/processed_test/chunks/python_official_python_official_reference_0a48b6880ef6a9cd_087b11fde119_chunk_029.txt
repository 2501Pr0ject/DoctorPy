in not in x in s True False x not in s x in s in x in y any(x is e or x == e for e in y) For the string and bytes types, x in y is True if and only if x is a substring of y. An equivalent test is y. find(x). = -1. Empty strings are always considered to be a substring of any other string, so "" in "abc" will return True. x in y True y. find(x). = -1 "" in "abc" True For user-defined classes which define the contains() method, x in y returns True if y. contains(x) returns a true value, and False otherwise. __contains__() x in y True y. __contains__(x) False For user-defined classes which do not define contains() but do define iter(), x in y is True if some value z, for which the expression x is z or x == z is true, is produced while iterating over y. If an exception is raised during the iteration, it is as if in raised that exception. __contains__() __iter__() x in y True z x is z or x == z y in Lastly, the old-style iteration protocol is tried: if a class defines getitem(), x in y is True if and only if there is a non-negative integer index i such that x is y[i] or x == y[i], and no lower integer index raises the IndexError exception. (If any other exception is raised, it is as if in raised that exception). __getitem__() x in y True x is y[i] or x == y[i] IndexError in The operator not in is defined to have the inverse truth value of in. not in in ### 6. 10. 3. Identity comparisons¶ The operators is and is not test for an object’s identity: x is y is true if and only if x and y are the same object. An Object’s identity is determined using the id() function. x is not y yields the inverse truth value. [4] is is not x is y id() x is not y ## 6. 11.