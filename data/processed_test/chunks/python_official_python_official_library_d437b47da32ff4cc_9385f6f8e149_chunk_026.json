{
  "chunk_id": "python_official_python_official_library_d437b47da32ff4cc_9385f6f8e149_chunk_026",
  "original_doc_id": "python_official_python_official_library_d437b47da32ff4cc_9385f6f8e149",
  "content": "This is also required for activating the trace function on the current frame, which settrace() doesn’t do. Note that in order for this to work, a global tracing function must have been installed with settrace() in order to enable the runtime tracing machinery, but it doesn’t need to be the same tracing function (e. g. it could be a low overhead tracing function that simply returns None to disable itself immediately on each frame). frame. f_trace = tracefunc settrace() settrace() None For more information on code and frame objects, refer to The standard type hierarchy. Raises an auditing event sys. settrace with no arguments. sys. settrace CPython implementation detail: The settrace() function is intended only for implementing debuggers, profilers, coverage tools and the like. Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available in all Python implementations. settrace() Changed in version 3. 7: 'opcode' event type added; f_trace_lines and f_trace_opcodes attributes added to frames 'opcode' f_trace_lines f_trace_opcodes Accepts two optional keyword arguments which are callables that accept an asynchronous generator iterator as an argument. The firstiter callable will be called when an asynchronous generator is iterated for the first time. The finalizer will be called when an asynchronous generator is about to be garbage collected. Raises an auditing event sys. set_asyncgen_hooks_firstiter with no arguments. sys. set_asyncgen_hooks_firstiter Raises an auditing event sys. set_asyncgen_hooks_finalizer with no arguments. sys. set_asyncgen_hooks_finalizer Two auditing events are raised because the underlying API consists of two calls, each of which must raise its own event. Added in version 3. 6: See PEP 525 for more details, and for a reference example of a finalizer method see the implementation of asyncio. Loop. shutdown_asyncgens in Lib/asyncio/base_events. py asyncio. Loop. shutdown_asyncgens Note This function has been added on a provisional basis (see PEP 411 for details. ) Allows enabling or disabling coroutine origin tracking. When enabled, the cr_origin attribute on coroutine objects will contain a tuple of (filename, line number, function name) tuples describing the traceback where the coroutine object was created, with the most recent call first. When disabled, cr_origin will be None.",
  "title": "sys — System-specific parameters and functions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 26,
  "start_char": 57349,
  "end_char": 59754,
  "token_count": 491,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_d437b47da32ff4cc.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:04.441805"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_d437b47da32ff4cc_9385f6f8e149_chunk_026.txt"
}