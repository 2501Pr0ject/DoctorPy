{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_033",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "Implementing Descriptors¶ The following methods only apply when an instance of the class containing the method (a so-called descriptor class) appears in an owner class (the descriptor must be in either the owner’s class dictionary or in the class dictionary for one of its parents). In the examples below, “the attribute” refers to the attribute whose name is the key of the property in the owner class’ dict. The object class itself does not implement any of these protocols. __dict__ object Called to get the attribute of the owner class (class attribute access) or of an instance of that class (instance attribute access). The optional owner argument is the owner class, while instance is the instance that the attribute was accessed through, or None when the attribute is accessed through the owner. None This method should return the computed attribute value or raise an AttributeError exception. AttributeError PEP 252 specifies that get() is callable with one or two arguments. Python’s own built-in descriptors support this specification; however, it is likely that some third-party tools have descriptors that require both arguments. Python’s own getattribute() implementation always passes in both arguments whether they are required or not. __get__() __getattribute__() Called to set the attribute on an instance instance of the owner class to a new value, value. Note, adding set() or delete() changes the kind of descriptor to a “data descriptor”. See Invoking Descriptors for more details. __set__() __delete__() Called to delete the attribute on an instance instance of the owner class. Instances of descriptors may also have the objclass attribute present: __objclass__ The attribute objclass is interpreted by the inspect module as specifying the class where this object was defined (setting this appropriately can assist in runtime introspection of dynamic class attributes). For callables, it may indicate that an instance of the given type (or a subclass) is expected or required as the first positional argument (for example, CPython sets this attribute for unbound methods that are implemented in C). __objclass__ inspect #### 3. 3. 2. 3. Invoking Descriptors¶ In general, a descriptor is an object attribute with “binding behavior”, one whose attribute access has been overridden by methods in the descriptor protocol: get(), set(), and delete(). If any of those methods are defined for an object, it is said to be a descriptor.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 33,
  "start_char": 76024,
  "end_char": 78475,
  "token_count": 483,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.724231"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_033.txt"
}