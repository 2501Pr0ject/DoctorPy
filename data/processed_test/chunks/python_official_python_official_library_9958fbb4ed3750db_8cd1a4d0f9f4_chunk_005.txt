operator Operation Syntax Function Addition a + b a + b add(a, b) add(a, b) Concatenation seq1 + seq2 seq1 + seq2 concat(seq1, seq2) concat(seq1, seq2) Containment Test obj in seq obj in seq contains(seq, obj) contains(seq, obj) Division a / b a / b truediv(a, b) truediv(a, b) Division a // b a // b floordiv(a, b) floordiv(a, b) Bitwise And a & b a & b and_(a, b) and_(a, b) Bitwise Exclusive Or a ^ b a ^ b xor(a, b) xor(a, b) Bitwise Inversion ~ a ~ a invert(a) invert(a) Bitwise Or a | b a | b or_(a, b) or_(a, b) Exponentiation a ** b a ** b pow(a, b) pow(a, b) Identity a is b a is b is_(a, b) is_(a, b) Identity a is not b a is not b is_not(a, b) is_not(a, b) Indexed Assignment obj[k] = v obj[k] = v setitem(obj, k, v) setitem(obj, k, v) Indexed Deletion del obj[k] del obj[k] delitem(obj, k) delitem(obj, k) Indexing obj[k] obj[k] getitem(obj, k) getitem(obj, k) Left Shift a << b a << b lshift(a, b) lshift(a, b) Modulo a % b a % b mod(a, b) mod(a, b) Multiplication a * b a * b mul(a, b) mul(a, b) Matrix Multiplication a @ b a @ b matmul(a, b) matmul(a, b) Negation (Arithmetic) - a - a neg(a) neg(a) Negation (Logical) not a not a not_(a) not_(a) Positive + a + a pos(a) pos(a) Right Shift a >> b a >> b rshift(a, b) rshift(a, b) Slice Assignment seq[i:j] = values seq[i:j] = values setitem(seq, slice(i, j), values) setitem(seq, slice(i, j), values) Slice Deletion del seq[i:j] del seq[i:j] delitem(seq, slice(i, j)) delitem(seq, slice(i, j)) Slicing seq[i:j] seq[i:j] getitem(seq, slice(i, j)) getitem(seq, slice(i, j)) String Formatting s % obj s % obj mod(s, obj) mod(s, obj) Subtraction a - b a - b sub(a, b) sub(a, b) Truth Test obj obj truth(obj) truth(obj) Ordering a < b a < b lt(a, b) lt(a, b) Ordering a <= b a <= b le(a, b) le(a, b) Equality a == b a == b eq(a, b) eq(a, b) Difference a.