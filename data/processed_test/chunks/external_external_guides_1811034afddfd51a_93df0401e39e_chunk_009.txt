verbosity >= 1: print(f"{args. square}^2 == {answer}") else: print(answer) And this is what it gives: $ python prog. py 4 -vvv the square of 4 equals 16 $ python prog. py 4 -vvvv the square of 4 equals 16 $ python prog. py 4 Traceback (most recent call last): File "prog. py", line 11, in <module> if args. verbosity >= 2: TypeError: '>=' not supported between instances of 'NoneType' and 'int' First output went well, and fixes the bug we had before. That is, we want any value >= 2 to be as verbose as possible. First output went well, and fixes the bug we had before. That is, we want any value >= 2 to be as verbose as possible. Third output not so good. Third output not so good. Let’s fix that bug: import argparse parser = argparse. ArgumentParser() parser. add_argument("square", type=int, help="display a square of a given number") parser. add_argument("-v", "--verbosity", action="count", default=0, help="increase output verbosity") args = parser. parse_args() answer = args. square**2 if args. verbosity >= 2: print(f"the square of {args. square} equals {answer}") elif args. verbosity >= 1: print(f"{args. square}^2 == {answer}") else: print(answer) We’ve just introduced yet another keyword, default. We’ve set it to 0 in order to make it comparable to the other int values. Remember that by default, if an optional argument isn’t specified, it gets the None value, and that cannot be compared to an int value (hence the TypeError exception). default 0 None TypeError And: $ python prog. py 4 16 You can go quite far just with what we’ve learned so far, and we have only scratched the surface. The argparse module is very powerful, and we’ll explore a bit more of it before we end this tutorial. argparse ## Getting a little more advanced¶ What if we wanted to expand our tiny program to perform other powers, not just squares: import argparse parser = argparse. ArgumentParser() parser. add_argument("x", type=int, help="the base") parser.