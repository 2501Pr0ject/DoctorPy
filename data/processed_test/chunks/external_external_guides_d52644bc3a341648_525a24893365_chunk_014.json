{
  "chunk_id": "external_external_guides_d52644bc3a341648_525a24893365_chunk_014",
  "original_doc_id": "external_external_guides_d52644bc3a341648_525a24893365",
  "content": "_single_leading_underscore from M import * single_trailing_underscore: used by convention to avoid conflicts with Python keyword, e. g. :tkinter. Toplevel(master, class_='ClassName') single_trailing_underscore_ tkinter. Toplevel(master, class_='ClassName') double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, __boo becomes _FooBar__boo; see below). __double_leading_underscore __boo _FooBar__boo __double_leading_and_trailing_underscore: “magic” objects or attributes that live in user-controlled namespaces. E. g. init, import or file. Never invent such names; only use them as documented. __double_leading_and_trailing_underscore__ __init__ __import__ __file__ ### Prescriptive: Naming Conventions #### Names to Avoid Never use the characters ‘l’ (lowercase letter el), ‘O’ (uppercase letter oh), or ‘I’ (uppercase letter eye) as single character variable names. In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use ‘l’, use ‘L’ instead. #### ASCII Compatibility Identifiers used in the standard library must be ASCII compatible as described in the policy section of PEP 3131. #### Package and Module Names Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged. When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e. g. more object oriented) interface, the C/C++ module has a leading underscore (e. g. socket). _socket #### Class Names Class names should normally use the CapWords convention. The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable. Note that there is a separate convention for builtin names: most builtin names are single words (or two words run together), with the CapWords convention used only for exception names and builtin constants. #### Type Variable Names Names of type variables introduced in PEP 484 should normally use CapWords preferring short names: T, AnyStr, Num.",
  "title": "PEP 8 – Style Guide for Python Code | peps.python.org",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 14,
  "start_char": 28804,
  "end_char": 31011,
  "token_count": 477,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_d52644bc3a341648.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:41.779005"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_d52644bc3a341648_525a24893365_chunk_014.txt"
}