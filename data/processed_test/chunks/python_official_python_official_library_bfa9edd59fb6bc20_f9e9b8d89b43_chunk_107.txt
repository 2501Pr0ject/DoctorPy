0, 4. 0, 5. 0]) >>> c = array. array('b', [5, 3, 1]) >>> x = memoryview(a) >>> y = memoryview(b) >>> x == a == y == b True >>> x. tolist() == a. tolist() == y. tolist() == b. tolist() True >>> z = y[::-2] >>> z == c True >>> z. tolist() == c. tolist() True struct >>> from ctypes import BigEndianStructure, c_long >>> class BEPoint(BigEndianStructure):. _fields_ = [("x", c_long), ("y", c_long)]. >>> point = BEPoint(100, 200) >>> a = memoryview(point) >>> b = memoryview(point) >>> a == point False >>> a == b False v is w v == w bytes >>> m = memoryview(b"abc") >>> m. tobytes() b'abc' >>> bytes(m) b'abc' tobytes() struct >>> m = memoryview(b"abc") >>> m. hex() '616263' bytes. hex() memoryview. hex() >>> memoryview(b'abc'). tolist() [97, 98, 99] >>> import array >>> a = array. array('d', [1. 1, 2. 2, 3. 3]) >>> m = memoryview(a) >>> m. tolist() [1. 1, 2. 2, 3. 3] tolist() struct >>> m = memoryview(bytearray(b'abc')) >>> mm = m. toreadonly() >>> mm. tolist() [97, 98, 99] >>> mm[0] = 42 Traceback (most recent call last): File "<stdin>", line 1, in <module> TypeError: cannot modify read-only memory >>> m[0] = 43 >>> mm. tolist() [43, 98, 99] bytearray ValueError release() >>> m = memoryview(b'abc') >>> m. release() >>> m[0] Traceback (most recent call last): File "<stdin>", line 1, in <module> ValueError: operation forbidden on released memoryview object with >>> with memoryview(b'abc') as m:. m[0].