Traceback (most recent call last): File "<stdin>", line 2, in <module> print(1 / 0) ~~^~~ ZeroDivisionError: division by zero The above exception was the direct cause of the following exception: Traceback (most recent call last): File "<stdin>", line 4, in <module> raise RuntimeError("Something bad happened") from exc RuntimeError: Something bad happened except finally with __context__ >>> try:. print(1 / 0). except:. raise RuntimeError("Something bad happened"). Traceback (most recent call last): File "<stdin>", line 2, in <module> print(1 / 0) ~~^~~ ZeroDivisionError: division by zero During handling of the above exception, another exception occurred: Traceback (most recent call last): File "<stdin>", line 4, in <module> raise RuntimeError("Something bad happened") RuntimeError: Something bad happened None from >>> try:. print(1 / 0). except:. raise RuntimeError("Something bad happened") from None. Traceback (most recent call last): File "<stdin>", line 4, in <module> RuntimeError: Something bad happened None Y raise X from Y __suppress_context__ except raise break break_stmt ::= "break" break for while else for break break try finally finally continue continue_stmt ::= "continue" continue for while continue try finally finally import import_stmt ::= "import" module ["as" identifier] ("," module ["as" identifier])* | "from" relative_module "import" identifier ["as" identifier] ("," identifier ["as" identifier])* | "from" relative_module "import" "(" identifier ["as" identifier] ("," identifier ["as" identifier])* [","] ")" | "from" relative_module "import" "*" module ::= (identifier ". ")* identifier relative_module ::= ". "* module | ". "+ module identifier module identifier relative_module identifier identifier identifier identifier relative_module identifier identifier identifier identifier relative_module identifier identifier module from import as as from from import ImportError as import foo # foo imported and bound locally import foo. bar. baz # foo, foo. bar, and foo. bar. baz imported, foo bound locally import foo. bar. baz as fbb # foo, foo. bar, and foo. bar. baz imported, foo. bar. baz bound as fbb from foo. bar import baz # foo, foo. bar, and foo. bar. baz imported, foo. bar.