j 10j. 001j 1e100j 3. 14e-10j 3. 14_15_93j ## 2. 5. Operators¶ The following tokens are operators: + - * ** / // % @ << >> & | ^ ~ := < > <= >= ==. = ## 2. 6. Delimiters¶ The following tokens serve as delimiters in the grammar: ( ) [ ] { } , :. ; @ = -> += -= *= /= //= %= @= &= |= ^= >>= <<= **= The period can also occur in floating-point and imaginary literals. A sequence of three periods has a special meaning as an ellipsis literal. The second half of the list, the augmented assignment operators, serve lexically as delimiters, but also perform an operation. The following printing ASCII characters have special meaning as part of other tokens or are otherwise significant to the lexical analyzer: ' " # \ The following printing ASCII characters are not used in Python. Their occurrence outside string literals and comments is an unconditional error: $. Footnotes ### Table of Contents 2. Lexical analysis 2. 1. Line structure 2. 1. 1. Logical lines 2. 1. 2. Physical lines 2. 1. 3. Comments 2. 1. 4. Encoding declarations 2. 1. 5. Explicit line joining 2. 1. 6. Implicit line joining 2. 1. 7. Blank lines 2. 1. 8. Indentation 2. 1. 9. Whitespace between tokens 2. 2. Other tokens 2. 3. Identifiers and keywords 2. 3. 1. Keywords 2. 3. 2. Soft Keywords 2. 3. 3. Reserved classes of identifiers 2. 4. Literals 2. 4. 1. String and Bytes literals 2. 4. 1. 1. Escape sequences 2. 4. 2. String literal concatenation 2. 4. 3. f-strings 2. 4. 4. Numeric literals 2. 4. 5. Integer literals 2. 4. 6. Floating-point literals 2. 4. 7.