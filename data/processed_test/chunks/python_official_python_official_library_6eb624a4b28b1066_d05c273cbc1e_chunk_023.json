{
  "chunk_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_023",
  "original_doc_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e",
  "content": "If you merely want to remove the timezone object from an aware datetime dt without conversion of date and time data, use dt. replace(tzinfo=None). timezone dt. replace(tzinfo=tz) timezone dt. replace(tzinfo=None) Note that the default tzinfo. fromutc() method can be overridden in a tzinfo subclass to affect the result returned by astimezone(). Ignoring error cases, astimezone() acts like: tzinfo. fromutc() tzinfo astimezone() astimezone() def astimezone(self, tz): if self. tzinfo is tz: return self # Convert self to UTC, and attach the new timezone object. utc = (self - self. utcoffset()). replace(tzinfo=tz) # Convert from UTC to tz's local time. return tz. fromutc(utc) Changed in version 3. 3: tz now can be omitted. Changed in version 3. 6: The astimezone() method can now be called on naive instances that are presumed to represent system local time. astimezone() If tzinfo is None, returns None, else returns self. tzinfo. utcoffset(self), and raises an exception if the latter doesn’t return None or a timedelta object with magnitude less than one day. tzinfo None None self. tzinfo. utcoffset(self) None timedelta Changed in version 3. 7: The UTC offset is not restricted to a whole number of minutes. If tzinfo is None, returns None, else returns self. tzinfo. dst(self), and raises an exception if the latter doesn’t return None or a timedelta object with magnitude less than one day. tzinfo None None self. tzinfo. dst(self) None timedelta Changed in version 3. 7: The DST offset is not restricted to a whole number of minutes. If tzinfo is None, returns None, else returns self. tzinfo. tzname(self), raises an exception if the latter doesn’t return None or a string object, tzinfo None None self. tzinfo. tzname(self) None Return a time. struct_time such as returned by time. localtime(). time. struct_time time. localtime() d. timetuple() is equivalent to: d. timetuple() time. struct_time((d. year, d. month, d. day, d. hour, d. minute, d. second, d.",
  "title": "datetime — Basic date and time types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 23,
  "start_char": 46654,
  "end_char": 48626,
  "token_count": 500,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_6eb624a4b28b1066.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:01.400874"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_023.txt"
}