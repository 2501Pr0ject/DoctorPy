Read from a file descriptor fd into a number of mutable bytes-like objects buffers. Transfer data into each buffer until it is full and then move on to the next buffer in the sequence to hold the rest of the data. Return the total number of bytes actually read which can be less than the total capacity of all the objects. The operating system may set a limit (sysconf() value 'SC_IOV_MAX') on the number of buffers that can be used. sysconf() 'SC_IOV_MAX' Availability: Unix. Added in version 3. 3. Return the process group associated with the terminal given by fd (an open file descriptor as returned by os. open()). os. open() Availability: Unix, not WASI. Set the process group associated with the terminal given by fd (an open file descriptor as returned by os. open()) to pg. os. open() Availability: Unix, not WASI. Return a string which specifies the terminal device associated with file descriptor fd. If fd is not associated with a terminal device, an exception is raised. Availability: Unix. Unlock the slave pseudo-terminal device associated with the master pseudo-terminal device to which the file descriptor fd refers. The file descriptor fd is not closed upon failure. Calls the C standard library function unlockpt(). unlockpt() Availability: Unix, not WASI. Added in version 3. 13. Write the bytestring in str to file descriptor fd. Return the number of bytes actually written. Note This function is intended for low-level I/O and must be applied to a file descriptor as returned by os. open() or pipe(). To write a “file object” returned by the built-in function open() or by popen() or fdopen(), or sys. stdout or sys. stderr, use its write() method. os. open() pipe() open() popen() fdopen() sys. stdout sys. stderr write() Changed in version 3. 5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an InterruptedError exception (see PEP 475 for the rationale). InterruptedError Write the contents of buffers to file descriptor fd. buffers must be a sequence of bytes-like objects. Buffers are processed in array order. Entire contents of the first buffer is written before proceeding to the second, and so on. Returns the total number of bytes actually written.