{
  "chunk_id": "python_official_python_official_library_96003c24587351a2_74918d6d2a40_chunk_035",
  "original_doc_id": "python_official_python_official_library_96003c24587351a2_74918d6d2a40",
  "content": "super() Rather than being a function, tuple is actually an immutable sequence type, as documented in Tuples and Sequence Types — list, tuple, range. tuple With one argument, return the type of an object. The return value is a type object and generally the same object as returned by object. class. object. __class__ The isinstance() built-in function is recommended for testing the type of an object, because it takes subclasses into account. isinstance() With three arguments, return a new type object. This is essentially a dynamic form of the class statement. The name string is the class name and becomes the name attribute. The bases tuple contains the base classes and becomes the bases attribute; if empty, object, the ultimate base of all classes, is added. The dict dictionary contains attribute and method definitions for the class body; it may be copied or wrapped before becoming the dict attribute. The following two statements create identical type objects: class __name__ __bases__ object __dict__ type >>> class X:. a = 1. >>> X = type('X', (), dict(a=1)) See also: Documentation on attributes and methods on classes. Documentation on attributes and methods on classes. Type Objects Type Objects Keyword arguments provided to the three argument form are passed to the appropriate metaclass machinery (usually init_subclass()) in the same way that keywords in a class definition (besides metaclass) would. __init_subclass__() See also Customizing class creation. Changed in version 3. 6: Subclasses of type which don’t override type. new may no longer use the one-argument form to get the type of an object. type type. __new__ Return the dict attribute for a module, class, instance, or any other object with a dict attribute. __dict__ __dict__ Objects such as modules and instances have an updateable dict attribute; however, other objects may have write restrictions on their dict attributes (for example, classes use a types. MappingProxyType to prevent direct dictionary updates). __dict__ __dict__ types. MappingProxyType Without an argument, vars() acts like locals(). vars() locals() A TypeError exception is raised if an object is specified but it doesn’t have a dict attribute (for example, if its class defines the slots attribute). TypeError __dict__ __slots__ Changed in version 3. 13: The result of calling this function without an argument has been updated as described for the locals() builtin.",
  "title": "Built-in Functions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 35,
  "start_char": 75544,
  "end_char": 77968,
  "token_count": 501,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_96003c24587351a2.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:31.025375"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_96003c24587351a2_74918d6d2a40_chunk_035.txt"
}