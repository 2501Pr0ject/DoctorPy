{
  "chunk_id": "python_official_python_official_library_9696fac185a46f7d_fca9d84d248c_chunk_002",
  "original_doc_id": "python_official_python_official_library_9696fac185a46f7d_fca9d84d248c",
  "content": "from_iterable(['ABC', 'DEF']) → A B C D E F compress() compress() data, selectors (d[0] if s[0]), (d[1] if s[1]), … compress('ABCDEF', [1,0,1,0,1,1]) → A C E F compress('ABCDEF', [1,0,1,0,1,1]) → A C E F dropwhile() dropwhile() predicate, seq seq[n], seq[n+1], starting when predicate fails dropwhile(lambda x: x<5, [1,4,6,3,8]) → 6 3 8 dropwhile(lambda x: x<5, [1,4,6,3,8]) → 6 3 8 filterfalse() filterfalse() predicate, seq elements of seq where predicate(elem) fails filterfalse(lambda x: x<5, [1,4,6,3,8]) → 6 8 filterfalse(lambda x: x<5, [1,4,6,3,8]) → 6 8 groupby() groupby() iterable[, key] sub-iterators grouped by value of key(v) groupby(['A','B','DEF'], len) → (1, A B) (3, DEF) groupby(['A','B','DEF'], len) → (1, A B) (3, DEF) islice() islice() seq, [start,] stop [, step] elements from seq[start:stop:step] islice('ABCDEFG', 2, None) → C D E F G islice('ABCDEFG', 2, None) → C D E F G pairwise() pairwise() iterable (p[0], p[1]), (p[1], p[2]) pairwise('ABCDEFG') → AB BC CD DE EF FG pairwise('ABCDEFG') → AB BC CD DE EF FG starmap() starmap() func, seq func(seq[0]), func(seq[1]), … starmap(pow, [(2,5), (3,2), (10,3)]) → 32 9 1000 starmap(pow, [(2,5), (3,2), (10,3)]) → 32 9 1000 takewhile() takewhile() predicate, seq seq[0], seq[1], until predicate fails takewhile(lambda x: x<5, [1,4,6,3,8]) → 1 4 takewhile(lambda x: x<5, [1,4,6,3,8]) → 1 4 tee() tee() it, n it1, it2, … itn splits one iterator into n zip_longest() zip_longest() p, q, … (p[0], q[0]), (p[1], q[1]), … zip_longest('ABCD', 'xy', fillvalue='-') → Ax By C- D- zip_longest('ABCD', 'xy', fillvalue='-') → Ax By C- D- Combinatoric iterators: Iterator Arguments Results product() product() p, q, … [repeat=1] cartesian product, equivalent to a nested for-loop permutations() permutations() p[, r] r-length tuples, all possible orderings, no repeated elements combinations() combinations() p, r r-length tuples, in sorted order, no repeated elements combinations_with_replacement() combinations_with_replacement() p, r r-length tuples, in sorted order, with repeated elements Examples Results product('ABCD', repeat=2) product('ABCD', repeat=2) AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD permutations('ABCD', 2) permutations('ABCD', 2) AB AC AD BA BC BD CA CB CD DA DB DC AB AC AD BA BC BD CA CB CD DA DB DC combinations('ABCD', 2) combinations('ABCD', 2) AB AC AD BC BD CD AB AC AD BC BD CD combinations_with_replacement('ABCD', 2) combinations_with_replacement('ABCD', 2) AA AB AC AD BB BC BD CC CD DD AA AB AC AD BB BC BD CC CD DD ## Itertool Functions¶ The following functions all construct and return iterators.",
  "title": "itertools — Functions creating iterators for efficient looping.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 2,
  "start_char": 1830,
  "end_char": 4475,
  "token_count": 922,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_9696fac185a46f7d.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:02.094740"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_9696fac185a46f7d_fca9d84d248c_chunk_002.txt"
}