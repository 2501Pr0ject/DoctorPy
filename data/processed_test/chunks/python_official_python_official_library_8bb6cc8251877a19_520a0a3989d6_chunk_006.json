{
  "chunk_id": "python_official_python_official_library_8bb6cc8251877a19_520a0a3989d6_chunk_006",
  "original_doc_id": "python_official_python_official_library_8bb6cc8251877a19_520a0a3989d6",
  "content": "def __init__(self):. self. _alive = False. @property. def alive(self):. return self. _alive. def set_state(self, state):. self. _alive = bool(state). set_alive = partialmethod(set_state, True). set_dead = partialmethod(set_state, False). >>> c = Cell() >>> c. alive False >>> c. set_alive() >>> c. alive True Added in version 3. 4. Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value. For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5). The left argument, x, is the accumulated value and the right argument, y, is the update value from the iterable. If the optional initial is present, it is placed before the items of the iterable in the calculation, and serves as a default when the iterable is empty. If initial is not given and iterable contains only one item, the first item is returned. reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) ((((1+2)+3)+4)+5) Roughly equivalent to: initial_missing = object() def reduce(function, iterable, initial=initial_missing, /): it = iter(iterable) if initial is initial_missing: value = next(it) else: value = initial for element in it: value = function(value, element) return value See itertools. accumulate() for an iterator that yields all intermediate values. itertools. accumulate() Transform a function into a single-dispatch generic function. To define a generic function, decorate it with the @singledispatch decorator. When defining a function using @singledispatch, note that the dispatch happens on the type of the first argument: @singledispatch @singledispatch >>> from functools import singledispatch >>> @singledispatch. def fun(arg, verbose=False):. if verbose:. print(\"Let me just say,\", end=\" \"). print(arg) To add overloaded implementations to the function, use the register() attribute of the generic function, which can be used as a decorator. For functions annotated with types, the decorator will infer the type of the first argument automatically: register() >>> @fun. register.",
  "title": "functools â€” Higher-order functions and operations on callable objects.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 6,
  "start_char": 13698,
  "end_char": 15754,
  "token_count": 501,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_8bb6cc8251877a19.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:09.502282"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_8bb6cc8251877a19_520a0a3989d6_chunk_006.txt"
}