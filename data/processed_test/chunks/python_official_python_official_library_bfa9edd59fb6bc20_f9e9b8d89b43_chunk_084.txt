return "Hello". >>> class C(metaclass=M):. pass. >>> C | int 'Hello' >>> int | C int | C See also PEP 604 – PEP proposing the X | Y syntax and the Union type. X | Y Added in version 3. 10. ## Other Built-in Types¶ The interpreter supports several other kinds of objects. Most of these support only one or two operations. ### Modules¶ The only special operation on a module is attribute access: m. name, where m is a module and name accesses a name defined in m’s symbol table. Module attributes can be assigned to. (Note that the import statement is not, strictly speaking, an operation on a module object; import foo does not require a module object named foo to exist, rather it requires an (external) definition for a module named foo somewhere. ) m. name import import foo A special attribute of every module is dict. This is the dictionary containing the module’s symbol table. Modifying this dictionary will actually change the module’s symbol table, but direct assignment to the dict attribute is not possible (you can write m. dict['a'] = 1, which defines m. a to be 1, but you can’t write m. dict = {}). Modifying dict directly is not recommended. __dict__ __dict__ m. __dict__['a'] = 1 m. a 1 m. __dict__ = {} __dict__ Modules built into the interpreter are written like this:. If loaded from a file, they are written as. <module 'sys' (built-in)> <module 'os' from '/usr/local/lib/pythonX. Y/os. pyc'> ### Classes and Class Instances¶ See Objects, values and types and Class definitions for these. ### Functions¶ Function objects are created by function definitions. The only operation on a function object is to call it: func(argument-list). func(argument-list) There are really two flavors of function objects: built-in functions and user-defined functions. Both support the same operation (to call the function), but the implementation is different, hence the different object types. See Function definitions for more information. ### Methods¶ Methods are functions that are called using the attribute notation. There are two flavors: built-in methods (such as append() on lists) and class instance method. Built-in methods are described with the types that support them.