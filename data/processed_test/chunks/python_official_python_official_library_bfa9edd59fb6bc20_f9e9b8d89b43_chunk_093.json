{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_093",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "lstrip('-0b') # remove leading zeros and minus sign return len(s) # len('100101') --> 6 >>> n = 19 >>> bin(n) '0b10011' >>> n. bit_count() 3 >>> (-n). bit_count() 3 def bit_count(self): return bin(self). count(\"1\") >>> (1024). to_bytes(2, byteorder='big') b'\\x04\\x00' >>> (1024). to_bytes(10, byteorder='big') b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00' >>> (-1024). to_bytes(10, byteorder='big', signed=True) b'\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\x00' >>> x = 1000 >>> x. to_bytes((x. bit_length() + 7) // 8, byteorder='little') b'\\xe8\\x03' OverflowError \"big\" \"big\" \"little\" False OverflowError False >>> (65). to_bytes() b'A' OverflowError def to_bytes(n, length=1, byteorder='big', signed=False): if byteorder == 'little': order = range(length) elif byteorder == 'big': order = reversed(range(length)) else: raise ValueError(\"byteorder must be either 'little' or 'big'\") return bytes((n >> i*8) & 0xff for i in order) length byteorder >>> int. from_bytes(b'\\x00\\x10', byteorder='big') 16 >>> int. from_bytes(b'\\x00\\x10', byteorder='little') 4096 >>> int. from_bytes(b'\\xfc\\x00', byteorder='big', signed=True) -1024 >>> int. from_bytes(b'\\xfc\\x00', byteorder='big', signed=False) 64512 >>> int. from_bytes([255, 0, 0], byteorder='big') 16711680 \"big\" \"big\" \"little\" sys.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 93,
  "start_char": 191610,
  "end_char": 192884,
  "token_count": 426,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.264898"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_093.txt"
}