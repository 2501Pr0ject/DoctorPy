{
  "chunk_id": "python_official_python_official_library_275d02bc254e97ec_ea8f648931f7_chunk_062",
  "original_doc_id": "python_official_python_official_library_275d02bc254e97ec_ea8f648931f7",
  "content": "with See the Microsoft documentation for more information about how DLLs are loaded. Raises an auditing event os. add_dll_directory with argument path. os. add_dll_directory path Availability: Windows. Added in version 3. 8: Previous versions of CPython would resolve DLLs using the default behavior for the current process. This led to inconsistencies, such as only sometimes searching PATH or the current working directory, and OS functions such as AddDllDirectory having no effect. PATH AddDllDirectory In 3. 8, the two primary ways DLLs are loaded now explicitly override the process-wide behavior to ensure consistency. See the porting notes for information on updating libraries. These functions all execute a new program, replacing the current process; they do not return. On Unix, the new executable is loaded into the current process, and will have the same process id as the caller. Errors will be reported as OSError exceptions. OSError The current process is replaced immediately. Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys. stdout. flush() or os. fsync() before calling an exec function. sys. stdout. flush() os. fsync() exec* The “l” and “v” variants of the exec functions differ in how command-line arguments are passed. The “l” variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl() functions. The “v” variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter. In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced. exec* execl*() The variants which include a “p” near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file. When the environment is being replaced (using one of the exece variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable. The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.",
  "title": "os — Miscellaneous operating system interfaces.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 62,
  "start_char": 131650,
  "end_char": 133982,
  "token_count": 486,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_275d02bc254e97ec.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:24.826974"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_275d02bc254e97ec_ea8f648931f7_chunk_062.txt"
}