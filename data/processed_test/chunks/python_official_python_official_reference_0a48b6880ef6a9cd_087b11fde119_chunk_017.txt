For the call f(x1, x2, y, x3, x4), if y evaluates to a sequence y1, …, yM, this is equivalent to a call with M+4 positional arguments x1, x2, y1, …, yM, x3, x4. *expression expression f(x1, x2, *y, x3, x4) A consequence of this is that although the expression syntax may appear after explicit keyword arguments, it is processed before the keyword arguments (and any expression arguments – see below). So: *expression **expression >>> def f(a, b):. print(a, b). >>> f(b=1, *(2,)) 2 1 >>> f(a=1, *(2,)) Traceback (most recent call last): File "<stdin>", line 1, in <module> TypeError: f() got multiple values for keyword argument 'a' >>> f(1, *(2,)) 1 2 It is unusual for both keyword arguments and the *expression syntax to be used in the same call, so in practice this confusion does not often arise. *expression If the syntax expression appears in the function call, expression must evaluate to a mapping, the contents of which are treated as additional keyword arguments. If a parameter matching a key has already been given a value (by an explicit keyword argument, or from another unpacking), a TypeError exception is raised. **expression expression TypeError When expression is used, each key in this mapping must be a string. Each value from the mapping is assigned to the first formal parameter eligible for keyword assignment whose name is equal to the key. A key need not be a Python identifier (e. g. "max-temp °F" is acceptable, although it will not match any formal parameter that could be declared). If there is no match to a formal parameter the key-value pair is collected by the ** parameter, if there is one, or if there is not, a TypeError exception is raised. **expression "max-temp °F" ** TypeError Formal parameters using the syntax *identifier or identifier cannot be used as positional argument slots or as keyword argument names. *identifier **identifier Changed in version 3. 5: Function calls accept any number of * and ** unpackings, positional arguments may follow iterable unpackings (), and keyword arguments may follow dictionary unpackings (). Originally proposed by PEP 448.