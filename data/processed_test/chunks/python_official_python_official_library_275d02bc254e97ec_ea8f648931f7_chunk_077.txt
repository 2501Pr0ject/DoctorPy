waitstatus_to_exitcode() Availability: Unix, not WASI, not Android, not iOS. These are the possible values for idtype in waitid(). They affect how id is interpreted: waitid() P_PID - wait for the child whose PID is id. P_PID - wait for the child whose PID is id. P_PID P_PGID - wait for any child whose progress group ID is id. P_PGID - wait for any child whose progress group ID is id. P_PGID P_ALL - wait for any child; id is ignored. P_ALL - wait for any child; id is ignored. P_ALL P_PIDFD - wait for the child identified by the file descriptor id (a process file descriptor created with pidfd_open()). P_PIDFD - wait for the child identified by the file descriptor id (a process file descriptor created with pidfd_open()). P_PIDFD pidfd_open() Availability: Unix, not WASI, not Android, not iOS. Note P_PIDFD is only available on Linux >= 5. 4. P_PIDFD Added in version 3. 3. Added in version 3. 9: The P_PIDFD constant. P_PIDFD This options flag for waitpid(), wait3(), wait4(), and waitid() causes child processes to be reported if they have been continued from a job control stop since they were last reported. waitpid() wait3() wait4() waitid() Availability: Unix, not WASI, not Android, not iOS. This options flag for waitid() causes child processes that have terminated to be reported. waitid() The other wait functions always report children that have terminated, so this option is not available for them. wait* Availability: Unix, not WASI, not Android, not iOS. Added in version 3. 3. This options flag for waitid() causes child processes that have been stopped by the delivery of a signal to be reported. waitid() This option is not available for the other wait functions. wait* Availability: Unix, not WASI, not Android, not iOS. Added in version 3. 3. This options flag for waitpid(), wait3(), and wait4() causes child processes to also be reported if they have been stopped but their current state has not been reported since they were stopped. waitpid() wait3() wait4() This option is not available for waitid().