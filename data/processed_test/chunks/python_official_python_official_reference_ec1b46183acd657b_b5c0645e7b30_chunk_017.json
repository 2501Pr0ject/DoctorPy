{
  "chunk_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_017",
  "original_doc_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30",
  "content": "keyword_pattern+ keyword_pattern ::= NAME \"=\" pattern name_or_attr pattern_arguments positional_patterns keyword_patterns keyword_patterns pattern keyword_pattern pattern The same keyword should not be repeated in class patterns. The following is the logical flow for matching a class pattern against a subject value: If name_or_attr is not an instance of the builtin type , raise TypeError. If name_or_attr is not an instance of the builtin type , raise TypeError. name_or_attr type TypeError If the subject value is not an instance of name_or_attr (tested via isinstance()), the class pattern fails. If the subject value is not an instance of name_or_attr (tested via isinstance()), the class pattern fails. name_or_attr isinstance() If no pattern arguments are present, the pattern succeeds. Otherwise, the subsequent steps depend on whether keyword or positional argument patterns are present. For a number of built-in types (specified below), a single positional subpattern is accepted which will match the entire subject; for these types keyword patterns also work as for other types. If only keyword patterns are present, they are processed as follows, one by one: I. The keyword is looked up as an attribute on the subject. If this raises an exception other than AttributeError, the exception bubbles up. If this raises AttributeError, the class pattern has failed. Else, the subpattern associated with the keyword pattern is matched against the subjectâ€™s attribute value. If this fails, the class pattern fails; if this succeeds, the match proceeds to the next keyword. II. If all keyword patterns succeed, the class pattern succeeds. If any positional patterns are present, they are converted to keyword patterns using the match_args attribute on the class name_or_attr before matching: I. The equivalent of getattr(cls, \"match_args\", ()) is called. If this raises an exception, the exception bubbles up. If the returned value is not a tuple, the conversion fails and TypeError is raised. If there are more positional patterns than len(cls. match_args), TypeError is raised. Otherwise, positional pattern i is converted to a keyword pattern using match_args[i] as the keyword. match_args[i] must be a string; if not TypeError is raised. If there are duplicate keywords, TypeError is raised. See also Customizing positional arguments in class pattern matching II. Once all positional patterns have been converted to keyword patterns,the match proceeds as if there were only keyword patterns.",
  "title": "8. Compound statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 17,
  "start_char": 39337,
  "end_char": 41837,
  "token_count": 476,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_ec1b46183acd657b.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.380838"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_017.txt"
}