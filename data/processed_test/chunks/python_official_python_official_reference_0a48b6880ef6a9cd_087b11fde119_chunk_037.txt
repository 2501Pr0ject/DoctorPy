print("Execution starts when 'next()' is called for the first time. "). try:. while True:. try:. value = (yield value). except Exception as e:. value = e. finally:. print("Don't forget to clean up when 'close()' is called. "). >>> generator = echo(1) >>> print(next(generator)) Execution starts when 'next()' is called for the first time. 1 >>> print(next(generator)) None >>> print(generator. send(2)) 2 >>> generator. throw(TypeError, "spam") TypeError('spam',) >>> generator. close() Don't forget to clean up when 'close()' is called. yield from async def async for for yield_list __anext__() None asend() break aclose() try try finally aclose() finally aclose() sys. set_asyncgen_hooks() asyncio. Loop. shutdown_asyncgens yield from <expr> __anext__() None yield_list StopIteration StopAsyncIteration async for send() asend() StopIteration StopAsyncIteration asend() None type StopIteration StopAsyncIteration GeneratorExit GeneratorExit StopIteration StopAsyncIteration RuntimeError aclose() primary ::= atom | attributeref | subscription | slicing | call atom attributeref subscription slicing call attributeref ::= primary ".