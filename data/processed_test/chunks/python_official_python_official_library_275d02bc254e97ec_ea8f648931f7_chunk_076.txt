Otherwise, if there are no matching children that could be waited for, ChildProcessError is raised. Other options that can be used are WUNTRACED and WCONTINUED. WNOHANG (0, 0) ChildProcessError WUNTRACED WCONTINUED On Windows: Wait for completion of a process given by process handle pid, and return a tuple containing pid, and its exit status shifted left by 8 bits (shifting makes cross-platform use of the function easier). A pid less than or equal to 0 has no special meaning on Windows, and raises an exception. The value of integer options has no effect. pid can refer to any process whose id is known, not necessarily a child process. The spawn functions called with P_NOWAIT return suitable process handles. 0 spawn* P_NOWAIT waitstatus_to_exitcode() can be used to convert the exit status into an exit code. waitstatus_to_exitcode() Availability: Unix, Windows, not WASI, not Android, not iOS. Changed in version 3. 5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an InterruptedError exception (see PEP 475 for the rationale). InterruptedError Similar to waitpid(), except no process id argument is given and a 3-element tuple containing the child’s process id, exit status indication, and resource usage information is returned. Refer to resource. getrusage() for details on resource usage information. The options argument is the same as that provided to waitpid() and wait4(). waitpid() resource. getrusage() waitpid() wait4() waitstatus_to_exitcode() can be used to convert the exit status into an exitcode. waitstatus_to_exitcode() Availability: Unix, not WASI, not Android, not iOS. Similar to waitpid(), except a 3-element tuple, containing the child’s process id, exit status indication, and resource usage information is returned. Refer to resource. getrusage() for details on resource usage information. The arguments to wait4() are the same as those provided to waitpid(). waitpid() resource. getrusage() wait4() waitpid() waitstatus_to_exitcode() can be used to convert the exit status into an exitcode.