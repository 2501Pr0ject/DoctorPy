time() Naive datetime instances are assumed to represent local time and this method relies on the platform C mktime() function to perform the conversion. Since datetime supports wider range of values than mktime() on many platforms, this method may raise OverflowError or OSError for times far in the past or far in the future. datetime mktime() datetime mktime() OverflowError OSError For aware datetime instances, the return value is computed as: datetime (dt - datetime(1970, 1, 1, tzinfo=timezone. utc)). total_seconds() Added in version 3. 3. Changed in version 3. 6: The timestamp() method uses the fold attribute to disambiguate the times during a repeated interval. timestamp() fold Note There is no method to obtain the POSIX timestamp directly from a naive datetime instance representing UTC time. If your application uses this convention and your system time zone is not set to UTC, you can obtain the POSIX timestamp by supplying tzinfo=timezone. utc: datetime tzinfo=timezone. utc timestamp = dt. replace(tzinfo=timezone. utc). timestamp() or by calculating the timestamp directly: timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1) Return the day of the week as an integer, where Monday is 0 and Sunday is 6. The same as self. date(). weekday(). See also isoweekday(). self. date(). weekday() isoweekday() Return the day of the week as an integer, where Monday is 1 and Sunday is 7. The same as self. date(). isoweekday(). See also weekday(), isocalendar(). self. date(). isoweekday() weekday() isocalendar() Return a named tuple with three components: year, week and weekday. The same as self. date(). isocalendar(). year week weekday self. date(). isocalendar() Return a string representing the date and time in ISO 8601 format: YYYY-MM-DDTHH:MM:SS. ffffff, if microsecond is not 0 YYYY-MM-DDTHH:MM:SS. ffffff, if microsecond is not 0 YYYY-MM-DDTHH:MM:SS.