{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_070",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "SPAM: 'spam'> >>> type(Menu['SPAM']) <enum 'Menu'> __class_getitem__() __class_getitem__() __getitem__() x(arg1, arg2,. ) type(x). __call__(x, arg1,. ) object object lists tuples 0 <= k < N slice keys() values() items() get() clear() setdefault() pop() popitem() copy() update() dictionary collections. abc MutableMapping __getitem__() __setitem__() __delitem__() keys() append() count() index() extend() insert() pop() remove() reverse() sort() list __add__() __radd__() __iadd__() __mul__() __rmul__() __imul__() __contains__() in in __iter__() __iter__() len() >= __bool__() __len__() sys. maxsize sys. maxsize len() OverflowError OverflowError __bool__() operator. length_hint() >= NotImplemented __length_hint__ a[1:2] = b a[slice(1, 2, None)] = b None self[key] slice TypeError IndexError KeyError for IndexError __class_getitem__() __getitem__() self[key] __getitem__() __getitem__() self[key] __getitem__() __getitem__() dict __getitem__() self[key] reversed() __reversed__() reversed() __len__() __getitem__() __reversed__() reversed() in not in __contains__() __iter__() __getitem__() + - * @ / // % divmod() pow() ** << >> & ^ | x + y __add__() type(x). __add__(x, y) __divmod__() __floordiv__() __mod__() __truediv__() __pow__() pow() NotImplemented + - * @ / // % divmod() pow() ** << >> & ^ | x - y __rsub__() type(y). __rsub__(y, x) type(x). __sub__(x, y) NotImplemented pow() __rpow__() += -= *= @= /= //= %= **= <<= >>= &= ^= |= NotImplemented __iadd__() x += y x = x. __iadd__(y) __iadd__() x. __iadd__(y) NotImplemented x. __add__(y) y. __radd__(x) x + y - + abs() ~ complex() int() float() operator.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 70,
  "start_char": 147337,
  "end_char": 148956,
  "token_count": 475,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.765779"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_070.txt"
}