{
  "chunk_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_003",
  "original_doc_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7",
  "content": "txt', 'myarchive. zip') background. start() print('The main program continues to run in foreground. ') background. join() # Wait for the background task to finish print('Main program waited until background was done. ') The principal challenge of multi-threaded applications is coordinating threads that share data or other resources. To that end, the threading module provides a number of synchronization primitives including locks, events, condition variables, and semaphores. While those tools are powerful, minor design errors can result in problems that are difficult to reproduce. So, the preferred approach to task coordination is to concentrate all access to a resource in a single thread and then use the queue module to feed that thread with requests from other threads. Applications using Queue objects for inter-thread communication and coordination are easier to design, more readable, and more reliable. queue Queue ## 11. 5. Logging¶ The logging module offers a full featured and flexible logging system. At its simplest, log messages are sent to a file or to sys. stderr: logging sys. stderr import logging logging. debug('Debugging information') logging. info('Informational message') logging. warning('Warning:config file %s not found', 'server. conf') logging. error('Error occurred') logging. critical('Critical error -- shutting down') This produces the following output: WARNING:root:Warning:config file server. conf not found ERROR:root:Error occurred CRITICAL:root:Critical error -- shutting down By default, informational and debugging messages are suppressed and the output is sent to standard error. Other output options include routing messages through email, datagrams, sockets, or to an HTTP Server. New filters can select different routing based on message priority: DEBUG, INFO, WARNING, ERROR, and CRITICAL. DEBUG INFO WARNING ERROR CRITICAL The logging system can be configured directly from Python or can be loaded from a user editable configuration file for customized logging without altering the application. ## 11. 6. Weak References¶ Python does automatic memory management (reference counting for most objects and garbage collection to eliminate cycles). The memory is freed shortly after the last reference to it has been eliminated. This approach works fine for most applications but occasionally there is a need to track objects only as long as they are being used by something else. Unfortunately, just tracking them creates a reference that makes them permanent. The weakref module provides tools for tracking objects without creating a reference.",
  "title": "11. Brief Tour of the Standard Library — Part II.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 3,
  "start_char": 6260,
  "end_char": 8853,
  "token_count": 492,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_df4c6c63651fc819.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.711299"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_003.txt"
}