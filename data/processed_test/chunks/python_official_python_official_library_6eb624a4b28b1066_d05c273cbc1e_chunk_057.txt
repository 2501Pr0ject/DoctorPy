time() OverflowError localtime() OSError localtime() fromtimestamp() OverflowError ValueError localtime() OSError ValueError localtime() ValueError 1 <= ordinal <= date. max. toordinal() d date. fromordinal(d. toordinal()) == d date YYYY-MM YYYY Â±YYYYYY-MM-DD YYYY-OOO >>> from datetime import date >>> date. fromisoformat('2019-12-04') datetime. date(2019, 12, 4) >>> date. fromisoformat('20191204') datetime. date(2019, 12, 4) >>> date. fromisoformat('2021-W01-1') datetime. date(2021, 1, 4) YYYY-MM-DD date date. isocalendar() date(MINYEAR, 1, 1) date(MAXYEAR, 12, 31) timedelta(days=1) MINYEAR MAXYEAR date2 = date1 + timedelta date2 timedelta. days date1 date2 = date1 - timedelta date2 date2 + timedelta == date1 timedelta = date1 - date2 date1 == date2 date1. = date2 date1 < date2 date1 > date2 date1 <= date2 date1 >= date2 timedelta. days > 0 timedelta. days < 0 date2 - date1 == timedelta. days timedelta. seconds timedelta. microseconds OverflowError date2. year MINYEAR MAXYEAR timedelta. seconds timedelta. microseconds timedelta. seconds timedelta. microseconds date2 + timedelta == date1 date date datetime datetime date1 < date2 date1. toordinal() < date2. toordinal() date datetime datetime TypeError datetime date datetime date date date >>> from datetime import date >>> d = date(2002, 12, 31) >>> d. replace(day=26) datetime. date(2002, 12, 26) copy. replace() date time. struct_time time. localtime() d. timetuple() time. struct_time((d. year, d. month, d. day, 0, 0, 0, d. weekday(), yday, -1)) yday = d. toordinal() - date(d. year, 1, 1). toordinal() + 1 date d date. fromordinal(d. toordinal()) == d date(2002, 12, 4).