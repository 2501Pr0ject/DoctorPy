0 Between 0 and 999,999 inclusive. Supported operations: Operation Result t1 = t2 + t3 t1 = t2 + t3 Sum of t2 and t3. Afterwards t1 - t2 == t3 and t1 - t3 == t2 are true. (1) t2 t3 t1 - t2 == t3 t1 - t3 == t2 t1 = t2 - t3 t1 = t2 - t3 Difference of t2 and t3. Afterwards t1 == t2 - t3 and t2 == t1 + t3 are true. (1)(6) t2 t3 t1 == t2 - t3 t2 == t1 + t3 t1 = t2 * i or t1 = i * t2 t1 = t2 * i or t1 = i * t2 Delta multiplied by an integer. Afterwards t1 // i == t2 is true, provided i. = 0. t1 // i == t2 i. = 0 In general, t1 * i == t1 * (i-1) + t1 is true. (1) t1 * i == t1 * (i-1) + t1 t1 = t2 * f or t1 = f * t2 t1 = t2 * f or t1 = f * t2 Delta multiplied by a float. The result is rounded to the nearest multiple of timedelta. resolution using round-half-to-even. f = t2 / t3 f = t2 / t3 Division (3) of overall duration t2 by interval unit t3. Returns a float object. t2 t3 float t1 = t2 / f or t1 = t2 / i t1 = t2 / f or t1 = t2 / i Delta divided by a float or an int. The result is rounded to the nearest multiple of timedelta. resolution using round-half-to-even. t1 = t2 // i or t1 = t2 // t3 t1 = t2 // i t1 = t2 // t3 The floor is computed and the remainder (if any) is thrown away. In the second case, an integer is returned. (3) t1 = t2 % t3 t1 = t2 % t3 The remainder is computed as a timedelta object.