This technique may also be employed at the module level to only alter the behaviour of import statements within that module. __import__() To selectively prevent the import of some modules from a hook early on the meta path (rather than disabling the standard import system entirely), it is sufficient to raise ModuleNotFoundError directly from find_spec() instead of returning None. The latter indicates that the meta path search should continue, while raising an exception terminates it immediately. ModuleNotFoundError find_spec() None ## 5. 7. Package Relative Imports¶ Relative imports use leading dots. A single leading dot indicates a relative import, starting with the current package. Two or more leading dots indicate a relative import to the parent(s) of the current package, one level per dot after the first. For example, given the following package layout: package/ __init__. py subpackage1/ __init__. py moduleX. py moduleY. py subpackage2/ __init__. py moduleZ. py moduleA. py In either subpackage1/moduleX. py or subpackage1/init. py, the following are valid relative imports: subpackage1/moduleX. py subpackage1/__init__. py from. moduleY import spam from. moduleY import spam as ham from. import moduleY from. subpackage1 import moduleY from. subpackage2. moduleZ import eggs from. moduleA import foo Absolute imports may use either the import <> or from <> import <> syntax, but relative imports may only use the second form; the reason for this is that: import <> from <> import <> import XXX. YYY. ZZZ should expose XXX. YYY. ZZZ as a usable expression, but. moduleY is not a valid expression. XXX. YYY. ZZZ ## 5. 8. Special considerations for main¶ The main module is a special case relative to Python’s import system. As noted elsewhere, the main module is directly initialized at interpreter startup, much like sys and builtins. However, unlike those two, it doesn’t strictly qualify as a built-in module. This is because the manner in which main is initialized depends on the flags and other options with which the interpreter is invoked. __main__ __main__ sys builtins __main__ ### 5. 8. 1. main. spec¶ Depending on how main is initialized, main. spec gets set appropriately or to None. __main__ __main__.