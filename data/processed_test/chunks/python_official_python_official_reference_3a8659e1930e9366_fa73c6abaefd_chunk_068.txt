__get__(a, A) x __get__() __set__() __delete__() __get__() __set__() __delete__() __get__() __set__() __get__() __get__() __set__() __delete__() @staticmethod @classmethod property() __dict__ __dict__ __dict__ __dict__ __dict__ AttributeError '__dict__' weak references '__weakref__' __dict__ TypeError "variable-length" built-in type int bytes tuple dictionary inspect. getdoc() help() __class__ TypeError __init_subclass__() __init_subclass__ __init_subclass__ __init_subclass__ class Philosopher: def __init_subclass__(cls, /, default_name, **kwargs): super(). __init_subclass__(**kwargs) cls. default_name = default_name class AustralianPhilosopher(Philosopher, default_name="Bruce"): pass object. __init_subclass__ metaclass __init_subclass__ type(cls) type. __new__() __set_name__() class A: x = C() # Automatically calls: x. __set_name__(A, 'x') __set_name__() __set_name__() class A: pass c = C() A. x = c # The hook is not called c. __set_name__(A, 'x') # Manually invoke the hook type() type(name, bases, namespace) metaclass MyClass MySubclass Meta class Meta(type): pass class MyClass(metaclass=Meta): pass class MySubclass(MyClass): pass type __mro_entries__() __mro_entries__() __mro_entries__() types. resolve_bases() type types. get_original_bases() __mro_entries__() type() type() type() type(cls) TypeError __prepare__ namespace = metaclass. __prepare__(name, bases, **kwds) __prepare__ classmethod __prepare__ __new__ dict __prepare__ __prepare__ exec(body, globals(), namespace) exec() __class__ metaclass(name, bases, namespace, **kwds) __prepare__ super() __class__ __class__ super super() __class__ __classcell__ type. __new__ RuntimeError type type. __new__ type. __new__ __set_name__() __set_name__ __init_subclass__() type. __new__ __dict__ __class__ isinstance() issubclass() abc.