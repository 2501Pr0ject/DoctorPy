Dictionary displays¶ A dictionary display is a possibly empty series of dict items (key/value pairs) enclosed in curly braces: dict_display ::= "{" [dict_item_list | dict_comprehension] "}" dict_item_list ::= dict_item ("," dict_item)* [","] dict_item ::= expression ":" expression | "**" or_expr dict_comprehension ::= expression ":" expression comp_for dict_item_list dict_comprehension dict_item dict_item expression expression or_expr expression expression comp_for A dictionary display yields a new dictionary object. If a comma-separated sequence of dict items is given, they are evaluated from left to right to define the entries of the dictionary: each key object is used as a key into the dictionary to store the corresponding value. This means that you can specify the same key multiple times in the dict item list, and the final dictionary’s value for that key will be the last one given. A double asterisk ** denotes dictionary unpacking. Its operand must be a mapping. Each mapping item is added to the new dictionary. Later values replace values already set by earlier dict items and earlier dictionary unpackings. ** Added in version 3. 5: Unpacking into dictionary displays, originally proposed by PEP 448. A dict comprehension, in contrast to list and set comprehensions, needs two expressions separated with a colon followed by the usual “for” and “if” clauses. When the comprehension is run, the resulting key and value elements are inserted in the new dictionary in the order they are produced. Restrictions on the types of the key values are listed earlier in section The standard type hierarchy. (To summarize, the key type should be hashable, which excludes all mutable objects. ) Clashes between duplicate keys are not detected; the last value (textually rightmost in the display) stored for a given key value prevails. Changed in version 3. 8: Prior to Python 3. 8, in dict comprehensions, the evaluation order of key and value was not well-defined. In CPython, the value was evaluated before the key. Starting with 3. 8, the key is evaluated before the value, as proposed by PEP 572. ### 6. 2. 8. Generator expressions¶ A generator expression is a compact generator notation in parentheses: generator_expression ::= "(" expression comp_for ")" expression comp_for A generator expression yields a new generator object.