{
  "chunk_id": "python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6_chunk_005",
  "original_doc_id": "python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6",
  "content": "Traceback (most recent call last): File \"<stdin>\", line 2, in <module> func() ~~~~^^ File \"<stdin>\", line 2, in func ConnectionError The above exception was the direct cause of the following exception: Traceback (most recent call last): File \"<stdin>\", line 4, in <module> raise RuntimeError('Failed to open database') from exc RuntimeError: Failed to open database It also allows disabling automatic exception chaining using the from None idiom: from None >>> try:. open('database. sqlite'). except OSError:. raise RuntimeError from None. Traceback (most recent call last): File \"<stdin>\", line 4, in <module> raise RuntimeError from None RuntimeError For more information about chaining mechanics, see Built-in Exceptions. ## 8. 6. User-defined Exceptions¶ Programs may name their own exceptions by creating a new exception class (see Classes for more about Python classes). Exceptions should typically be derived from the Exception class, either directly or indirectly. Exception Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception. Most exceptions are defined with names that end in “Error”, similar to the naming of the standard exceptions. Many standard modules define their own exceptions to report errors that may occur in functions they define. ## 8. 7. Defining Clean-up Actions¶ The try statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances. For example: try >>> try:. raise KeyboardInterrupt. finally:. print('Goodbye, world. '). Goodbye, world. Traceback (most recent call last): File \"<stdin>\", line 2, in <module> raise KeyboardInterrupt KeyboardInterrupt If a finally clause is present, the finally clause will execute as the last task before the try statement completes. The finally clause runs whether or not the try statement produces an exception. The following points discuss more complex cases when an exception occurs: finally finally try finally try If an exception occurs during execution of the try clause, the exception may be handled by an except clause. If the exception is not handled by an except clause, the exception is re-raised after the finally clause has been executed. If an exception occurs during execution of the try clause, the exception may be handled by an except clause.",
  "title": "8. Errors and Exceptions.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 5,
  "start_char": 11169,
  "end_char": 13639,
  "token_count": 489,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_7969fd9e5d06ff1d.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:33.778295"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6_chunk_005.txt"
}