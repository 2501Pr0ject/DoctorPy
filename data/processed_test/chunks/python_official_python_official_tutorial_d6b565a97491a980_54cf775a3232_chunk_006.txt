>>> squares = [1, 4, 9, 16, 25] >>> squares [1, 4, 9, 16, 25] Like strings (and all other built-in sequence types), lists can be indexed and sliced: >>> squares[0] # indexing returns the item 1 >>> squares[-1] 25 >>> squares[-3:] # slicing returns a new list [9, 16, 25] Lists also support operations like concatenation: >>> squares + [36, 49, 64, 81, 100] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] Unlike strings, which are immutable, lists are a mutable type, i. e. it is possible to change their content: >>> cubes = [1, 8, 27, 65, 125] # something's wrong here >>> 4 ** 3 # the cube of 4 is 64, not 65. 64 >>> cubes[3] = 64 # replace the wrong value >>> cubes [1, 8, 27, 64, 125] You can also add new items at the end of the list, by using the list. append() method (we will see more about methods later): list. append() >>> cubes. append(216) # add the cube of 6 >>> cubes. append(7 ** 3) # and the cube of 7 >>> cubes [1, 8, 27, 64, 125, 216, 343] Simple assignment in Python never copies data. When you assign a list to a variable, the variable refers to the existing list. Any changes you make to the list through one variable will be seen through all other variables that refer to it. : >>> rgb = ["Red", "Green", "Blue"] >>> rgba = rgb >>> id(rgb) == id(rgba) # they reference the same object True >>> rgba. append("Alph") >>> rgb ["Red", "Green", "Blue", "Alph"] All slice operations return a new list containing the requested elements.