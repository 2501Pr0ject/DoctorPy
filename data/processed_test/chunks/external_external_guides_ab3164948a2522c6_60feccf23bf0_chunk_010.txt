style The following message format string will log the time in a human-readable format, the severity of the message, and the contents of the message, in that order: '%(asctime)s - %(levelname)s - %(message)s' Formatters use a user-configurable function to convert the creation time of a record to a tuple. By default, time. localtime() is used; to change this for a particular formatter instance, set the converter attribute of the instance to a function with the same signature as time. localtime() or time. gmtime(). To change it for all formatters, for example if you want all logging times to be shown in GMT, set the converter attribute in the Formatter class (to time. gmtime for GMT display). time. localtime() converter time. localtime() time. gmtime() converter time. gmtime ### Configuring LoggingÂ¶ Programmers can configure logging in three ways: Creating loggers, handlers, and formatters explicitly using Python code that calls the configuration methods listed above. Creating loggers, handlers, and formatters explicitly using Python code that calls the configuration methods listed above. Creating a logging config file and reading it using the fileConfig() function. Creating a logging config file and reading it using the fileConfig() function. fileConfig() Creating a dictionary of configuration information and passing it to the dictConfig() function. Creating a dictionary of configuration information and passing it to the dictConfig() function. dictConfig() For the reference documentation on the last two options, see Configuration functions. The following example configures a very simple logger, a console handler, and a simple formatter using Python code: import logging # create logger logger = logging. getLogger('simple_example') logger. setLevel(logging. DEBUG) # create console handler and set level to debug ch = logging. StreamHandler() ch. setLevel(logging. DEBUG) # create formatter formatter = logging. Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') # add formatter to ch ch. setFormatter(formatter) # add ch to logger logger. addHandler(ch) # 'application' code logger. debug('debug message') logger. info('info message') logger. warning('warn message') logger. error('error message') logger. critical('critical message') Running this module from the command line produces the following output: $ python simple_logging_module.