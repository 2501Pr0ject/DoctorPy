{
  "chunk_id": "python_official_python_official_library_482e94da82fc8f58_4a9e7712fa00_chunk_001",
  "original_doc_id": "python_official_python_official_library_482e94da82fc8f58_4a9e7712fa00",
  "content": "from None __cause__ __cause__ __suppress_context__ True raise new_exc from None KeyError AttributeError __context__ The default traceback display code shows these chained exceptions in addition to the traceback for the exception itself. An explicitly chained exception in cause is always shown when present. An implicitly chained exception in context is shown only if cause is None and suppress_context is false. __cause__ __context__ __cause__ None __suppress_context__ In either case, the exception itself is always shown after any chained exceptions so that the final line of the traceback always shows the last exception that was raised. ## Inheriting from built-in exceptions¶ User code can create subclasses that inherit from an exception type. It’s recommended to only subclass one exception type at a time to avoid any possible conflicts between how the bases handle the args attribute, as well as due to possible memory layout incompatibilities. args CPython implementation detail: Most built-in exceptions are implemented in C for efficiency, see: Objects/exceptions. c. Some have custom memory layouts which makes it impossible to create a subclass that inherits from multiple exception types. The memory layout of a type is an implementation detail and might change between Python versions, leading to new conflicts in the future. Therefore, it’s recommended to avoid subclassing multiple exception types altogether. ## Base classes¶ The following exceptions are used mostly as base classes for other exceptions. The base class for all built-in exceptions. It is not meant to be directly inherited by user-defined classes (for that, use Exception). If str() is called on an instance of this class, the representation of the argument(s) to the instance are returned, or the empty string when there were no arguments. Exception str() The tuple of arguments given to the exception constructor. Some built-in exceptions (like OSError) expect a certain number of arguments and assign a special meaning to the elements of this tuple, while others are usually called only with a single string giving an error message. OSError This method sets tb as the new traceback for the exception and returns the exception object. It was more commonly used before the exception chaining features of PEP 3134 became available. The following example shows how we can convert an instance of SomeException into an instance of OtherException while preserving the traceback. Once raised, the current frame is pushed onto the traceback of the OtherException, as would have happened to the traceback of the original SomeException had we allowed it to propagate to the caller.",
  "title": "Built-in Exceptions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 1,
  "start_char": 2524,
  "end_char": 5184,
  "token_count": 494,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_482e94da82fc8f58.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:34.386521"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_482e94da82fc8f58_4a9e7712fa00_chunk_001.txt"
}