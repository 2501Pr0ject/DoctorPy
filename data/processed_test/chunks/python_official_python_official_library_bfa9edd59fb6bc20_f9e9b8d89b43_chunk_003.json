{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_003",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "'j' 'J' Python fully supports mixed arithmetic: when a binary arithmetic operator has operands of different numeric types, the operand with the “narrower” type is widened to that of the other, where integer is narrower than floating point, which is narrower than complex. A comparison between numbers of different types behaves as though the exact values of those numbers were being compared. [2] The constructors int(), float(), and complex() can be used to produce numbers of a specific type. int() float() complex() All numeric types (except complex) support the following operations (for priorities of the operations, see Operator precedence): Operation Result Notes Full documentation x + y x + y sum of x and y x - y x - y difference of x and y x * y x * y product of x and y x / y x / y quotient of x and y x // y x // y floored quotient of x and y (1)(2) x % y x % y remainder of x / y x / y (2) -x -x x negated +x +x x unchanged abs(x) abs(x) absolute value or magnitude of x abs() abs() int(x) int(x) x converted to integer (3)(6) int() int() float(x) float(x) x converted to floating point (4)(6) float() float() complex(re, im) complex(re, im) a complex number with real part re, imaginary part im. im defaults to zero. (6) complex() complex() c. conjugate() c. conjugate() conjugate of the complex number c divmod(x, y) divmod(x, y) the pair (x // y, x % y) (x // y, x % y) (2) divmod() divmod() pow(x, y) pow(x, y) x to the power y (5) pow() pow() x ** y x ** y x to the power y (5) Notes: Also referred to as integer division. For operands of type int, the result has type int. For operands of type float, the result has type float. In general, the result is a whole integer, though the result’s type is not necessarily int.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 3,
  "start_char": 6097,
  "end_char": 7836,
  "token_count": 460,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.182113"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_003.txt"
}