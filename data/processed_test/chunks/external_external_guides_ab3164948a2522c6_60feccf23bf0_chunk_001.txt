WARNING WARNING An indication that something unexpected happened, or indicative of some problem in the near future (e. g. ‘disk space low’). The software is still working as expected. ERROR ERROR Due to a more serious problem, the software has not been able to perform some function. CRITICAL CRITICAL A serious error, indicating that the program itself may be unable to continue running. The default level is WARNING, which means that only events of this severity and higher will be tracked, unless the logging package is configured to do otherwise. WARNING Events that are tracked can be handled in different ways. The simplest way of handling tracked events is to print them to the console. Another common way is to write them to a disk file. ### A simple example¶ A very simple example is: import logging logging. warning('Watch out. ') # will print a message to the console logging. info('I told you so') # will not print anything If you type these lines into a script and run it, you’ll see: WARNING:root:Watch out. printed out on the console. The INFO message doesn’t appear because the default level is WARNING. The printed message includes the indication of the level and the description of the event provided in the logging call, i. e. ‘Watch out. ’. The actual output can be formatted quite flexibly if you need that; formatting options will also be explained later. INFO WARNING Notice that in this example, we use functions directly on the logging module, like logging. debug, rather than creating a logger and calling functions on it. These functions operation on the root logger, but can be useful as they will call basicConfig() for you if it has not been called yet, like in this example. In larger programs you’ll usually want to control the logging configuration explicitly however - so for that reason as well as others, it’s better to create loggers and call their methods. logging logging. debug basicConfig() ### Logging to a file¶ A very common situation is that of recording logging events in a file, so let’s look at that next. Be sure to try the following in a newly started Python interpreter, and don’t just continue from the session described above: import logging logger = logging. getLogger(__name__) logging. basicConfig(filename='example. log', encoding='utf-8', level=logging. DEBUG) logger. debug('This message should go to the log file') logger. info('So should this') logger.