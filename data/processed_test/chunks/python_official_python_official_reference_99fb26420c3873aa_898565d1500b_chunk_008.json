{
  "chunk_id": "python_official_python_official_reference_99fb26420c3873aa_898565d1500b_chunk_008",
  "original_doc_id": "python_official_python_official_reference_99fb26420c3873aa_898565d1500b",
  "content": "They can also be enclosed in matching groups of three single or double quotes (these are generally referred to as triple-quoted strings). The backslash () character is used to give special meaning to otherwise ordinary characters like n, which means ‘newline’ when escaped (\\n). It can also be used to escape characters that otherwise have a special meaning, such as newline, backslash itself, or the quote character. See escape sequences below for examples. ' \" \\ n \\n Bytes literals are always prefixed with 'b' or 'B'; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes. 'b' 'B' bytes str Both string and bytes literals may optionally be prefixed with a letter 'r' or 'R'; such constructs are called raw string literals and raw bytes literals respectively and treat backslashes as literal characters. As a result, in raw string literals, '\\U' and '\\u' escapes are not treated specially. 'r' 'R' '\\U' '\\u' Added in version 3. 3: The 'rb' prefix of raw bytes literals has been added as a synonym of 'br'. 'rb' 'br' Support for the unicode legacy literal (u'value') was reintroduced to simplify the maintenance of dual Python 2. x and 3. x codebases. See PEP 414 for more information. u'value' A string literal with 'f' or 'F' in its prefix is a formatted string literal; see f-strings. The 'f' may be combined with 'r', but not with 'b' or 'u', therefore raw formatted strings are possible, but formatted bytes literals are not. 'f' 'F' 'f' 'r' 'b' 'u' In triple-quoted literals, unescaped newlines and quotes are allowed (and are retained), except that three unescaped quotes in a row terminate the literal. (A “quote” is the character used to open the literal, i. e. either ' or \". ) ' \" #### 2. 4. 1. 1. Escape sequences¶ Unless an 'r' or 'R' prefix is present, escape sequences in string and bytes literals are interpreted according to rules similar to those used by Standard C.",
  "title": "2. Lexical analysis.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 8,
  "start_char": 16052,
  "end_char": 18068,
  "token_count": 488,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_99fb26420c3873aa.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:25.398266"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_99fb26420c3873aa_898565d1500b_chunk_008.txt"
}