Data descriptors with get() and set() (and/or delete()) defined always override a redefinition in an instance dictionary. In contrast, non-data descriptors can be overridden by instances. __get__() __set__() __delete__() __get__() __set__() __delete__() __get__() __set__() __get__() __get__() __set__() __delete__() Python methods (including those decorated with @staticmethod and @classmethod) are implemented as non-data descriptors. Accordingly, instances can redefine and override methods. This allows individual instances to acquire behaviors that differ from other instances of the same class. @staticmethod @classmethod The property() function is implemented as a data descriptor. Accordingly, instances cannot override the behavior of a property. property() #### 3. 3. 2. 4. slotsÂ¶ slots allow us to explicitly declare data members (like properties) and deny the creation of dict and weakref (unless explicitly declared in slots or available in a parent. ) __dict__ The space saved over using dict can be significant. Attribute lookup speed can be significantly improved as well. __dict__ This class variable can be assigned a string, iterable, or sequence of strings with variable names used by instances. slots reserves space for the declared variables and prevents the automatic creation of dict and weakref for each instance. __dict__ Notes on using slots: When inheriting from a class without slots, the dict and weakref attribute of the instances will always be accessible. When inheriting from a class without slots, the dict and weakref attribute of the instances will always be accessible. __dict__ Without a dict variable, instances cannot be assigned new variables not listed in the slots definition. Attempts to assign to an unlisted variable name raises AttributeError. If dynamic assignment of new variables is desired, then add 'dict' to the sequence of strings in the slots declaration. Without a dict variable, instances cannot be assigned new variables not listed in the slots definition. Attempts to assign to an unlisted variable name raises AttributeError. If dynamic assignment of new variables is desired, then add 'dict' to the sequence of strings in the slots declaration. __dict__ AttributeError '__dict__' Without a weakref variable for each instance, classes defining slots do not support weak references to its instances. If weak reference support is needed, then add 'weakref' to the sequence of strings in the slots declaration.