{
  "chunk_id": "python_official_python_official_library_96003c24587351a2_74918d6d2a40_chunk_030",
  "original_doc_id": "python_official_python_official_library_96003c24587351a2_74918d6d2a40",
  "content": "A class can control what this function returns for its instances by defining a repr() method. If sys. displayhook() is not accessible, this function will raise RuntimeError. eval() __repr__() sys. displayhook() RuntimeError This class has a custom representation that can be evaluated: class Person: def __init__(self, name, age): self. name = name self. age = age def __repr__(self): return f\"Person('{self. name}', {self. age})\" Return a reverse iterator. seq must be an object which has a reversed() method or supports the sequence protocol (the len() method and the getitem() method with integer arguments starting at 0). __reversed__() __len__() __getitem__() 0 Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None, it returns the nearest integer to its input. None For the built-in types supporting round(), values are rounded to the closest multiple of 10 to the power minus ndigits; if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0. 5) and round(-0. 5) are 0, and round(1. 5) is 2). Any integer value is valid for ndigits (positive, zero, or negative). The return value is an integer if ndigits is omitted or None. Otherwise, the return value has the same type as number. round() round(0. 5) round(-0. 5) 0 round(1. 5) 2 None For a general Python object number, round delegates to number. round. number round number. __round__ Note The behavior of round() for floats can be surprising: for example, round(2. 675, 2) gives 2. 67 instead of the expected 2. 68. This is not a bug: it’s a result of the fact that most decimal fractions can’t be represented exactly as a float. See Floating-Point Arithmetic: Issues and Limitations for more information. round() round(2. 675, 2) 2. 67 2. 68 Return a new set object, optionally with elements taken from iterable. set is a built-in class. See set and Set Types — set, frozenset for documentation about this class.",
  "title": "Built-in Functions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 30,
  "start_char": 64187,
  "end_char": 66157,
  "token_count": 491,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_96003c24587351a2.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:31.021259"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_96003c24587351a2_74918d6d2a40_chunk_030.txt"
}