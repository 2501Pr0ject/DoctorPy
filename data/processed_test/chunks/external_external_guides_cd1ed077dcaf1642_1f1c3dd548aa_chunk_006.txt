), or how to handle an aspect of URL opening, for example HTTP redirections or HTTP cookies. urllib. request. OpenerDirector urlopen You will want to create openers if you want to fetch URLs with specific handlers installed, for example to get an opener that handles cookies, or to get an opener that does not handle redirections. To create an opener, instantiate an OpenerDirector, and then call. add_handler(some_handler_instance) repeatedly. OpenerDirector. add_handler(some_handler_instance) Alternatively, you can use build_opener, which is a convenience function for creating opener objects with a single function call. build_opener adds several handlers by default, but provides a quick way to add more and/or override the default handlers. build_opener build_opener Other sorts of handlers you might want to can handle proxies, authentication, and other common but slightly specialised situations. install_opener can be used to make an opener object the (global) default opener. This means that calls to urlopen will use the opener you have installed. install_opener opener urlopen Opener objects have an open method, which can be called directly to fetch urls in the same way as the urlopen function: there’s no need to call install_opener, except as a convenience. open urlopen install_opener ## Basic Authentication¶ To illustrate creating and installing a handler we will use the HTTPBasicAuthHandler. For a more detailed discussion of this subject – including an explanation of how Basic Authentication works - see the Basic Authentication Tutorial. HTTPBasicAuthHandler When authentication is required, the server sends a header (as well as the 401 error code) requesting authentication. This specifies the authentication scheme and a ‘realm’. The header looks like: WWW-Authenticate: SCHEME realm="REALM". WWW-Authenticate: SCHEME realm="REALM" e. g. WWW-Authenticate: Basic realm="cPanel Users" The client should then retry the request with the appropriate name and password for the realm included as a header in the request. This is ‘basic authentication’. In order to simplify this process we can create an instance of HTTPBasicAuthHandler and an opener to use this handler. HTTPBasicAuthHandler The HTTPBasicAuthHandler uses an object called a password manager to handle the mapping of URLs and realms to passwords and usernames. If you know what the realm is (from the authentication header sent by the server), then you can use a HTTPPasswordMgr.