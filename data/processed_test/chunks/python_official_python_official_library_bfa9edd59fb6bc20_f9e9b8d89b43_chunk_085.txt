append() If you access a method (a function defined in a class namespace) through an instance, you get a special object: a bound method (also called instance method) object. When called, it will add the self argument to the argument list. Bound methods have two special read-only attributes: m. self is the object on which the method operates, and m. func is the function implementing the method. Calling m(arg-1, arg-2,. , arg-n) is completely equivalent to calling m. func(m. self, arg-1, arg-2,. , arg-n). self m. __self__ m. __func__ m(arg-1, arg-2,. , arg-n) m. __func__(m. __self__, arg-1, arg-2,. , arg-n) Like function objects, bound method objects support getting arbitrary attributes. However, since method attributes are actually stored on the underlying function object (method. func), setting method attributes on bound methods is disallowed. Attempting to set an attribute on a method results in an AttributeError being raised. In order to set a method attribute, you need to explicitly set it on the underlying function object: method. __func__ AttributeError >>> class C:. def method(self):. pass. >>> c = C() >>> c. method. whoami = 'my name is method' # can't set on the method Traceback (most recent call last): File "<stdin>", line 1, in <module> AttributeError: 'method' object has no attribute 'whoami' >>> c. method. __func__. whoami = 'my name is method' >>> c. method. whoami 'my name is method' See Instance methods for more information. ### Code Objects¶ Code objects are used by the implementation to represent “pseudo-compiled” executable Python code such as a function body. They differ from function objects because they don’t contain a reference to their global execution environment. Code objects are returned by the built-in compile() function and can be extracted from function objects through their code attribute. See also the code module. compile() __code__ code Accessing code raises an auditing event object. getattr with arguments obj and "code". __code__ object. __getattr__ obj "__code__" A code object can be executed or evaluated by passing it (instead of a source string) to the exec() or eval() built-in functions.