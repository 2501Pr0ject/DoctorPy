{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_019",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "See Code Objects Bit Flags for details on the semantics of each flags that might be present. co_flags 0x04 *arguments 0x08 **keywords 0x20 Future feature declarations (for example, from future import division) also use bits in co_flags to indicate whether a code object was compiled with a particular feature enabled. See compiler_flag. from __future__ import division co_flags compiler_flag Other bits in co_flags are reserved for internal use. co_flags If a code object represents a function, the first item in co_consts is the documentation string of the function, or None if undefined. co_consts None ##### 3. 2. 13. 1. 2. Methods on code objects¶ Returns an iterable over the source code positions of each bytecode instruction in the code object. The iterator returns tuples containing the (start_line, end_line, start_column, end_column). The i-th tuple corresponds to the position of the source code that compiled to the i-th code unit. Column information is 0-indexed utf-8 byte offsets on the given source line. tuple (start_line, end_line, start_column, end_column) This positional information can be missing. A non-exhaustive lists of cases where this may happen: Running the interpreter with -X no_debug_ranges. Running the interpreter with -X no_debug_ranges. -X no_debug_ranges Loading a pyc file compiled while using -X no_debug_ranges. Loading a pyc file compiled while using -X no_debug_ranges. -X no_debug_ranges Position tuples corresponding to artificial instructions. Position tuples corresponding to artificial instructions. Line and column numbers that can’t be represented due to implementation specific limitations. Line and column numbers that can’t be represented due to implementation specific limitations. When this occurs, some or all of the tuple elements can be None. None Added in version 3. 11. Note This feature requires storing column positions in code objects which may result in a small increase of disk usage of compiled Python files or interpreter memory usage. To avoid storing the extra information and/or deactivate printing the extra traceback information, the -X no_debug_ranges command line flag or the PYTHONNODEBUGRANGES environment variable can be used. -X no_debug_ranges PYTHONNODEBUGRANGES Returns an iterator that yields information about successive ranges of bytecodes.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 19,
  "start_char": 43488,
  "end_char": 45811,
  "token_count": 471,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.711013"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_019.txt"
}