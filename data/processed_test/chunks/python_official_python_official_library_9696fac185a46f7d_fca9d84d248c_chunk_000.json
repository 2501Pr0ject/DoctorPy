{
  "chunk_id": "python_official_python_official_library_9696fac185a46f7d_fca9d84d248c_chunk_000",
  "original_doc_id": "python_official_python_official_library_9696fac185a46f7d_fca9d84d248c",
  "content": "itertools — Functions creating iterators for efficient looping. 13. 5 Source:  itertools — Functions creating iterators for efficient looping¶ itertools This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. Each has been recast in a form suitable for Python. The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python. For instance, SML provides a tabulation tool: tabulate(f) which produces a sequence f(0), f(1),. The same effect can be achieved in Python by combining map() and count() to form map(f, count()). tabulate(f) f(0), f(1),. map() count() map(f, count()) Infinite iterators: Iterator Arguments Results Example count() count() [start[, step]] start, start+step, start+2step, … count(10) → 10 11 12 13 14. count(10) → 10 11 12 13 14. cycle() cycle() p p0, p1, … plast, p0, p1, … cycle('ABCD') → A B C D A B C D. cycle('ABCD') → A B C D A B C D.",
  "title": "itertools — Functions creating iterators for efficient looping.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 0,
  "start_char": 0,
  "end_char": 1104,
  "token_count": 291,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_9696fac185a46f7d.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:02.092086"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_9696fac185a46f7d_fca9d84d248c_chunk_000.txt"
}