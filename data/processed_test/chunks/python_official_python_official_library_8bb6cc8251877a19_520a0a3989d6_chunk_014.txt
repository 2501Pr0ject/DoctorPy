>>> from typing import Union >>> @fun. register. def _(arg: Union[list, set], verbose=False):. if verbose:. print("Enumerate this:"). for i, elem in enumerate(arg):. print(i, elem). >>> @fun. register(complex). def _(arg, verbose=False):. if verbose:. print("Better than complicated. ", end=" "). print(arg. real, arg. imag). list list[int] >>> @fun. register(list). def _(arg: list[int], verbose=False):. if verbose:. print("Enumerate this:"). for i, elem in enumerate(arg):. print(i, elem) [1,2,3] ["foo", "bar", "baz"] register() >>> def nothing(arg, verbose=False):. print("Nothing. "). >>> fun. register(type(None), nothing) register() pickling >>> @fun. register(float). @fun. register(Decimal). def fun_num(arg, verbose=False):. if verbose:. print("Half of your number:", end=" "). print(arg / 2). >>> fun_num is fun False >>> fun("Hello, world. ") Hello, world. >>> fun("test. ", verbose=True) Let me just say, test. >>> fun(42, verbose=True) Strength in numbers, eh. 42 >>> fun(['spam', 'spam', 'eggs', 'spam'], verbose=True) Enumerate this: 0 spam 1 spam 2 eggs 3 spam >>> fun(None) Nothing. >>> fun(1. 23) 0. 615 @singledispatch object >>> from collections. abc import Mapping >>> @fun. register. def _(arg: Mapping, verbose=False):. if verbose:. print("Keys & Values"). for key, value in arg. items():. print(key, "=>", value). >>> fun({"a": "b"}) a => b dispatch() >>> fun. dispatch(float) <function fun_num at 0x1035a2840> >>> fun. dispatch(dict) # note: default implementation <function fun at 0x103fe0000> registry >>> fun. registry. keys() dict_keys([<class 'NoneType'>, <class 'int'>, <class 'object'>, <class 'decimal. Decimal'>, <class 'list'>, <class 'float'>]) >>> fun.