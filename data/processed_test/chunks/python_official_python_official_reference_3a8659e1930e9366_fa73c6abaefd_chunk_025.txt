]) Because new() and init() work together in constructing objects (new() to create it, and init() to customize it), no non-None value may be returned by init(); doing so will cause a TypeError to be raised at runtime. __new__() __init__() __new__() __init__() None __init__() TypeError Called when the instance is about to be destroyed. This is also called a finalizer or (improperly) a destructor. If a base class has a del() method, the derived class’s del() method, if any, must explicitly call it to ensure proper deletion of the base class part of the instance. __del__() __del__() It is possible (though not recommended. ) for the del() method to postpone destruction of the instance by creating a new reference to it. This is called object resurrection. It is implementation-dependent whether del() is called a second time when a resurrected object is about to be destroyed; the current CPython implementation only calls it once. __del__() __del__() It is not guaranteed that del() methods are called for objects that still exist when the interpreter exits. weakref. finalize provides a straightforward way to register a cleanup function to be called when an object is garbage collected. __del__() weakref. finalize Note del x doesn’t directly call x. del() — the former decrements the reference count for x by one, and the latter is only called when x’s reference count reaches zero. del x x. __del__() x x CPython implementation detail: It is possible for a reference cycle to prevent the reference count of an object from going to zero. In this case, the cycle will be later detected and deleted by the cyclic garbage collector. A common cause of reference cycles is when an exception has been caught in a local variable. The frame’s locals then reference the exception, which references its own traceback, which references the locals of all frames caught in the traceback. See also Documentation for the gc module. gc Warning Due to the precarious circumstances under which del() methods are invoked, exceptions that occur during their execution are ignored, and a warning is printed to sys. stderr instead. In particular: __del__() sys. stderr del() can be invoked when arbitrary code is being executed, including from any arbitrary thread. If del() needs to take a lock or invoke any other blocking resource, it may deadlock as the resource may already be taken by the code that gets interrupted to execute del().