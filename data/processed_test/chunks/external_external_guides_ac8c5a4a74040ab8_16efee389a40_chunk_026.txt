VERBOSE flag when compiling the regular expression can be helpful, because it allows you to format the regular expression more clearly. re. VERBOSE The re. VERBOSE flag has several effects. Whitespace in the regular expression that isn’t inside a character class is ignored. This means that an expression such as dog | cat is equivalent to the less readable dog|cat, but [a b] will still match the characters 'a', 'b', or a space. In addition, you can also put comments inside a RE; comments extend from a # character to the next newline. When used with triple-quoted strings, this enables REs to be formatted more neatly: re. VERBOSE dog | cat dog|cat [a b] 'a' 'b' # pat = re. compile(r""" \s* # Skip leading whitespace (. P<header>[^:]+) # Header name \s* : # Whitespace, and a colon (. P<value>. *. ) # The header's value -- *. used to # lose the following trailing whitespace \s*$ # Trailing whitespace to end-of-line """, re. VERBOSE) This is far more readable than: pat = re. compile(r"\s*(. P<header>[^:]+)\s*:(. P<value>. *. )\s*$") ## Feedback¶ Regular expressions are a complicated topic. Did this document help you understand them. Were there parts that were unclear, or Problems you encountered that weren’t covered here. If so, please send suggestions for improvements to the author. The most complete book on regular expressions is almost certainly Jeffrey Friedl’s Mastering Regular Expressions, published by O’Reilly. Unfortunately, it exclusively concentrates on Perl and Java’s flavours of regular expressions, and doesn’t contain any Python material at all, so it won’t be useful as a reference for programming in Python. (The first edition covered Python’s now-removed regex module, which won’t help you much. ) Consider checking it out from your library. regex ### Table of Contents Regular Expression HOWTO Introduction Simple Patterns Matching Characters Repeating Things Using Regular Expressions Compiling Regular Expressions The Backslash Plague Performing Matches Module-Level Functions Compilation Flags More Pattern Power More Metacharacters Grouping Non-capturing and Named Groups Lookahead Assertions Modifying Strings Splitting Strings Search and Replace Common Problems Use String Methods match() versus search() Greedy versus Non-Greedy Using re.