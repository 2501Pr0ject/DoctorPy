{
  "chunk_id": "python_official_python_official_library_275d02bc254e97ec_ea8f648931f7_chunk_001",
  "original_doc_id": "python_official_python_official_library_275d02bc254e97ec_ea8f648931f7",
  "content": "WebAssembly platforms also lack support for signals (e. g. kill(), wait()). On WebAssembly platforms, Android and iOS, large parts of the os module are not available or behave differently. APIs related to processes (e. g. fork(), execve()) and resources (e. g. nice()) are not available. Others like getuid() and getpid() are emulated or stubs. WebAssembly platforms also lack support for signals (e. g. kill(), wait()). os fork() execve() nice() getuid() getpid() kill() wait() Note All functions in this module raise OSError (or subclasses thereof) in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system. OSError An alias for the built-in OSError exception. OSError The name of the operating system dependent module imported. The following names have currently been registered: 'posix', 'nt', 'java'. 'posix' 'nt' 'java' See also sys. platform has a finer granularity. os. uname() gives system-dependent version information. sys. platform os. uname() The platform module provides detailed checks for the system’s identity. platform ## File Names, Command Line Arguments, and Environment Variables¶ In Python, file names, command line arguments, and environment variables are represented using the string type. On some systems, decoding these strings to and from bytes is necessary before passing them to the operating system. Python uses the filesystem encoding and error handler to perform this conversion (see sys. getfilesystemencoding()). sys. getfilesystemencoding() The filesystem encoding and error handler are configured at Python startup by the PyConfig_Read() function: see filesystem_encoding and filesystem_errors members of PyConfig. PyConfig_Read() filesystem_encoding filesystem_errors PyConfig Changed in version 3. 1: On some systems, conversion using the file system encoding may fail. In this case, Python uses the surrogateescape encoding error handler, which means that undecodable bytes are replaced by a Unicode character U+DCxx on decoding, and these are again translated to the original byte on encoding. The file system encoding must guarantee to successfully decode all bytes below 128. If the file system encoding fails to provide this guarantee, API functions can raise UnicodeError. UnicodeError See also the locale encoding. ## Python UTF-8 Mode¶ Added in version 3. 7: See PEP 540 for more details.",
  "title": "os — Miscellaneous operating system interfaces.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 1,
  "start_char": 2355,
  "end_char": 4785,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_275d02bc254e97ec.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:24.772463"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_275d02bc254e97ec_ea8f648931f7_chunk_001.txt"
}