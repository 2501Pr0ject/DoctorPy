The same exceptions should be raised for improper key values as for the getitem() method. self[key] __getitem__() __getitem__() Called to implement deletion of self[key]. Same note as for getitem(). This should only be implemented for mappings if the objects support removal of keys, or for sequences if elements can be removed from the sequence. The same exceptions should be raised for improper key values as for the getitem() method. self[key] __getitem__() __getitem__() Called by dict. getitem() to implement self[key] for dict subclasses when key is not in the dictionary. dict __getitem__() self[key] This method is called when an iterator is required for a container. This method should return a new iterator object that can iterate over all the objects in the container. For mappings, it should iterate over the keys of the container. Called (if present) by the reversed() built-in to implement reverse iteration. It should return a new iterator object that iterates over all the objects in the container in reverse order. reversed() If the reversed() method is not provided, the reversed() built-in will fall back to using the sequence protocol (len() and getitem()). Objects that support the sequence protocol should only provide reversed() if they can provide an implementation that is more efficient than the one provided by reversed(). __reversed__() reversed() __len__() __getitem__() __reversed__() reversed() The membership test operators (in and not in) are normally implemented as an iteration through a container. However, container objects can supply the following special method with a more efficient implementation, which also does not require the object be iterable. in not in Called to implement membership test operators. Should return true if item is in self, false otherwise. For mapping objects, this should consider the keys of the mapping rather than the values or the key-item pairs. For objects that don’t define contains(), the membership test first tries iteration via iter(), then the old sequence iteration protocol via getitem(), see this section in the language reference. __contains__() __iter__() __getitem__() ### 3. 3. 8. Emulating numeric types¶ The following methods can be defined to emulate numeric objects. Methods corresponding to operations that are not supported by the particular kind of number implemented (e. g. , bitwise operations for non-integral numbers) should be left undefined.