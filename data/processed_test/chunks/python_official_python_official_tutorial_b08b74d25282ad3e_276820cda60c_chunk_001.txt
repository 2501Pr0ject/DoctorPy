The example also prints percentage multiplied by 100, with 2 decimal places and followed by a percent sign (see Format Specification Mini-Language for details). The str. format() method of strings requires more manual effort. Youâ€™ll still use { and } to mark where a variable will be substituted and can provide detailed formatting directives, but youâ€™ll also need to provide the information to be formatted. In the following code block there are two examples of how to format variables: str. format() { } >>> yes_votes = 42_572_654 >>> total_votes = 85_705_149 >>> percentage = yes_votes / total_votes >>> '{:-9} YES votes {:2. 2%}'. format(yes_votes, percentage) ' 42572654 YES votes 49. 67%' Notice how the yes_votes are padded with spaces and a negative sign only for negative numbers. The example also prints percentage multiplied by 100, with 2 decimal places and followed by a percent sign (see Format Specification Mini-Language for details). yes_votes percentage Finally, you can do all the string handling yourself by using string slicing and concatenation operations to create any layout you can imagine. The string type has some methods that perform useful operations for padding strings to a given column width. Finally, you can do all the string handling yourself by using string slicing and concatenation operations to create any layout you can imagine. The string type has some methods that perform useful operations for padding strings to a given column width. When you donâ€™t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the repr() or str() functions. repr() str() The str() function is meant to return representations of values which are fairly human-readable, while repr() is meant to generate representations which can be read by the interpreter (or will force a SyntaxError if there is no equivalent syntax). For objects which donâ€™t have a particular representation for human consumption, str() will return the same value as repr(). Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function. Strings, in particular, have two distinct representations. str() repr() SyntaxError str() repr() Some examples: >>> s = 'Hello, world. ' >>> str(s) 'Hello, world. ' >>> repr(s) "'Hello, world. '" >>> str(1/7) '0.