{
  "chunk_id": "external_external_guides_1811034afddfd51a_93df0401e39e_chunk_001",
  "original_doc_id": "external_external_guides_1811034afddfd51a_93df0401e39e",
  "content": "What we did is specify what is known as a positional argument. It’s named so because the program should know what to do with the value, solely based on where it appears on the command line. This concept is more relevant to a command like cp, whose most basic usage is cp SRC DEST. The first position is what you want copied, and the second position is where you want it copied to. If we want beyond what it provides by default, we tell it a bit more. In this case, we want it to display a different directory, pypy. What we did is specify what is known as a positional argument. It’s named so because the program should know what to do with the value, solely based on where it appears on the command line. This concept is more relevant to a command like cp, whose most basic usage is cp SRC DEST. The first position is what you want copied, and the second position is where you want it copied to. pypy cp SRC DEST Now, say we want to change behaviour of the program. In our example, we display more info for each file instead of just showing the file names. The -l in that case is known as an optional argument. Now, say we want to change behaviour of the program. In our example, we display more info for each file instead of just showing the file names. The -l in that case is known as an optional argument. -l That’s a snippet of the help text. It’s very useful in that you can come across a program you have never used before, and can figure out how it works simply by reading its help text. That’s a snippet of the help text. It’s very useful in that you can come across a program you have never used before, and can figure out how it works simply by reading its help text. ## The basics¶ Let us start with a very simple example which does (almost) nothing: import argparse parser = argparse. ArgumentParser() parser. parse_args() Following is a result of running the code: $ python prog. py $ python prog. py --help usage: prog. py [-h] options: -h, --help show this help message and exit $ python prog. py --verbose usage: prog. py [-h] prog. py: error: unrecognized arguments: --verbose $ python prog. py foo usage: prog. py [-h] prog.",
  "title": "Argparse Tutorial.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 1,
  "start_char": 2097,
  "end_char": 4240,
  "token_count": 489,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_1811034afddfd51a.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:39.483917"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_1811034afddfd51a_93df0401e39e_chunk_001.txt"
}