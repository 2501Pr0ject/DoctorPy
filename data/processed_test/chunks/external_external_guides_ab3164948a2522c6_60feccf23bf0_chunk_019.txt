You can pass an arbitrary object as a message, and its str() method will be called when the logging system needs to convert it to a string representation. In fact, if you want to, you can avoid computing a string representation altogether - for example, the SocketHandler emits an event by pickling it and sending it over the wire. __str__() SocketHandler ## Optimization¶ Formatting of message arguments is deferred until it cannot be avoided. However, computing the arguments passed to the logging method can also be expensive, and you may want to avoid doing it if the logger will just throw away your event. To decide what to do, you can call the isEnabledFor() method which takes a level argument and returns true if the event would be created by the Logger for that level of call. You can write code like this: isEnabledFor() if logger. isEnabledFor(logging. DEBUG): logger. debug('Message with %s, %s', expensive_func1(), expensive_func2()) so that if the logger’s threshold is set above DEBUG, the calls to expensive_func1 and expensive_func2 are never made. DEBUG expensive_func1 expensive_func2 Note In some cases, isEnabledFor() can itself be more expensive than you’d like (e. g. for deeply nested loggers where an explicit level is only set high up in the logger hierarchy). In such cases (or if you want to avoid calling a method in tight loops), you can cache the result of a call to isEnabledFor() in a local or instance variable, and use that instead of calling the method each time. Such a cached value would only need to be recomputed when the logging configuration changes dynamically while the application is running (which is not all that common). isEnabledFor() isEnabledFor() There are other optimizations which can be made for specific applications which need more precise control over what logging information is collected. Here’s a list of things you can do to avoid processing during logging which you don’t need: What you don’t want to collect How to avoid collecting it Information about where calls were made from. Set logging. _srcfile to None. This avoids calling sys. _getframe(), which may help to speed up your code in environments like PyPy (which can’t speed up code that uses sys. _getframe()). logging. _srcfile None sys. _getframe() sys. _getframe() Threading information. Set logging. logThreads to False. logging.