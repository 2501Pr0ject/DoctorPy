True False False is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. False Return whether this path points to the same file as other_path, which can be either a Path object, or a string. The semantics are similar to os. path. samefile() and os. path. samestat(). os. path. samefile() os. path. samestat() An OSError can be raised if either file cannot be accessed for some reason. OSError >>> p = Path('spam') >>> q = Path('eggs') >>> p. samefile(q) False >>> p. samefile('spam') True Added in version 3. 5. ### Reading and writing files¶ Open the file pointed to by the path, like the built-in open() function does: open() >>> p = Path('setup. py') >>> with p. open() as f:. f. readline(). '#. /usr/bin/env python3\n' Return the decoded contents of the pointed-to file as a string: >>> p = Path('my_text_file') >>> p. write_text('Text file contents') 18 >>> p. read_text() 'Text file contents' The file is opened and then closed. The optional parameters have the same meaning as in open(). open() Added in version 3. 5. Changed in version 3. 13: The newline parameter was added. Return the binary contents of the pointed-to file as a bytes object: >>> p = Path('my_binary_file') >>> p. write_bytes(b'Binary file contents') 20 >>> p. read_bytes() b'Binary file contents' Added in version 3. 5. Open the file pointed to in text mode, write data to it, and close the file: >>> p = Path('my_text_file') >>> p. write_text('Text file contents') 18 >>> p. read_text() 'Text file contents' An existing file of the same name is overwritten. The optional parameters have the same meaning as in open(). open() Added in version 3. 5. Changed in version 3. 10: The newline parameter was added. Open the file pointed to in bytes mode, write data to it, and close the file: >>> p = Path('my_binary_file') >>> p. write_bytes(b'Binary file contents') 20 >>> p.