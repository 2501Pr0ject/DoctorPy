{
  "chunk_id": "python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c_chunk_012",
  "original_doc_id": "python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c",
  "content": "If the module has no file but does have a loader that is not None, then the loader’s repr is used as part of the module’s repr. __file__ __loader__ None Otherwise, just use the module’s name in the repr. Otherwise, just use the module’s name in the repr. __name__ Changed in version 3. 12: Use of module_repr(), having been deprecated since Python 3. 4, was removed in Python 3. 12 and is no longer called during the resolution of a module’s repr. module_repr() ### 5. 4. 6. Cached bytecode invalidation¶ Before Python loads cached bytecode from a. pyc file, it checks whether the cache is up-to-date with the source. py file. By default, Python does this by storing the source’s last-modified timestamp and size in the cache file when writing it. At runtime, the import system then validates the cache file by checking the stored metadata in the cache file against the source’s metadata. pyc. py Python also supports “hash-based” cache files, which store a hash of the source file’s contents rather than its metadata. There are two variants of hash-based. pyc files: checked and unchecked. For checked hash-based. pyc files, Python validates the cache file by hashing the source file and comparing the resulting hash with the hash in the cache file. If a checked hash-based cache file is found to be invalid, Python regenerates it and writes a new checked hash-based cache file. For unchecked hash-based. pyc files, Python simply assumes the cache file is valid if it exists. Hash-based. pyc files validation behavior may be overridden with the --check-hash-based-pycs flag. pyc. pyc. pyc. pyc --check-hash-based-pycs Changed in version 3. 7: Added hash-based. pyc files. Previously, Python only supported timestamp-based invalidation of bytecode caches. pyc ## 5. 5. The Path Based Finder¶ As mentioned previously, Python comes with several default meta path finders. One of these, called the path based finder (PathFinder), searches an import path, which contains a list of path entries. Each path entry names a location to search for modules. PathFinder The path based finder itself doesn’t know how to import anything.",
  "title": "5. The import system.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 12,
  "start_char": 27446,
  "end_char": 29569,
  "token_count": 486,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_d33d7142ec98a66a.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:39.012980"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c_chunk_012.txt"
}