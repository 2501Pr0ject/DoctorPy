{
  "chunk_id": "python_official_python_official_reference_c3b42d1ee759e6dc_2e568469e606_chunk_006",
  "original_doc_id": "python_official_python_official_reference_c3b42d1ee759e6dc_2e568469e606",
  "content": "raise try except finally Python uses the “termination” model of error handling: an exception handler can find out what happened and continue execution at an outer level, but it cannot repair the cause of the error and retry the failing operation (except by re-entering the offending piece of code from the top). When an exception is not handled at all, the interpreter terminates execution of the program, or returns to its interactive main loop. In either case, it prints a stack traceback, except when the exception is SystemExit. SystemExit Exceptions are identified by class instances. The except clause is selected depending on the class of the instance: it must reference the class of the instance or a non-virtual base class thereof. The instance can be received by the handler and can carry additional information about the exceptional condition. except Note Exception messages are not part of the Python API. Their contents may change from one version of Python to the next without warning and should not be relied on by code which will run under multiple versions of the interpreter. See also the description of the try statement in section The try statement and raise statement in section The raise statement. try raise Footnotes ### Table of Contents 4. Execution model 4. 1. Structure of a program 4. 2. Naming and binding 4. 2. 1. Binding of names 4. 2. 2. Resolution of names 4. 2. 3. Annotation scopes 4. 2. 4. Lazy evaluation 4. 2. 5. Builtins and restricted execution 4. 2. 6. Interaction with dynamic features 4. 3. Exceptions 4. 1. Structure of a program 4. 2. Naming and binding 4. 2. 1. Binding of names 4. 2. 2. Resolution of names 4. 2. 3. Annotation scopes 4. 2. 4. Lazy evaluation 4. 2. 5. Builtins and restricted execution 4. 2. 6. Interaction with dynamic features 4. 2. 1. Binding of names 4. 2. 2. Resolution of names 4. 2. 3. Annotation scopes 4. 2. 4. Lazy evaluation 4. 2. 5. Builtins and restricted execution 4. 2. 6.",
  "title": "4. Execution model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 6,
  "start_char": 14538,
  "end_char": 16489,
  "token_count": 499,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_c3b42d1ee759e6dc.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:33.213973"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_c3b42d1ee759e6dc_2e568469e606_chunk_006.txt"
}