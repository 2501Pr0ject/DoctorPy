) is particularly useful when modifying an existing pattern, since you can add new groups without changing how all the other groups are numbered. It should be mentioned that there’s no performance difference in searching between capturing and non-capturing groups; neither form is any faster than the other. * (. :. ) A more significant feature is named groups: instead of referring to them by numbers, groups can be referenced by a name. The syntax for a named group is one of the Python-specific extensions: (. P. ). name is, obviously, the name of the group. Named groups behave exactly like capturing groups, and additionally associate a name with a group. The match object methods that deal with capturing groups all accept either integers that refer to the group by number or strings that contain the desired group’s name. Named groups are still given numbers, so you can retrieve information about a group in two ways: (. P<name>. ) >>> p = re. compile(r'(. P<word>\b\w+\b)') >>> m = p. search( '(((( Lots of punctuation )))' ) >>> m. group('word') 'Lots' >>> m. group(1) 'Lots' Additionally, you can retrieve named groups as a dictionary with groupdict(): groupdict() >>> m = re. match(r'(. P<first>\w+) (. P<last>\w+)', 'Jane Doe') >>> m. groupdict() {'first': 'Jane', 'last': 'Doe'} Named groups are handy because they let you use easily remembered names, instead of having to remember numbers. Here’s an example RE from the imaplib module: imaplib InternalDate = re. compile(r'INTERNALDATE "' r'(. P<day>[ 123][0-9])-(. P<mon>[A-Z][a-z][a-z])-' r'(. P<year>[0-9][0-9][0-9][0-9])' r' (. P<hour>[0-9][0-9]):(. P<min>[0-9][0-9]):(. P<sec>[0-9][0-9])' r' (. P<zonen>[-+])(. P<zoneh>[0-9][0-9])(. P<zonem>[0-9][0-9])' r'"') It’s obviously much easier to retrieve m.