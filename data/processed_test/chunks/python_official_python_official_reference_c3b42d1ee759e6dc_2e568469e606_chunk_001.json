{
  "chunk_id": "python_official_python_official_reference_c3b42d1ee759e6dc_2e568469e606_chunk_001",
  "original_doc_id": "python_official_python_official_reference_c3b42d1ee759e6dc_2e568469e606",
  "content": "import * A target occurring in a del statement is also considered bound for this purpose (though the actual semantics are to unbind the name). del Each assignment or import statement occurs within a block defined by a class or function definition or at the module level (the top-level code block). If a name is bound in a block, it is a local variable of that block, unless declared as nonlocal or global. If a name is bound at the module level, it is a global variable. (The variables of the module code block are local and global. ) If a variable is used in a code block but not defined there, it is a free variable. nonlocal global Each occurrence of a name in the program text refers to the binding of that name established by the following name resolution rules. ### 4. 2. 2. Resolution of names¶ A scope defines the visibility of a name within a block. If a local variable is defined in a block, its scope includes that block. If the definition occurs in a function block, the scope extends to any blocks contained within the defining one, unless a contained block introduces a different binding for the name. When a name is used in a code block, it is resolved using the nearest enclosing scope. The set of all such scopes visible to a code block is called the block’s environment. When a name is not found at all, a NameError exception is raised. If the current scope is a function scope, and the name refers to a local variable that has not yet been bound to a value at the point where the name is used, an UnboundLocalError exception is raised. UnboundLocalError is a subclass of NameError. NameError UnboundLocalError UnboundLocalError NameError If a name binding operation occurs anywhere within a code block, all uses of the name within the block are treated as references to the current block. This can lead to errors when a name is used within a block before it is bound. This rule is subtle. Python lacks declarations and allows name binding operations to occur anywhere within a code block. The local variables of a code block can be determined by scanning the entire text of the block for name binding operations. See the FAQ entry on UnboundLocalError for examples. If the global statement occurs within a block, all uses of the names specified in the statement refer to the bindings of those names in the top-level namespace.",
  "title": "4. Execution model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 1,
  "start_char": 2412,
  "end_char": 4757,
  "token_count": 489,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_c3b42d1ee759e6dc.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:33.209273"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_c3b42d1ee759e6dc_2e568469e606_chunk_001.txt"
}