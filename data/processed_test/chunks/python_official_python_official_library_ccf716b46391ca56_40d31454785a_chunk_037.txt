' [] [amk] 'a' 'm' 'k' '-' [a-z] [0-5][0-9] 00 59 [0-9A-Fa-f] - [a\-z] [-a] [a-] '-' [(+*)] '(' '+' '*' ')' '-' ']' '^' '\\' \xa0 \n \w \S \b \1 \A \Z '^' [^5] '5' [^^] '^' ^ ']' [()[\]{}] []()[{}] FutureWarning '[' '--' '&&' '~~' '||' FutureWarning | A|B '|' '|' '|' '|' \| [|] (. ) \number '(' ')' \( \) [(] [)] (. ) '. ' '(' '. ' (. P<name>. ) (. aiLmsux) 'a' 'i' 'L' 'm' 's' 'u' 'x' re. A re. I re. L re. M re. S re. U re. X re. compile() (. :. ) (. aiLmsux-imsx:. ) 'a' 'i' 'L' 'm' 's' 'u' 'x' '-' 'i' 'm' 's' 'x' re. A re. I re. L re. M re. S re. U re. X 'a' 'L' 'u' '-' (. a:. ) (. u:. ) (. L:. ) (. a:. ) 'a' 'L' 'u' (. >. ). (. >. ) (. >. *). *. (. P<name>. ) bytes (. P<quote>['"]). *. (. P=quote) (. P=quote) \1 m. group('quote') m. end('quote') re. sub() \g<quote> \g<1> \1 bytes b'\x00' b'\x7f' (. P=name) (. #. ) (. =. ). Isaac (. =Asimov) 'Isaac ' 'Asimov' (. ). Isaac (. Asimov) 'Isaac ' 'Asimov' (. <=. ). (. <=abc)def 'abcdef' abc a|b a* a{3,4} search() match() >>> import re >>> m = re. search('(. <=abc)def', 'abcdef') >>> m.