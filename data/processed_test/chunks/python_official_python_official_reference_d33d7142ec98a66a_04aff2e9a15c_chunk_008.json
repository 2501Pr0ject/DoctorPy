{
  "chunk_id": "python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c_chunk_008",
  "original_doc_id": "python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c",
  "content": "Loaders¶ Module loaders provide the critical function of loading: module execution. The import machinery calls the importlib. abc. Loader. exec_module() method with a single argument, the module object to execute. Any value returned from exec_module() is ignored. importlib. abc. Loader. exec_module() exec_module() Loaders must satisfy the following requirements: If the module is a Python module (as opposed to a built-in module or a dynamically loaded extension), the loader should execute the module’s code in the module’s global name space (module. dict). If the module is a Python module (as opposed to a built-in module or a dynamically loaded extension), the loader should execute the module’s code in the module’s global name space (module. dict). module. __dict__ If the loader cannot execute the module, it should raise an ImportError, although any other exception raised during exec_module() will be propagated. If the loader cannot execute the module, it should raise an ImportError, although any other exception raised during exec_module() will be propagated. ImportError exec_module() In many cases, the finder and loader can be the same object; in such cases the find_spec() method would just return a spec with the loader set to self. find_spec() self Module loaders may opt in to creating the module object during loading by implementing a create_module() method. It takes one argument, the module spec, and returns the new module object to use during loading. create_module() does not need to set any attributes on the module object. If the method returns None, the import machinery will create the new module itself. create_module() create_module() None Added in version 3. 4: The create_module() method of loaders. create_module() Changed in version 3. 4: The load_module() method was replaced by exec_module() and the import machinery assumed all the boilerplate responsibilities of loading. load_module() exec_module() For compatibility with existing loaders, the import machinery will use the load_module() method of loaders if it exists and the loader does not also implement exec_module(). However, load_module() has been deprecated and loaders should implement exec_module() instead. load_module() exec_module() load_module() exec_module() The load_module() method must implement all the boilerplate loading functionality described above in addition to executing the module.",
  "title": "5. The import system.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 8,
  "start_char": 18496,
  "end_char": 20897,
  "token_count": 475,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_d33d7142ec98a66a.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:39.009148"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c_chunk_008.txt"
}