To display both the expression text and its value after evaluation, (useful in debugging), an equal sign '=' may be added after the expression. A conversion field, introduced by an exclamation point '. ' may follow. A format specifier may also be appended, introduced by a colon ':'. A replacement field ends with a closing curly bracket '}'. '{{' '}}' '{' '=' '. ' ':' '}' Expressions in formatted string literals are treated like regular Python expressions surrounded by parentheses, with a few exceptions. An empty expression is not allowed, and both lambda and assignment expressions := must be surrounded by explicit parentheses. Each expression is evaluated in the context where the formatted string literal appears, in order from left to right. Replacement expressions can contain newlines in both single-quoted and triple-quoted f-strings and they can contain comments. Everything that comes after a # inside a replacement field is a comment (even closing braces and quotes). In that case, replacement fields must be closed in a different line. lambda := # >>> f"abc{a # This is a comment }". + 3}" 'abc5' Changed in version 3. 7: Prior to Python 3. 7, an await expression and comprehensions containing an async for clause were illegal in the expressions in formatted string literals due to a problem with the implementation. await async for Changed in version 3. 12: Prior to Python 3. 12, comments were not allowed inside f-string replacement fields. When the equal sign '=' is provided, the output will have the expression text, the '=' and the evaluated value. Spaces after the opening brace '{', within the expression and after the '=' are all retained in the output. By default, the '=' causes the repr() of the expression to be provided, unless there is a format specified. When a format is specified it defaults to the str() of the expression unless a conversion '. r' is declared. '=' '=' '{' '=' '=' repr() str() '. r' Added in version 3. 8: The equal sign '='. '=' If a conversion is specified, the result of evaluating the expression is converted before formatting. Conversion '. s' calls str() on the result, '. r' calls repr(), and '. a' calls ascii(). '. s' str() '. r' repr() '. a' ascii() The result is then formatted using the format() protocol.