{
  "chunk_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_009",
  "original_doc_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061",
  "content": "0 servers = [0. 0] * num_servers # time when each server becomes available heapify(servers) for i in range(1_000_000): arrival_time += expovariate(1. 0 / average_arrival_interval) next_server_available = servers[0] wait = max(0. 0, next_server_available - arrival_time) waits. append(wait) service_duration = max(0. 0, gauss(average_service_time, stdev_service_time)) service_completed = arrival_time + wait + service_duration heapreplace(servers, service_completed) print(f'Mean wait: {mean(waits):. 1f} Max wait: {max(waits):. 1f}') print('Quartiles:', [round(q, 1) for q in quantiles(waits)]) See also Statistics for Hackers a video tutorial by Jake Vanderplas on statistical analysis using just a few fundamental concepts including simulation, sampling, shuffling, and cross-validation. Economics Simulation a simulation of a marketplace by Peter Norvig that shows effective use of many of the tools and distributions provided by this module (gauss, uniform, sample, betavariate, choice, triangular, and randrange). A Concrete Introduction to Probability (using Python) a tutorial by Peter Norvig covering the basics of probability theory, how to write simulations, and how to perform data analysis using Python. ## Recipes¶ These recipes show how to efficiently make random selections from the combinatoric iterators in the itertools module: itertools def random_product(*args, repeat=1): \"Random selection from itertools. product(*args, **kwds)\" pools = [tuple(pool) for pool in args] * repeat return tuple(map(random. choice, pools)) def random_permutation(iterable, r=None): \"Random selection from itertools. permutations(iterable, r)\" pool = tuple(iterable) r = len(pool) if r is None else r return tuple(random. sample(pool, r)) def random_combination(iterable, r): \"Random selection from itertools. combinations(iterable, r)\" pool = tuple(iterable) n = len(pool) indices = sorted(random. sample(range(n), r)) return tuple(pool[i] for i in indices) def random_combination_with_replacement(iterable, r): \"Choose r elements with replacement. Order the result to match the iterable. \" # Result will be in set(itertools.",
  "title": "random — Generate pseudo-random numbers.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 9,
  "start_char": 18948,
  "end_char": 21074,
  "token_count": 495,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_49df04c24c9ba477.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.616296"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_009.txt"
}