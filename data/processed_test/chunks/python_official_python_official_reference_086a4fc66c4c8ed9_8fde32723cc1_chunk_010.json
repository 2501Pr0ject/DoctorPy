{
  "chunk_id": "python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1_chunk_010",
  "original_doc_id": "python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1",
  "content": "If the second expression is an exception instance, it will be attached to the raised exception as the cause attribute (which is writable). If the expression is an exception class, the class will be instantiated and the resulting exception instance will be attached to the raised exception as the cause attribute. If the raised exception is not handled, both exceptions will be printed: from __cause__ __cause__ >>> try:. print(1 / 0). except Exception as exc:. raise RuntimeError(\"Something bad happened\") from exc. Traceback (most recent call last): File \"<stdin>\", line 2, in <module> print(1 / 0) ~~^~~ ZeroDivisionError: division by zero The above exception was the direct cause of the following exception: Traceback (most recent call last): File \"<stdin>\", line 4, in <module> raise RuntimeError(\"Something bad happened\") from exc RuntimeError: Something bad happened A similar mechanism works implicitly if a new exception is raised when an exception is already being handled. An exception may be handled when an except or finally clause, or a with statement, is used. The previous exception is then attached as the new exceptionâ€™s context attribute: except finally with __context__ >>> try:. print(1 / 0). except:. raise RuntimeError(\"Something bad happened\"). Traceback (most recent call last): File \"<stdin>\", line 2, in <module> print(1 / 0) ~~^~~ ZeroDivisionError: division by zero During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"<stdin>\", line 4, in <module> raise RuntimeError(\"Something bad happened\") RuntimeError: Something bad happened Exception chaining can be explicitly suppressed by specifying None in the from clause: None from >>> try:. print(1 / 0). except:. raise RuntimeError(\"Something bad happened\") from None. Traceback (most recent call last): File \"<stdin>\", line 4, in <module> RuntimeError: Something bad happened Additional information on exceptions can be found in section Exceptions, and information about handling exceptions is in section The try statement. Changed in version 3. 3: None is now permitted as Y in raise X from Y. None Y raise X from Y Added the suppress_context attribute to suppress automatic display of the exception context. __suppress_context__ Changed in version 3.",
  "title": "7. Simple statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 10,
  "start_char": 23879,
  "end_char": 26164,
  "token_count": 480,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_086a4fc66c4c8ed9.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:05.264244"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1_chunk_010.txt"
}