That includes sets starting with a literal '[' or containing literal character sequences '--', '&&', '~~', and '||'. To avoid a warning escape them with a backslash. Support of nested sets and set operations as in Unicode Technical Standard #18 might be added in the future. This would change the syntax, so to facilitate this change a FutureWarning will be raised in ambiguous cases for the time being. That includes sets starting with a literal '[' or containing literal character sequences '--', '&&', '~~', and '||'. To avoid a warning escape them with a backslash. FutureWarning '[' '--' '&&' '~~' '||' Changed in version 3. 7: FutureWarning is raised if a character set contains constructs that will change semantically in the future. FutureWarning | A|B, where A and B can be arbitrary REs, creates a regular expression that will match either A or B. An arbitrary number of REs can be separated by the '|' in this way. This can be used inside groups (see below) as well. As the target string is scanned, REs separated by '|' are tried from left to right. When one pattern completely matches, that branch is accepted. This means that once A matches, B will not be tested further, even if it would produce a longer overall match. In other words, the '|' operator is never greedy. To match a literal '|', use \|, or enclose it inside a character class, as in [|]. A|B '|' '|' '|' '|' \| [|] (. ) Matches whatever regular expression is inside the parentheses, and indicates the start and end of a group; the contents of a group can be retrieved after a match has been performed, and can be matched later in the string with the \number special sequence, described below. To match the literals '(' or ')', use ( or ), or enclose them inside a character class: [(], [)]. \number '(' ')' \( \) [(] [)] (. ) This is an extension notation (a '. ' following a '(' is not meaningful otherwise). The first character after the '. ' determines what the meaning and further syntax of the construct is. Extensions usually do not create a new group; (. P. ) is the only exception to this rule. Following are the currently supported extensions. '. ' '(' '. ' (. P<name>. ) (.