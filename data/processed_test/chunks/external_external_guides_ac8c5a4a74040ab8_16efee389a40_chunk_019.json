{
  "chunk_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_019",
  "original_doc_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40",
  "content": "bat sendmail. cf printers. conf Now, consider complicating the problem a bit; what if you want to match filenames where the extension is not bat. Some incorrect attempts: bat. [. ][^b]. $ The first attempt above tries to exclude bat by requiring that the first character of the extension is not a b. This is wrong, because the pattern also doesn’t match foo. bar. *[. ][^b]. *$ bat b foo. bar. $. *. $ The expression gets messier when you try to patch up the first solution by requiring one of the following cases to match: the first character of the extension isn’t b; the second character isn’t a; or the third character isn’t t. This accepts foo. bar and rejects autoexec. bat, but it requires a three-letter extension and won’t accept a filename with a two-letter extension such as sendmail. cf. We’ll complicate the pattern again in an effort to fix it. b a t foo. bar autoexec. bat sendmail. cf. $. *. $ In the third attempt, the second and third letters are all made optional in order to allow matching extensions shorter than three characters, such as sendmail. cf. sendmail. cf The pattern’s getting really complicated now, which makes it hard to read and understand. Worse, if the problem changes and you want to exclude both bat and exe as extensions, the pattern would get even more complicated and confusing. bat exe A negative lookahead cuts through all this confusion:. [^. ]$ The negative lookahead means: if the expression bat doesn’t match at this point, try the rest of the pattern; if bat$ does match, the whole pattern will fail. The trailing $ is required to ensure that something like sample. batch, where the extension only starts with bat, will be allowed. The [^. ] makes sure that the pattern works when there are multiple dots in the filename. *. [^. ]*$ bat bat$ $ sample. batch bat [^. ]* Excluding another filename extension is now easy; simply add it as an alternative inside the assertion. The following pattern excludes filenames that end in either bat or exe: bat exe. [^. ]$. *. [^. ]*$ ## Modifying Strings¶ Up to this point, we’ve simply performed searches against a static string.",
  "title": "Regular Expression HOWTO.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 19,
  "start_char": 38513,
  "end_char": 40632,
  "token_count": 473,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_ac8c5a4a74040ab8.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:41.046473"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_019.txt"
}