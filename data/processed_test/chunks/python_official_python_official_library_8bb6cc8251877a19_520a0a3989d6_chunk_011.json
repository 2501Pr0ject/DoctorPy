{
  "chunk_id": "python_official_python_official_library_8bb6cc8251877a19_520a0a3989d6_chunk_011",
  "original_doc_id": "python_official_python_official_library_8bb6cc8251877a19_520a0a3989d6",
  "content": "__doc__ 'Docstring' Without the use of this decorator factory, the name of the example function would have been 'wrapper', and the docstring of the original example() would have been lost. 'wrapper' example() ## partial Objects¶ partial partial objects are callable objects created by partial(). They have three read-only attributes: partial partial() A callable object or function. Calls to the partial object will be forwarded to func with new arguments and keywords. partial func The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call. partial The keyword arguments that will be supplied when the partial object is called. partial partial objects are like function objects in that they are callable, weak referenceable, and can have attributes. There are some important differences. For instance, the name and function. doc attributes are not created automatically. Also, partial objects defined in classes behave like static methods and do not transform into bound methods during instance attribute look-up. partial __name__ function. __doc__ partial ### Table of Contents functools — Higher-order functions and operations on callable objects partial Objects functools partial Objects partial #### Previous topic itertools — Functions creating iterators for efficient looping itertools #### Next topic operator — Standard operators as functions operator ### This page Report a bug Show source functools functools functools lru_cache(maxsize=None) lru_cache() @cache def factorial(n): return n * factorial(n-1) if n else 1 >>> factorial(10) # no previously cached result, makes 11 recursive calls 3628800 >>> factorial(5) # just looks up cached value result 120 >>> factorial(12) # makes two new recursive calls, the other 10 are cached 479001600 property() class DataSet: def __init__(self, sequence_of_numbers): self. _data = tuple(sequence_of_numbers) @cached_property def stdev(self): return statistics. stdev(self. _data) cached_property() property() __dict__ __dict__ __slots__ __dict__ __dict__ cached_property() property() lru_cache() cached_property() cached_property sorted() min() max() heapq. nlargest() heapq. nsmallest() itertools. groupby() sorted(iterable, key=cmp_to_key(locale. strcoll)) # locale-aware sort order f(a=1, b=2) f(b=2, a=1) @lru_cache def count_vowels(sentence): return sum(sentence.",
  "title": "functools — Higher-order functions and operations on callable objects.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 11,
  "start_char": 24202,
  "end_char": 26584,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_8bb6cc8251877a19.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:09.506902"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_8bb6cc8251877a19_520a0a3989d6_chunk_011.txt"
}