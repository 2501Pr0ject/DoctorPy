strftime("%H:%M:%S %Z") '12:10:30 +01:00' >>> 'The {} is {:%H:%M}. '. format("time", t) 'The time is 12:10. ' tzinfo tzinfo tzinfo datetime time tzinfo tzinfo datetime datetime timezone tzinfo tzinfo __init__() tzinfo datetime timedelta tzinfo utcoffset() None timedelta -timedelta(hours=24) timedelta(hours=24) utcoffset() return CONSTANT # fixed-offset class return CONSTANT + self. dst(dt) # daylight-aware class utcoffset() None dst() None utcoffset() NotImplementedError timedelta None timedelta(0) timedelta utcoffset() utcoffset() dst() datetime. timetuple() tzinfo dst() tm_isdst tzinfo. fromutc() dst() tzinfo tz. utcoffset(dt) - tz. dst(dt) datetime dt. tzinfo == tz tzinfo datetime. astimezone() tzinfo tzinfo. fromutc() astimezone() dst() def dst(self, dt): # a fixed-offset class: doesn't account for DST return timedelta(0) def dst(self, dt): # Code to set dston and dstoff to the time zone's DST # transition times based on the input dt. year, and expressed # in standard local time. if dston <= dt. replace(tzinfo=None) < dstoff: return timedelta(hours=1) else: return timedelta(0) dst() NotImplementedError datetime datetime "GMT" "UTC" "-500" "-5:00" "EDT" "US/Eastern" "America/New York" None tzinfo tzinfo tzname() NotImplementedError datetime time datetime time None tzinfo None datetime None None tzinfo utcoffset(None) datetime datetime dt. tzinfo tzinfo tzinfo tzinfo tzinfo datetime. astimezone() dt. tzinfo fromutc() tzinfo fromutc() fromutc() astimezone() fromutc() fromutc() def fromutc(self, dt): # raise ValueError error if dt. tzinfo is not self dtoff = dt. utcoffset() dtdst = dt. dst() # raise ValueError if dtoff is None or dtdst is None delta = dtoff - dtdst # this is self's standard offset if delta: dt += delta # convert to standard local time dtdst = dt.