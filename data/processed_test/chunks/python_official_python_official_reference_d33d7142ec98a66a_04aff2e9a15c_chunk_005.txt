meta_path find_spec() If the meta path finder knows how to handle the named module, it returns a spec object. If it cannot handle the named module, it returns None. If sys. meta_path processing reaches the end of its list without returning a spec, then a ModuleNotFoundError is raised. Any other exceptions raised are simply propagated up, aborting the import process. None sys. meta_path ModuleNotFoundError The find_spec() method of meta path finders is called with two or three arguments. The first is the fully qualified name of the module being imported, for example foo. bar. baz. The second argument is the path entries to use for the module search. For top-level modules, the second argument is None, but for submodules or subpackages, the second argument is the value of the parent package’s path attribute. If the appropriate path attribute cannot be accessed, a ModuleNotFoundError is raised. The third argument is an existing module object that will be the target of loading later. The import system passes in a target module only during reload. find_spec() foo. bar. baz None __path__ __path__ ModuleNotFoundError The meta path may be traversed multiple times for a single import request. For example, assuming none of the modules involved has already been cached, importing foo. bar. baz will first perform a top level import, calling mpf. find_spec("foo", None, None) on each meta path finder (mpf). After foo has been imported, foo. bar will be imported by traversing the meta path a second time, calling mpf. find_spec("foo. bar", foo. path, None). Once foo. bar has been imported, the final traversal will call mpf. find_spec("foo. bar. baz", foo. bar. path, None). foo. bar. baz mpf. find_spec("foo", None, None) mpf foo foo. bar mpf. find_spec("foo. bar", foo. __path__, None) foo. bar mpf. find_spec("foo. bar. baz", foo. bar. __path__, None) Some meta path finders only support top level imports. These importers will always return None when anything other than None is passed as the second argument. None None Python’s default sys.