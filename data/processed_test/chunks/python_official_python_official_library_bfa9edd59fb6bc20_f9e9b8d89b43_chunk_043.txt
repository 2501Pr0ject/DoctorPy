The precision determines the number of significant digits before and after the decimal point and defaults to 6. If precision is N, the output is truncated to N characters. If precision is N, the output is truncated to N characters. N N See PEP 237. See PEP 237. Since Python strings have an explicit length, %s conversions do not assume that '\0' is the end of the string. %s '\0' Changed in version 3. 1: %f conversions for numbers whose absolute value is over 1e50 are no longer replaced by %g conversions. %f %g ## Binary Sequence Types — bytes, bytearray, memoryview¶ bytes bytearray memoryview The core built-in types for manipulating binary data are bytes and bytearray. They are supported by memoryview which uses the buffer protocol to access the memory of other binary objects without needing to make a copy. bytes bytearray memoryview The array module supports efficient storage of basic data types like 32-bit integers and IEEE754 double-precision floating values. array ### Bytes Objects¶ Bytes objects are immutable sequences of single bytes. Since many major binary protocols are based on the ASCII text encoding, bytes objects offer several methods that are only valid when working with ASCII compatible data and are closely related to string objects in a variety of other ways. Firstly, the syntax for bytes literals is largely the same as that for string literals, except that a b prefix is added: b Single quotes: b'still allows embedded "double" quotes' Single quotes: b'still allows embedded "double" quotes' b'still allows embedded "double" quotes' Double quotes: b"still allows embedded 'single' quotes" Double quotes: b"still allows embedded 'single' quotes" b"still allows embedded 'single' quotes" Triple quoted: b'''3 single quotes''', b"""3 double quotes""" Triple quoted: b'''3 single quotes''', b"""3 double quotes""" b'''3 single quotes''' b"""3 double quotes""" Only ASCII characters are permitted in bytes literals (regardless of the declared source code encoding). Any binary values over 127 must be entered into bytes literals using the appropriate escape sequence. As with string literals, bytes literals may also use a r prefix to disable processing of escape sequences. See String and Bytes literals for more about the various forms of bytes literal, including supported escape sequences.