QueueHandler The NullHandler, StreamHandler and FileHandler classes are defined in the core logging package. The other handlers are defined in a sub-module, logging. handlers. (There is also another sub-module, logging. config, for configuration functionality. ) NullHandler StreamHandler FileHandler logging. handlers logging. config Logged messages are formatted for presentation through instances of the Formatter class. They are initialized with a format string suitable for use with the % operator and a dictionary. Formatter For formatting multiple messages in a batch, instances of BufferingFormatter can be used. In addition to the format string (which is applied to each message in the batch), there is provision for header and trailer format strings. BufferingFormatter When filtering based on logger level and/or handler level is not enough, instances of Filter can be added to both Logger and Handler instances (through their addFilter() method). Before deciding to process a message further, both loggers and handlers consult all their filters for permission. If any filter returns a false value, the message is not processed further. Filter Logger Handler addFilter() The basic Filter functionality allows filtering by specific logger name. If this feature is used, messages sent to the named logger and its children are allowed through the filter, and all others dropped. Filter ## Exceptions raised during logging¶ The logging package is designed to swallow exceptions which occur while logging in production. This is so that errors which occur while handling logging events - such as logging misconfiguration, network or other similar errors - do not cause the application using logging to terminate prematurely. SystemExit and KeyboardInterrupt exceptions are never swallowed. Other exceptions which occur during the emit() method of a Handler subclass are passed to its handleError() method. SystemExit KeyboardInterrupt emit() Handler handleError() The default implementation of handleError() in Handler checks to see if a module-level variable, raiseExceptions, is set. If set, a traceback is printed to sys. stderr. If not set, the exception is swallowed. handleError() Handler raiseExceptions sys. stderr Note The default value of raiseExceptions is True. This is because during development, you typically want to be notified of any exceptions that occur. It’s advised that you set raiseExceptions to False for production usage. raiseExceptions True raiseExceptions False ## Using arbitrary objects as messages¶ In the preceding sections and examples, it has been assumed that the message passed when logging the event is a string. However, this is not the only possibility.