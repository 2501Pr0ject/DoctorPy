{
  "chunk_id": "python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c_chunk_016",
  "original_doc_id": "python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c",
  "content": "This spec will always have “loader” set (with one exception). find_spec() find_spec() To indicate to the import machinery that the spec represents a namespace portion, the path entry finder sets submodule_search_locations to a list containing the portion. submodule_search_locations Changed in version 3. 4: find_spec() replaced find_loader() and find_module(), both of which are now deprecated, but will be used if find_spec() is not defined. find_spec() find_loader() find_module() find_spec() Older path entry finders may implement one of these two deprecated methods instead of find_spec(). The methods are still respected for the sake of backward compatibility. However, if find_spec() is implemented on the path entry finder, the legacy methods are ignored. find_spec() find_spec() find_loader() takes one argument, the fully qualified name of the module being imported. find_loader() returns a 2-tuple where the first item is the loader and the second item is a namespace portion. find_loader() find_loader() For backwards compatibility with other implementations of the import protocol, many path entry finders also support the same, traditional find_module() method that meta path finders support. However path entry finder find_module() methods are never called with a path argument (they are expected to record the appropriate path information from the initial call to the path hook). find_module() find_module() path The find_module() method on path entry finders is deprecated, as it does not allow the path entry finder to contribute portions to namespace packages. If both find_loader() and find_module() exist on a path entry finder, the import system will always call find_loader() in preference to find_module(). find_module() find_loader() find_module() find_loader() find_module() Changed in version 3. 10: Calls to find_module() and find_loader() by the import system will raise ImportWarning. find_module() find_loader() ImportWarning Changed in version 3. 12: find_module() and find_loader() have been removed. find_module() find_loader() ## 5. 6. Replacing the standard import system¶ The most reliable mechanism for replacing the entire import system is to delete the default contents of sys. meta_path, replacing them entirely with a custom meta path hook. sys. meta_path If it is acceptable to only alter the behaviour of import statements without affecting other APIs that access the import system, then replacing the builtin import() function may be sufficient.",
  "title": "5. The import system.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 16,
  "start_char": 36665,
  "end_char": 39155,
  "token_count": 500,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_d33d7142ec98a66a.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:39.016625"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c_chunk_016.txt"
}