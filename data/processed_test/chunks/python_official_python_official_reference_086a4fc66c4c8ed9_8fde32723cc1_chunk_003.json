{
  "chunk_id": "python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1_chunk_003",
  "original_doc_id": "python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1",
  "content": "Note: If the object is a class instance and the attribute reference occurs on both sides of the assignment operator, the right-hand side expression, a. x can access either an instance attribute or (if no instance attribute exists) a class attribute. The left-hand side target a. x is always set as an instance attribute, creating it if necessary. Thus, the two occurrences of a. x do not necessarily refer to the same attribute: if the right-hand side expression refers to a class attribute, the left-hand side creates a new instance attribute as the target of the assignment: class Cls: x = 3 # class variable inst = Cls() inst. x = inst. x + 1 # writes inst. x as 4 leaving Cls. x as 3 This description does not necessarily apply to descriptor attributes, such as properties created with property(). If the target is an attribute reference: The primary expression in the reference is evaluated. It should yield an object with assignable attributes; if this is not the case, TypeError is raised. That object is then asked to assign the assigned object to the given attribute; if it cannot perform the assignment, it raises an exception (usually but not necessarily AttributeError). TypeError AttributeError Note: If the object is a class instance and the attribute reference occurs on both sides of the assignment operator, the right-hand side expression, a. x can access either an instance attribute or (if no instance attribute exists) a class attribute. The left-hand side target a. x is always set as an instance attribute, creating it if necessary. Thus, the two occurrences of a. x do not necessarily refer to the same attribute: if the right-hand side expression refers to a class attribute, the left-hand side creates a new instance attribute as the target of the assignment: a. x a. x a. x class Cls: x = 3 # class variable inst = Cls() inst. x = inst. x + 1 # writes inst. x as 4 leaving Cls. x as 3 This description does not necessarily apply to descriptor attributes, such as properties created with property(). property() If the target is a subscription: The primary expression in the reference is evaluated. It should yield either a mutable sequence object (such as a list) or a mapping object (such as a dictionary). Next, the subscript expression is evaluated.",
  "title": "7. Simple statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 3,
  "start_char": 7226,
  "end_char": 9503,
  "token_count": 481,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_086a4fc66c4c8ed9.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:05.258229"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1_chunk_003.txt"
}