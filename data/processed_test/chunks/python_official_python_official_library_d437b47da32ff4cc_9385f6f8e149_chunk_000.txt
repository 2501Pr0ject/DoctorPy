sys — System-specific parameters and functions. 13. 5 Source:  sys — System-specific parameters and functions¶ sys This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. It is always available. Unless explicitly noted otherwise, all variables are read-only. On POSIX systems where Python was built with the standard configure script, this contains the ABI flags as specified by PEP 3149. configure Added in version 3. 2. Changed in version 3. 8: Default flags became an empty string (m flag for pymalloc has been removed). m Availability: Unix. Append the callable hook to the list of active auditing hooks for the current (sub)interpreter. When an auditing event is raised through the sys. audit() function, each hook will be called in the order it was added with the event name and the tuple of arguments. Native hooks added by PySys_AddAuditHook() are called first, followed by hooks added in the current (sub)interpreter. Hooks can then log the event, raise an exception to abort the operation, or terminate the process entirely. sys. audit() PySys_AddAuditHook() Note that audit hooks are primarily for collecting information about internal or otherwise unobservable actions, whether by Python or libraries written in Python. They are not suitable for implementing a “sandbox”. In particular, malicious code can trivially disable or bypass hooks added using this function. At a minimum, any security-sensitive hooks must be added using the C API PySys_AddAuditHook() before initialising the runtime, and any modules allowing arbitrary memory modification (such as ctypes) should be completely removed or closely monitored. PySys_AddAuditHook() ctypes Calling sys. addaudithook() will itself raise an auditing event named sys. addaudithook with no arguments. If any existing hooks raise an exception derived from RuntimeError, the new hook will not be added and the exception suppressed. As a result, callers cannot assume that their hook has been added unless they control all existing hooks. Calling sys. addaudithook() will itself raise an auditing event named sys. addaudithook with no arguments. If any existing hooks raise an exception derived from RuntimeError, the new hook will not be added and the exception suppressed. As a result, callers cannot assume that their hook has been added unless they control all existing hooks. sys. addaudithook() sys.