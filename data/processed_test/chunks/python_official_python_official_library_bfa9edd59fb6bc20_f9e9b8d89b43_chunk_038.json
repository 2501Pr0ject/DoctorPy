{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_038",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "isupper() might be False if s contains uncased characters or if the Unicode category of the resulting character(s) is not “Lu” (Letter, uppercase), but e. g. “Lt” (Letter, titlecase). s. upper(). isupper() False s The uppercasing algorithm used is described in section 3. 13 ‘Default Case Folding’ of the Unicode Standard. Return a copy of the string left filled with ASCII '0' digits to make a string of length width. A leading sign prefix ('+'/'-') is handled by inserting the padding after the sign character rather than before. The original string is returned if width is less than or equal to len(s). '0' '+' '-' len(s) For example: >>> \"42\". zfill(5) '00042' >>> \"-42\". zfill(5) '-0042' ### Formatted String Literals (f-strings)¶ Added in version 3. 6. Changed in version 3. 7: The await and async for can be used in expressions within f-strings. await async for Changed in version 3. 8: Added the debugging operator (=) = Changed in version 3. 12: Many restrictions on expressions within f-strings have been removed. Notably, nested strings, comments, and backslashes are now permitted. An f-string (formally a formatted string literal) is a string literal that is prefixed with f or F. This type of string literal allows embedding arbitrary Python expressions within replacement fields, which are delimited by curly brackets ({}). These expressions are evaluated at runtime, similarly to str. format(), and are converted into regular str objects. For example: f F {} str. format() str >>> who = 'nobody' >>> nationality = 'Spanish' >>> f'{who. title()} expects the {nationality} Inquisition. ' 'Nobody expects the Spanish Inquisition. ' It is also possible to use a multi line f-string: >>> f'''This is a string. on two lines''' 'This is a string\\non two lines' A single opening curly bracket, '{', marks a replacement field that can contain any Python expression: '{' >>> nationality = 'Spanish' >>> f'The {nationality} Inquisition. ' 'The Spanish Inquisition.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 38,
  "start_char": 76700,
  "end_char": 78669,
  "token_count": 475,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.213900"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_038.txt"
}