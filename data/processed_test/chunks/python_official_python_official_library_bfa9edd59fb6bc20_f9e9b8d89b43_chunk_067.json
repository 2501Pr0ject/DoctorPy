{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_067",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "A memoryview can be created from exporters with arbitrary format strings, but some methods (e. g. tolist()) are restricted to native single element formats. struct tolist() Changed in version 3. 3: format 'B' is now handled according to the struct module syntax. This means that memoryview(b'abc')[0] == b'abc'[0] == 97. 'B' memoryview(b'abc')[0] == b'abc'[0] == 97 The size in bytes of each element of the memoryview: >>> import array, struct >>> m = memoryview(array. array('H', [32000, 32001, 32002])) >>> m. itemsize 2 >>> m[0] 32000 >>> struct. calcsize('H') == m. itemsize True An integer indicating how many dimensions of a multi-dimensional array the memory represents. A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array. ndim Changed in version 3. 3: An empty tuple instead of None when ndim = 0. None A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array. ndim Changed in version 3. 3: An empty tuple instead of None when ndim = 0. None Used internally for PIL-style arrays. The value is informational only. A bool indicating whether the memory is C-contiguous. Added in version 3. 3. A bool indicating whether the memory is Fortran contiguous. Added in version 3. 3. A bool indicating whether the memory is contiguous. Added in version 3. 3. ## Set Types — set, frozenset¶ set frozenset A set object is an unordered collection of distinct hashable objects. Common uses include membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference. (For other containers see the built-in dict, list, and tuple classes, and the collections module. ) dict list tuple collections Like other collections, sets support x in set, len(set), and for x in set. Being an unordered collection, sets do not record element position or order of insertion. Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 67,
  "start_char": 136134,
  "end_char": 138171,
  "token_count": 485,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.239564"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_067.txt"
}