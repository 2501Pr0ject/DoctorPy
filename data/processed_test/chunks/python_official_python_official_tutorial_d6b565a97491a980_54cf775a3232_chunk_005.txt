The slice from i to j consists of all characters between the edges labeled i and j, respectively. For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds. For example, the length of word[1:3] is 2. word[1:3] Attempting to use an index that is too large will result in an error: >>> word[42] # the word only has 6 characters Traceback (most recent call last): File "<stdin>", line 1, in <module> IndexError: string index out of range However, out of range slice indexes are handled gracefully when used for slicing: >>> word[4:42] 'on' >>> word[42:] '' Python strings cannot be changed — they are immutable. Therefore, assigning to an indexed position in the string results in an error: >>> word[0] = 'J' Traceback (most recent call last): File "<stdin>", line 1, in <module> TypeError: 'str' object does not support item assignment >>> word[2:] = 'py' Traceback (most recent call last): File "<stdin>", line 1, in <module> TypeError: 'str' object does not support item assignment If you need a different string, you should create a new one: >>> 'J' + word[1:] 'Jython' >>> word[:2] + 'py' 'Pypy' The built-in function len() returns the length of a string: len() >>> s = 'supercalifragilisticexpialidocious' >>> len(s) 34 See also Strings are examples of sequence types, and support the common operations supported by such types. Strings support a large number of methods for basic transformations and searching. String literals that have embedded expressions. Information about string formatting with str. format(). str. format() The old formatting operations invoked when strings are the left operand of the % operator are described in more detail here. % ### 3. 1. 3. Lists¶ Python knows a number of compound data types, used to group together other values. The most versatile is the list, which can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type.