__spam Foo _Foo __Foo _Foo__spam If the class name consists only of underscores, the transformation is the identity, e. g. , the identifier __spam occurring in a class named _ or __ is left as is. If the class name consists only of underscores, the transformation is the identity, e. g. , the identifier __spam occurring in a class named _ or __ is left as is. __spam _ __ ### 6. 2. 2. Literals¶ Python supports string and bytes literals and various numeric literals: literal ::= stringliteral | bytesliteral | integer | floatnumber | imagnumber stringliteral bytesliteral integer floatnumber imagnumber Evaluation of a literal yields an object of the given type (string, bytes, integer, floating-point number, complex number) with the given value. The value may be approximated in the case of floating-point and imaginary (complex) literals. See section Literals for details. All literals correspond to immutable data types, and hence the object’s identity is less important than its value. Multiple evaluations of literals with the same value (either the same occurrence in the program text or a different occurrence) may obtain the same object or a different object with the same value. ### 6. 2. 3. Parenthesized forms¶ A parenthesized form is an optional expression list enclosed in parentheses: parenth_form ::= "(" [starred_expression] ")" starred_expression A parenthesized expression list yields whatever that expression list yields: if the list contains at least one comma, it yields a tuple; otherwise, it yields the single expression that makes up the expression list. An empty pair of parentheses yields an empty tuple object. Since tuples are immutable, the same rules as for literals apply (i. e. , two occurrences of the empty tuple may or may not yield the same object). Note that tuples are not formed by the parentheses, but rather by use of the comma. The exception is the empty tuple, for which parentheses are required — allowing unparenthesized “nothing” in expressions would cause ambiguities and allow common typos to pass uncaught. ### 6. 2. 4.