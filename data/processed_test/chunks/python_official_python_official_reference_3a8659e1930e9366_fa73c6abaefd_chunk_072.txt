def __aiter__(self): return self async def __anext__(self): val = await self. readline() if val == b'': raise StopAsyncIteration return val __aiter__() __aiter__() TypeError __aenter__ __aexit__ async with object __enter__() __exit__() class AsyncContextManager: async def __aenter__(self): await log('entering context') async def __aexit__(self, exc_type, exc, tb): await log('exiting context') numbers. Number numbers. Integral numbers. Real float numbers. Complex complex.