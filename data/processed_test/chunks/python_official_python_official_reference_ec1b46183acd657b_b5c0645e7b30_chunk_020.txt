Function definitionsÂ¶ A function definition defines a user-defined function object (see section The standard type hierarchy): funcdef ::= [decorators] "def" funcname [type_params] "(" [parameter_list] ")" ["->" expression] ":" suite decorators ::= decorator+ decorator ::= "@" assignment_expression NEWLINE parameter_list ::= defparameter ("," defparameter)* "," "/" ["," [parameter_list_no_posonly]] | parameter_list_no_posonly parameter_list_no_posonly ::= defparameter ("," defparameter)* ["," [parameter_list_starargs]] | parameter_list_starargs parameter_list_starargs ::= "*" [star_parameter] ("," defparameter)* ["," [parameter_star_kwargs]] | "*" ("," defparameter)+ ["," [parameter_star_kwargs]] | parameter_star_kwargs parameter_star_kwargs ::= "**" parameter [","] parameter ::= identifier [":" expression] star_parameter ::= identifier [":" ["*"] expression] defparameter ::= parameter ["=" expression] funcname ::= identifier decorators funcname type_params parameter_list expression suite decorator assignment_expression defparameter defparameter parameter_list_no_posonly parameter_list_no_posonly defparameter defparameter parameter_list_starargs parameter_list_starargs star_parameter defparameter parameter_star_kwargs defparameter parameter_star_kwargs parameter_star_kwargs parameter identifier expression identifier expression parameter expression identifier A function definition is an executable statement. Its execution binds the function name in the current local namespace to a function object (a wrapper around the executable code for the function). This function object contains a reference to the current global namespace as the global namespace to be used when the function is called. The function definition does not execute the function body; this gets executed only when the function is called. [4] A function definition may be wrapped by one or more decorator expressions. Decorator expressions are evaluated when the function is defined, in the scope that contains the function definition. The result must be a callable, which is invoked with the function object as the only argument. The returned value is bound to the function name instead of the function object. Multiple decorators are applied in nested fashion. For example, the following code @f1(arg) @f2 def func(): pass is roughly equivalent to def func(): pass func = f1(arg)(f2(func)) except that the original function is not temporarily bound to the name func. func Changed in version 3. 9: Functions may be decorated with any valid assignment_expression. Previously, the grammar was much more restrictive; see PEP 614 for details.