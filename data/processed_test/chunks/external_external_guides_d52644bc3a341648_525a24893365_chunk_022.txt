return handle_value(collection[key]) except KeyError: # Will also catch KeyError raised by handle_value() return key_not_found(key) try # Correct: try: value = collection[key] except KeyError: return key_not_found(key) else: return handle_value(value) # Wrong: try: # Too broad. return handle_value(collection[key]) except KeyError: # Will also catch KeyError raised by handle_value() return key_not_found(key) When a resource is local to a particular section of code, use a with statement to ensure it is cleaned up promptly and reliably after use. A try/finally statement is also acceptable. with Context managers should be invoked through separate functions or methods whenever they do something other than acquire and release resources:# Correct: with conn. begin_transaction(): do_stuff_in_transaction(conn) # Wrong: with conn: do_stuff_in_transaction(conn) The latter example doesnâ€™t provide any information to indicate that the enter and exit methods are doing something other than closing the connection after a transaction. Being explicit is important in this case. # Correct: with conn. begin_transaction(): do_stuff_in_transaction(conn) # Wrong: with conn: do_stuff_in_transaction(conn) The latter example doesnâ€™t provide any information to indicate that the enter and exit methods are doing something other than closing the connection after a transaction. Being explicit is important in this case. __enter__ __exit__ Be consistent in return statements. Either all return statements in a function should return an expression, or none of them should. If any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable):# Correct: def foo(x): if x >= 0: return math. sqrt(x) else: return None def bar(x): if x < 0: return None return math. sqrt(x) # Wrong: def foo(x): if x >= 0: return math. sqrt(x) def bar(x): if x < 0: return return math. sqrt(x) return None # Correct: def foo(x): if x >= 0: return math. sqrt(x) else: return None def bar(x): if x < 0: return None return math. sqrt(x) # Wrong: def foo(x): if x >= 0: return math. sqrt(x) def bar(x): if x < 0: return return math. sqrt(x) Use ''.