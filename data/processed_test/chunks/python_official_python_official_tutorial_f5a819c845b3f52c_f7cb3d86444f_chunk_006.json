{
  "chunk_id": "python_official_python_official_tutorial_f5a819c845b3f52c_f7cb3d86444f_chunk_006",
  "original_doc_id": "python_official_python_official_tutorial_f5a819c845b3f52c_f7cb3d86444f",
  "content": "5) ### 9. 3. 3. Instance Objects¶ Now what can we do with instance objects. The only operations understood by instance objects are attribute references. There are two kinds of valid attribute names: data attributes and methods. data attributes correspond to “instance variables” in Smalltalk, and to “data members” in C++. Data attributes need not be declared; like local variables, they spring into existence when they are first assigned to. For example, if x is the instance of MyClass created above, the following piece of code will print the value 16, without leaving a trace: x MyClass 16 x. counter = 1 while x. counter < 10: x. counter = x. counter * 2 print(x. counter) del x. counter The other kind of instance attribute reference is a method. A method is a function that “belongs to” an object. Valid method names of an instance object depend on its class. By definition, all attributes of a class that are function objects define corresponding methods of its instances. So in our example, x. f is a valid method reference, since MyClass. f is a function, but x. i is not, since MyClass. i is not. But x. f is not the same thing as MyClass. f — it is a method object, not a function object. x. f MyClass. f x. i MyClass. i x. f MyClass. f ### 9. 3. 4. Method Objects¶ Usually, a method is called right after it is bound: x. f() In the MyClass example, this will return the string 'hello world'. However, it is not necessary to call a method right away: x. f is a method object, and can be stored away and called at a later time. For example: MyClass 'hello world' x. f xf = x. f while True: print(xf()) will continue to print hello world until the end of time. hello world What exactly happens when a method is called. You may have noticed that x. f() was called without an argument above, even though the function definition for f() specified an argument. What happened to the argument. Surely Python raises an exception when a function that requires an argument is called without any — even if the argument isn’t actually used… x.",
  "title": "9. Classes.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 6,
  "start_char": 13814,
  "end_char": 15856,
  "token_count": 477,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_f5a819c845b3f52c.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:33.092678"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_f5a819c845b3f52c_f7cb3d86444f_chunk_006.txt"
}