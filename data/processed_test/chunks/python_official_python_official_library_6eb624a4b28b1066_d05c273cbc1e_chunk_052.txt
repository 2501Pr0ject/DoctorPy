For example, if utcoffset() returns timedelta(hours=-3, minutes=-30), %z is replaced with the string '-0330'. utcoffset() ±HHMM[SS[. ffffff]] HH MM SS ffffff ffffff ffffff SS utcoffset() timedelta(hours=-3, minutes=-30) %z '-0330' Changed in version 3. 7: The UTC offset is not restricted to a whole number of minutes. Changed in version 3. 7: When the %z directive is provided to the strptime() method, the UTC offsets can have a colon as a separator between hours, minutes and seconds. For example, '+01:00:00' will be parsed as an offset of one hour. In addition, providing 'Z' is identical to '+00:00'. %z strptime() '+01:00:00' 'Z' '+00:00' %:z Behaves exactly as %z, but has a colon separator added between hours, minutes and seconds. %z %Z In strftime(), %Z is replaced by an empty string if tzname() returns None; otherwise %Z is replaced by the returned value, which must be a string. strftime() %Z tzname() None %Z strptime() only accepts certain values for %Z: strptime() %Z any value in time. tzname for your machine’s locale any value in time. tzname for your machine’s locale time. tzname the hard-coded values UTC and GMT the hard-coded values UTC and GMT UTC GMT So someone living in Japan may have JST, UTC, and GMT as valid values, but probably not EST. It will raise ValueError for invalid values. JST UTC GMT EST ValueError Changed in version 3. 2: When the %z directive is provided to the strptime() method, an aware datetime object will be produced. The tzinfo of the result will be set to a timezone instance. %z strptime() datetime tzinfo timezone When used with the strptime() method, %U and %W are only used in calculations when the day of the week and the calendar year (%Y) are specified. When used with the strptime() method, %U and %W are only used in calculations when the day of the week and the calendar year (%Y) are specified.