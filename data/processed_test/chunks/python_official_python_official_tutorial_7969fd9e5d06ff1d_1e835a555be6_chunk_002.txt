If an exception occurs which does not match the exception named in the except clause, it is passed on to outer try statements; if no handler is found, it is an unhandled exception and execution stops with an error message. try A try statement may have more than one except clause, to specify handlers for different exceptions. At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding try clause, not in other handlers of the same try statement. An except clause may name multiple exceptions as a parenthesized tuple, for example: try try. except (RuntimeError, TypeError, NameError):. pass A class in an except clause matches exceptions which are instances of the class itself or one of its derived classes (but not the other way around — an except clause listing a derived class does not match instances of its base classes). For example, the following code will print B, C, D in that order: except class B(Exception): pass class C(B): pass class D(C): pass for cls in [B, C, D]: try: raise cls() except D: print("D") except C: print("C") except B: print("B") Note that if the except clauses were reversed (with except B first), it would have printed B, B, B — the first matching except clause is triggered. except B When an exception occurs, it may have associated values, also known as the exception’s arguments. The presence and types of the arguments depend on the exception type. The except clause may specify a variable after the exception name. The variable is bound to the exception instance which typically has an args attribute that stores the arguments. For convenience, builtin exception types define str() to print all the arguments without explicitly accessing. args. args __str__(). args >>> try:. raise Exception('spam', 'eggs'). except Exception as inst:. print(type(inst)) # the exception type. print(inst. args) # arguments stored in. args. print(inst) # __str__ allows args to be printed directly,. # but may be overridden in exception subclasses. x, y = inst. args # unpack args. print('x =', x). print('y =', y). <class 'Exception'> ('spam', 'eggs') ('spam', 'eggs') x = spam y = eggs The exception’s str() output is printed as the last part (‘detail’) of the message for unhandled exceptions.