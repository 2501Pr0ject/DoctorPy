{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_050",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "round() math trunc() floor() ceil() __round__() Integral int The built-in function int() falls back to trunc() if neither int() nor index() is defined. int() __trunc__() __int__() __index__() Changed in version 3. 11: The delegation of int() to trunc() is deprecated. int() __trunc__() ### 3. 3. 9. With Statement Context Managers¶ A context manager is an object that defines the runtime context to be established when executing a with statement. The context manager handles the entry into, and the exit from, the desired runtime context for the execution of the block of code. Context managers are normally invoked using the with statement (described in section The with statement), but can also be used by directly invoking their methods. with with Typical uses of context managers include saving and restoring various kinds of global state, locking and unlocking resources, closing opened files, etc. For more information on context managers, see Context Manager Types. The object class itself does not provide the context manager methods. object Enter the runtime context related to this object. The with statement will bind this method’s return value to the target(s) specified in the as clause of the statement, if any. with as Exit the runtime context related to this object. The parameters describe the exception that caused the context to be exited. If the context was exited without an exception, all three arguments will be None. None If an exception is supplied, and the method wishes to suppress the exception (i. e. , prevent it from being propagated), it should return a true value. Otherwise, the exception will be processed normally upon exit from this method. Note that exit() methods should not reraise the passed-in exception; this is the caller’s responsibility. __exit__() See also The specification, background, and examples for the Python with statement. with ### 3. 3. 10. Customizing positional arguments in class pattern matching¶ When using a class name in a pattern, positional arguments in the pattern are not allowed by default, i. e. case MyClass(x, y) is typically invalid without special support in MyClass. To be able to use that kind of pattern, the class needs to define a match_args attribute. case MyClass(x, y) MyClass This class variable can be assigned a tuple of strings.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 50,
  "start_char": 114145,
  "end_char": 116459,
  "token_count": 477,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.747523"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_050.txt"
}