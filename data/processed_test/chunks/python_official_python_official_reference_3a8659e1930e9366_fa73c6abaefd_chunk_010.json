{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_010",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "Such a function, when called, returns an asynchronous iterator object which can be used in an async for statement to execute the body of the function. async def yield async for Calling the asynchronous iterator’s aiterator. anext method will return an awaitable which when awaited will execute until it provides a value using the yield expression. When the function executes an empty return statement or falls off the end, a StopAsyncIteration exception is raised and the asynchronous iterator will have reached the end of the set of values to be yielded. aiterator. __anext__ yield return StopAsyncIteration #### 3. 2. 8. 6. Built-in functions¶ A built-in function object is a wrapper around a C function. Examples of built-in functions are len() and math. sin() (math is a standard built-in module). The number and type of the arguments are determined by the C function. Special read-only attributes: len() math. sin() math doc is the function’s documentation string, or None if unavailable. See function. doc. doc is the function’s documentation string, or None if unavailable. See function. doc. __doc__ None function. __doc__ name is the function’s name. See function. name. name is the function’s name. See function. name. __name__ function. __name__ self is set to None (but see the next item). self is set to None (but see the next item). __self__ None module is the name of the module the function was defined in or None if unavailable. See function. module. module is the name of the module the function was defined in or None if unavailable. See function. module. __module__ None function. __module__ #### 3. 2. 8. 7. Built-in methods¶ This is really a different disguise of a built-in function, this time containing an object passed to the C function as an implicit extra argument. An example of a built-in method is alist. append(), assuming alist is a list object. In this case, the special read-only attribute self is set to the object denoted by alist. (The attribute has the same semantics as it does with other instance methods. ) alist. append() __self__ other instance methods #### 3. 2. 8. 8. Classes¶ Classes are callable.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 10,
  "start_char": 22909,
  "end_char": 25053,
  "token_count": 481,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.702653"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_010.txt"
}