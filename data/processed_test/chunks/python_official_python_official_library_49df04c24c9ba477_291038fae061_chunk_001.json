{
  "chunk_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_001",
  "original_doc_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061",
  "content": "Note The global random number generator and instances of Random are thread-safe. However, in the free-threaded build, concurrent calls to the global generator or to the same instance of Random may encounter contention and poor performance. Consider using separate instances of Random per thread instead. Random Random Random ## Bookkeeping functions¶ Initialize the random number generator. If a is omitted or None, the current system time is used. If randomness sources are provided by the operating system, they are used instead of the system time (see the os. urandom() function for details on availability). None os. urandom() If a is an int, it is used directly. With version 2 (the default), a str, bytes, or bytearray object gets converted to an int and all of its bits are used. str bytes bytearray int With version 1 (provided for reproducing random sequences from older versions of Python), the algorithm for str and bytes generates a narrower range of seeds. str bytes Changed in version 3. 2: Moved to the version 2 scheme which uses all of the bits in a string seed. Changed in version 3. 11: The seed must be one of the following types: None, int, float, str, bytes, or bytearray. None int float str bytes bytearray Return an object capturing the current internal state of the generator. This object can be passed to setstate() to restore the state. setstate() state should have been obtained from a previous call to getstate(), and setstate() restores the internal state of the generator to what it was at the time getstate() was called. getstate() setstate() getstate() ## Functions for bytes¶ Generate n random bytes. This method should not be used for generating security tokens. Use secrets. token_bytes() instead. secrets. token_bytes() Added in version 3. 9. ## Functions for integers¶ Return a randomly selected element from range(start, stop, step). range(start, stop, step) This is roughly equivalent to choice(range(start, stop, step)) but supports arbitrarily large ranges and is optimized for common cases. choice(range(start, stop, step)) The positional argument pattern matches the range() function. range() Keyword arguments should not be used because they can be interpreted in unexpected ways. For example randrange(start=100) is interpreted as randrange(0, 100, 1).",
  "title": "random — Generate pseudo-random numbers.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 1,
  "start_char": 2414,
  "end_char": 4712,
  "token_count": 485,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_49df04c24c9ba477.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.609105"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_001.txt"
}