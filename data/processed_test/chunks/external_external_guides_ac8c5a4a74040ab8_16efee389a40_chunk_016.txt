In complex REs, it becomes difficult to keep track of the group numbers. There are two features which help with this problem. Both of them use a common syntax for regular expression extensions, so we’ll look at that first. Perl 5 is well known for its powerful additions to standard regular expressions. For these new features the Perl developers couldn’t choose new single-keystroke metacharacters or new special sequences beginning with \ without making Perl’s regular expressions confusingly different from standard REs. If they chose & as a new metacharacter, for example, old expressions would be assuming that & was a regular character and wouldn’t have escaped it by writing \& or [&]. \ & & \& [&] The solution chosen by the Perl developers was to use (. ) as the extension syntax. immediately after a parenthesis was a syntax error because the. would have nothing to repeat, so this didn’t introduce any compatibility problems. The characters immediately after the. indicate what extension is being used, so (. =foo) is one thing (a positive lookahead assertion) and (. :foo) is something else (a non-capturing group containing the subexpression foo). (. ). (. =foo) (. :foo) foo Python supports several of Perl’s extensions and adds an extension syntax to Perl’s extension syntax. If the first character after the question mark is a P, you know that it’s an extension that’s specific to Python. P Now that we’ve looked at the general extension syntax, we can return to the features that simplify working with groups in complex REs. Sometimes you’ll want to use a group to denote a part of a regular expression, but aren’t interested in retrieving the group’s contents. You can make this fact explicit by using a non-capturing group: (. :. ), where you can replace the. with any other regular expression. (. :. ). >>> m = re. match("([abc])+", "abc") >>> m. groups() ('c',) >>> m = re. match("(. :[abc])+", "abc") >>> m. groups() () Except for the fact that you can’t retrieve the contents of what the group matched, a non-capturing group behaves exactly the same as a capturing group; you can put anything inside it, repeat it with a repetition metacharacter such as , and nest it within other groups (capturing or non-capturing). (. :.