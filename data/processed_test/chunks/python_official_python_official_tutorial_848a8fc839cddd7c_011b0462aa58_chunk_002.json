{
  "chunk_id": "python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58_chunk_002",
  "original_doc_id": "python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58",
  "content": "We have seen that the for statement is such a construct, while an example of a function that takes an iterable is sum(): for sum() >>> sum(range(4)) # 0 + 1 + 2 + 3 6 Later we will see more functions that return iterables and take iterables as arguments. In chapter Data Structures, we will discuss in more detail about list(). list() ## 4. 4. break and continue Statements¶ break continue The break statement breaks out of the innermost enclosing for or while loop: break for while >>> for n in range(2, 10):. for x in range(2, n):. if n % x == 0:. print(f\"{n} equals {x} * {n//x}\"). break. 4 equals 2 * 2 6 equals 2 * 3 8 equals 2 * 4 9 equals 3 * 3 The continue statement continues with the next iteration of the loop: continue >>> for num in range(2, 10):. if num % 2 == 0:. print(f\"Found an even number {num}\"). continue. print(f\"Found an odd number {num}\"). Found an even number 2 Found an odd number 3 Found an even number 4 Found an odd number 5 Found an even number 6 Found an odd number 7 Found an even number 8 Found an odd number 9 ## 4. 5. else Clauses on Loops¶ else In a for or while loop the break statement may be paired with an else clause. If the loop finishes without executing the break, the else clause executes. for while break else break else In a for loop, the else clause is executed after the loop finishes its final iteration, that is, if no break occurred. for else In a while loop, it’s executed after the loop’s condition becomes false. while In either kind of loop, the else clause is not executed if the loop was terminated by a break. Of course, other ways of ending the loop early, such as a return or a raised exception, will also skip execution of the else clause. else break return else This is exemplified in the following for loop, which searches for prime numbers: for >>> for n in range(2, 10):. for x in range(2, n):. if n % x == 0:.",
  "title": "4. More Control Flow Tools.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 2,
  "start_char": 3729,
  "end_char": 5605,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_848a8fc839cddd7c.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:37.606468"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58_chunk_002.txt"
}