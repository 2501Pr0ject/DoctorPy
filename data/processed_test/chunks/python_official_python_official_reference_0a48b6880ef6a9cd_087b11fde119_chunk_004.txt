async def async for async def for async for for async for await If a comprehension contains async for clauses, or if it contains await expressions or other asynchronous comprehensions anywhere except the iterable expression in the leftmost for clause, it is called an asynchronous comprehension. An asynchronous comprehension may suspend the execution of the coroutine function in which it appears. See also PEP 530. async for await for Added in version 3. 6: Asynchronous comprehensions were introduced. Changed in version 3. 8: yield and yield from prohibited in the implicitly nested scope. yield yield from Changed in version 3. 11: Asynchronous comprehensions are now allowed inside comprehensions in asynchronous functions. Outer comprehensions implicitly become asynchronous. ### 6. 2. 5. List displays¶ A list display is a possibly empty series of expressions enclosed in square brackets: list_display ::= "[" [flexible_expression_list | comprehension] "]" flexible_expression_list comprehension A list display yields a new list object, the contents being specified by either a list of expressions or a comprehension. When a comma-separated list of expressions is supplied, its elements are evaluated from left to right and placed into the list object in that order. When a comprehension is supplied, the list is constructed from the elements resulting from the comprehension. ### 6. 2. 6. Set displays¶ A set display is denoted by curly braces and distinguishable from dictionary displays by the lack of colons separating keys and values: set_display ::= "{" (flexible_expression_list | comprehension) "}" flexible_expression_list comprehension A set display yields a new mutable set object, the contents being specified by either a sequence of expressions or a comprehension. When a comma-separated list of expressions is supplied, its elements are evaluated from left to right and added to the set object. When a comprehension is supplied, the set is constructed from the elements resulting from the comprehension. An empty set cannot be constructed with {}; this literal constructs an empty dictionary. {} ### 6. 2. 7.