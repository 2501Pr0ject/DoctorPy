compile('section{ ( [^}]* ) }', re. VERBOSE) >>> p. sub(r'subsection{\1}','section{First} section{second}') 'subsection{First} subsection{second}' (. P<name>. ) \g<name> name \g<number> \g<2> \2 \g<2>0 \20 '0' >>> p = re. compile('section{ (. P<name> [^}]* ) }', re. VERBOSE) >>> p. sub(r'subsection{\1}','section{First}') 'subsection{First}' >>> p. sub(r'subsection{\g<1>}','section{First}') 'subsection{First}' >>> p. sub(r'subsection{\g<name>}','section{First}') 'subsection{First}' >>> def hexrepl(match):. "Return the hex string for a decimal number". value = int(match. group()). return hex(value). >>> p = re. compile(r'\d+') >>> p. sub(hexrepl, 'Call 65490 for printing, 49152 for user code. ') 'Call 0xffd2 for printing, 0xc000 for user code. ' re. sub() sub("(. i)b+", "x", "bbbb BBBB") 'x x' re re IGNORECASE word deed re. sub() replace() replace() word swordfish sdeedfish word \bword\b word replace() re. sub('\n', ' ', S) translate() re match() search() match() match() >>> print(re. match('super', 'superstition'). span()) (0, 5) >>> print(re. match('super', 'insuperable')) None search() >>> print(re. search('super', 'superstition'). span()) (0, 5) >>> print(re. search('super', 'insuperable'). span()) (2, 7) re. match(). * re. search() Crow 'C' 'C'. * re. search() a*. * >>> s = '<html><head><title>Title</title>' >>> len(s) 32 >>> print(re. match('<. *>', s). span()) (0, 32) >>> print(re. match('<. *>', s). group()) <html><head><title>Title</title> '<' '<html>'.