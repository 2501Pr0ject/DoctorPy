{
  "chunk_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_031",
  "original_doc_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40",
  "content": "group() 'the the' \\ & & \\& [&] (. ). (. =foo) (. :foo) foo P (. :. ). >>> m = re. match(\"([abc])+\", \"abc\") >>> m. groups() ('c',) >>> m = re. match(\"(. :[abc])+\", \"abc\") >>> m. groups() () * (. :. ) (. P<name>. ) >>> p = re. compile(r'(. P<word>\\b\\w+\\b)') >>> m = p. search( '(((( Lots of punctuation )))' ) >>> m. group('word') 'Lots' >>> m. group(1) 'Lots' groupdict() >>> m = re. match(r'(. P<first>\\w+) (. P<last>\\w+)', 'Jane Doe') >>> m. groupdict() {'first': 'Jane', 'last': 'Doe'} imaplib InternalDate = re. compile(r'INTERNALDATE \"' r'(. P<day>[ 123][0-9])-(. P<mon>[A-Z][a-z][a-z])-' r'(. P<year>[0-9][0-9][0-9][0-9])' r' (. P<hour>[0-9][0-9]):(. P<min>[0-9][0-9]):(. P<sec>[0-9][0-9])' r' (. P<zonen>[-+])(. P<zoneh>[0-9][0-9])(. P<zonem>[0-9][0-9])' r'\"') m. group('zonem') (. )\\1 (. P=name) \\b(\\w+)\\s+\\1\\b \\b(. P<word>\\w+)\\s+(. P=word)\\b >>> p = re. compile(r'\\b(. P<word>\\w+)\\s+(. P=word)\\b') >>> p. search('Paris in the the spring'). group() 'the the' (. =. ). (. ). news. rc news rc. *[. ]. *$. $ foo. bar autoexec. bat sendmail. cf printers. conf bat. *[. ][^b]. *$ bat b foo. bar. *. $ b a t foo. bar autoexec. bat sendmail. cf. *. $ sendmail. cf bat exe. *.",
  "title": "Regular Expression HOWTO.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 31,
  "start_char": 60635,
  "end_char": 61810,
  "token_count": 499,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_ac8c5a4a74040ab8.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:41.056804"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_031.txt"
}