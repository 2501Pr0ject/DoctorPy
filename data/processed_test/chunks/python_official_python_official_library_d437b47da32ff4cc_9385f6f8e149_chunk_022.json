{
  "chunk_id": "python_official_python_official_library_d437b47da32ff4cc_9385f6f8e149_chunk_022",
  "original_doc_id": "python_official_python_official_library_d437b47da32ff4cc_9385f6f8e149",
  "content": "Y/: Standard library (like os. py of the os module) /usr/lib64/pythonX. Y/: Standard library (like os. py of the os module) /usr/lib64/pythonX. Y/ os. py os /usr/lib64/pythonX. Y/lib-dynload/: C extension modules of the standard library (like the errno module, the exact filename is platform specific) /usr/lib64/pythonX. Y/lib-dynload/: C extension modules of the standard library (like the errno module, the exact filename is platform specific) /usr/lib64/pythonX. Y/lib-dynload/ errno /usr/lib/pythonX. Y/site-packages/ (always use lib, not sys. platlibdir): Third-party modules /usr/lib/pythonX. Y/site-packages/ (always use lib, not sys. platlibdir): Third-party modules /usr/lib/pythonX. Y/site-packages/ lib sys. platlibdir /usr/lib64/pythonX. Y/site-packages/: C extension modules of third-party packages /usr/lib64/pythonX. Y/site-packages/: C extension modules of third-party packages /usr/lib64/pythonX. Y/site-packages/ Added in version 3. 9. A string giving the site-specific directory prefix where the platform independent Python files are installed; on Unix, the default is /usr/local. This can be set at build time with the --prefix argument to the configure script. See Installation paths for derived paths. /usr/local --prefix Note If a virtual environment is in effect, this value will be changed in site. py to point to the virtual environment. The value for the Python installation will still be available, via base_prefix. site. py base_prefix Strings specifying the primary and secondary prompt of the interpreter. These are only defined if the interpreter is in interactive mode. Their initial values in this case are '>>> ' and '. '. If a non-string object is assigned to either variable, its str() is re-evaluated each time the interpreter prepares to read a new interactive command; this can be used to implement a dynamic prompt. '>>> ' '. ' str() Set the flags used by the interpreter for dlopen() calls, such as when the interpreter loads extension modules. Among other things, this will enable a lazy resolving of symbols when importing a module, if called as sys. setdlopenflags(0). To share symbols across extension modules, call as sys.",
  "title": "sys â€” System-specific parameters and functions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 22,
  "start_char": 48540,
  "end_char": 50710,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_d437b47da32ff4cc.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:04.438385"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_d437b47da32ff4cc_9385f6f8e149_chunk_022.txt"
}