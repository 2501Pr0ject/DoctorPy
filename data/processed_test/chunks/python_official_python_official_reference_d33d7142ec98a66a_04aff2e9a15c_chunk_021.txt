__path__ sys. path_hooks sys. modules sys. meta_path find_spec() None sys. meta_path ModuleNotFoundError find_spec() foo. bar. baz None __path__ __path__ ModuleNotFoundError foo. bar. baz mpf. find_spec("foo", None, None) mpf foo foo. bar mpf. find_spec("foo. bar", foo. __path__, None) foo. bar mpf. find_spec("foo. bar. baz", foo. bar. __path__, None) None None sys. meta_path find_spec() find_module() find_spec() find_module() ImportWarning find_module() find_spec() module = None if spec. loader is not None and hasattr(spec. loader, 'create_module'): # It is assumed 'exec_module' will also be defined on the loader. module = spec. loader. create_module(spec) if module is None: module = ModuleType(spec. name) # The import-related module attributes get set here: _init_module_attrs(spec, module) if spec. loader is None: # unsupported raise ImportError if spec. origin is None and spec. submodule_search_locations is not None: # namespace package sys. modules[spec. name] = module elif not hasattr(spec. loader, 'exec_module'): module = spec. loader. load_module(spec. name) else: sys. modules[spec. name] = module try: spec. loader. exec_module(module) except BaseException: try: del sys. modules[spec. name] except KeyError: pass raise return sys. modules[spec. name] sys. modules sys. modules sys. modules sys. modules sys. modules sys. modules importlib. abc. Loader. load_module() importlib. abc. Loader. exec_module() exec_module() module. __dict__ ImportError exec_module() find_spec() self create_module() create_module() None create_module() load_module() exec_module() load_module() exec_module() load_module() exec_module() load_module() sys. modules importlib. reload() sys. modules sys. modules sys. modules sys. modules DeprecationWarning exec_module() create_module() ImportError exec_module() create_module() load_module() ImportWarning importlib import import-from __import__() spam foo spam. foo spam foo spam/ __init__. py foo. py spam/__init__. py from. foo import Foo foo Foo spam >>> import spam >>> spam. foo <module 'spam.