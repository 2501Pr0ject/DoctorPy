startswith() and ''. endswith() instead of string slicing to check for prefixes or suffixes. startswith() and endswith() are cleaner and less error prone: # Correct: if foo. startswith('bar'): # Wrong: if foo[:3] == 'bar': ''. startswith() ''. endswith() startswith() and endswith() are cleaner and less error prone: # Correct: if foo. startswith('bar'): # Wrong: if foo[:3] == 'bar': Object type comparisons should always use isinstance() instead of comparing types directly:# Correct: if isinstance(obj, int): # Wrong: if type(obj) is type(1): # Correct: if isinstance(obj, int): # Wrong: if type(obj) is type(1): For sequences, (strings, lists, tuples), use the fact that empty sequences are false:# Correct: if not seq: if seq: # Wrong: if len(seq): if not len(seq): # Correct: if not seq: if seq: # Wrong: if len(seq): if not len(seq): Don’t write string literals that rely on significant trailing whitespace. Such trailing whitespace is visually indistinguishable and some editors (or more recently, reindent. py) will trim them. Don’t compare boolean values to True or False using ==:# Correct: if greeting: # Wrong: if greeting == True: Worse: # Wrong: if greeting is True: == # Correct: if greeting: # Wrong: if greeting == True: Worse: # Wrong: if greeting is True: Use of the flow control statements return/break/continue within the finally suite of a try. finally, where the flow control statement would jump outside the finally suite, is discouraged. This is because such statements will implicitly cancel any active exception that is propagating through the finally suite:# Wrong: def foo(): try: 1 / 0 finally: return 42 return break continue try. finally # Wrong: def foo(): try: 1 / 0 finally: return 42 ### Function Annotations With the acceptance of PEP 484, the style rules for function annotations have changed. Function annotations should use PEP 484 syntax (there are some formatting recommendations for annotations in the previous section). The experimentation with annotation styles that was recommended previously in this PEP is no longer encouraged. However, outside the stdlib, experiments within the rules of PEP 484 are now encouraged.