{
  "chunk_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_037",
  "original_doc_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e",
  "content": "utcoffset() NotImplementedError Changed in version 3. 7: The UTC offset is not restricted to a whole number of minutes. Return the daylight saving time (DST) adjustment, as a timedelta object or None if DST information isn’t known. timedelta None Return timedelta(0) if DST is not in effect. If DST is in effect, return the offset as a timedelta object (see utcoffset() for details). Note that DST offset, if applicable, has already been added to the UTC offset returned by utcoffset(), so there’s no need to consult dst() unless you’re interested in obtaining DST info separately. For example, datetime. timetuple() calls its tzinfo attribute’s dst() method to determine how the tm_isdst flag should be set, and tzinfo. fromutc() calls dst() to account for DST changes when crossing time zones. timedelta(0) timedelta utcoffset() utcoffset() dst() datetime. timetuple() tzinfo dst() tm_isdst tzinfo. fromutc() dst() An instance tz of a tzinfo subclass that models both standard and daylight times must be consistent in this sense: tzinfo tz. utcoffset(dt) - tz. dst(dt) tz. utcoffset(dt) - tz. dst(dt) must return the same result for every datetime dt with dt. tzinfo == tz. For sane tzinfo subclasses, this expression yields the time zone’s “standard offset”, which should not depend on the date or the time, but only on geographic location. The implementation of datetime. astimezone() relies on this, but cannot detect violations; it’s the programmer’s responsibility to ensure it. If a tzinfo subclass cannot guarantee this, it may be able to override the default implementation of tzinfo. fromutc() to work correctly with astimezone() regardless. datetime dt. tzinfo == tz tzinfo datetime. astimezone() tzinfo tzinfo. fromutc() astimezone() Most implementations of dst() will probably look like one of these two: dst() def dst(self, dt): # a fixed-offset class: doesn't account for DST return timedelta(0) or: def dst(self, dt): # Code to set dston and dstoff to the time zone's DST # transition times based on the input dt. year, and expressed # in standard local time. if dston <= dt.",
  "title": "datetime — Basic date and time types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 37,
  "start_char": 71571,
  "end_char": 73663,
  "token_count": 491,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_6eb624a4b28b1066.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:01.414529"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_037.txt"
}