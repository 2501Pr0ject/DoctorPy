The contained pattern must only match strings of some fixed length, meaning that abc or a|b are allowed, but a and a{3,4} are not. Note that patterns which start with positive lookbehind assertions will not match at the beginning of the string being searched; you will most likely want to use the search() function rather than the match() function:. (. <=abc)def 'abcdef' abc a|b a* a{3,4} search() match() >>> import re >>> m = re. search('(. <=abc)def', 'abcdef') >>> m. group(0) 'def' This example looks for a word following a hyphen: >>> m = re. search(r'(. <=-)\w+', 'spam-egg') >>> m. group(0) 'egg' Changed in version 3. 5: Added support for group references of fixed length. (. <. ) Matches if the current position in the string is not preceded by a match for. This is called a negative lookbehind assertion. Similar to positive lookbehind assertions, the contained pattern must only match strings of some fixed length. Patterns which start with negative lookbehind assertions may match at the beginning of the string being searched. (. (id/name)yes-pattern|no-pattern) Will try to match with yes-pattern if the group with given id or name exists, and with no-pattern if it doesnâ€™t. no-pattern is optional and can be omitted. For example, (). (\w+@\w+(. :46\w+)+)(. (1)|$) is a poor email matching pattern, which will match with 'user@host. com' as well as 'user@host. com', but not with '<user@host. com' nor 'user@host. com>'. yes-pattern no-pattern no-pattern (<). (\w+@\w+(. :\. \w+)+)(. (1)>|$) '<user@host. com>' 'user@host. com' '<user@host. com' 'user@host. com>' Changed in version 3. 12: Group id can only contain ASCII digits. In bytes patterns, group name can only contain bytes in the ASCII range (b'\x00'-b'\x7f'). bytes b'\x00' b'\x7f' The special sequences consist of '\' and a character from the list below.