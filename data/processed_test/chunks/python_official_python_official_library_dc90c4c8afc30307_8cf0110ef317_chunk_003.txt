0 lcm() 1 Added in version 3. 9. Return the number of ways to choose k items from n items without repetition and with order. Evaluates to n. / (n - k). when k <= n and evaluates to zero when k > n. n. / (n - k). k <= n k > n If k is not specified or is None, then k defaults to n and the function returns n. None n. Raises TypeError if either of the arguments are not integers. Raises ValueError if either of the arguments are negative. TypeError ValueError Added in version 3. 8. ## Floating point arithmeticÂ¶ Return the ceiling of x, the smallest integer greater than or equal to x. If x is not a float, delegates to x. ceil, which should return an Integral value. x. __ceil__ Integral Return the absolute value of x. Return the floor of x, the largest integer less than or equal to x. If x is not a float, delegates to x. floor, which should return an Integral value. x. __floor__ Integral Fused multiply-add operation. Return (x * y) + z, computed as though with infinite precision and range followed by a single round to the float format. This operation often provides better accuracy than the direct expression (x * y) + z. (x * y) + z float (x * y) + z This function follows the specification of the fusedMultiplyAdd operation described in the IEEE 754 standard. The standard leaves one case implementation-defined, namely the result of fma(0, inf, nan) and fma(inf, 0, nan). In these cases, math. fma returns a NaN, and does not raise any exception. fma(0, inf, nan) fma(inf, 0, nan) math. fma Added in version 3. 13. Return the floating-point remainder of x / y, as defined by the platform C library function fmod(x, y). Note that the Python expression x % y may not return the same result. The intent of the C standard is that fmod(x, y) be exactly (mathematically; to infinite precision) equal to x - ny for some integer n such that the result has the same sign as x and magnitude less than abs(y).