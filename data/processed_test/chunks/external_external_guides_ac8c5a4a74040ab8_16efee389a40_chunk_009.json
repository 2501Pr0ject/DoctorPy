{
  "chunk_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_009",
  "original_doc_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40",
  "content": "These functions take the same arguments as the corresponding pattern method with the RE string added as the first argument, and still return either None or a match object instance. re match() search() findall() sub() None >>> print(re. match(r'From\\s+', 'Fromage amk')) None >>> re. match(r'From\\s+', 'From amk Thu May 14 19:12:10 1998') <re. Match object; span=(0, 5), match='From '> Under the hood, these functions simply create a pattern object for you and call the appropriate method on it. They also store the compiled object in a cache, so future calls using the same RE won’t need to parse the pattern again and again. Should you use these module-level functions, or should you get the pattern and call its methods yourself. If you’re accessing a regex within a loop, pre-compiling it will save a few function calls. Outside of loops, there’s not much difference thanks to the internal cache. ### Compilation Flags¶ Compilation flags let you modify some aspects of how regular expressions work. Flags are available in the re module under two names, a long name such as IGNORECASE and a short, one-letter form such as I. (If you’re familiar with Perl’s pattern modifiers, the one-letter forms use the same letters; the short form of re. VERBOSE is re. X, for example. ) Multiple flags can be specified by bitwise OR-ing them; re. I | re. M sets both the I and M flags, for example. re IGNORECASE I re. VERBOSE re. X re. I | re. M I M Here’s a table of the available flags, followed by a more detailed explanation of each one. Flag Meaning ASCII, A ASCII A Makes several escapes like \\w, \\b, \\s and \\d match only on ASCII characters with the respective property. \\w \\b \\s \\d DOTALL, S DOTALL S Make. match any character, including newlines. IGNORECASE, I IGNORECASE I Do case-insensitive matches. LOCALE, L LOCALE L Do a locale-aware match. MULTILINE, M MULTILINE M Multi-line matching, affecting ^ and $. ^ $ VERBOSE, X (for ‘extended’) VERBOSE X Enable verbose REs, which can be organized more cleanly and understandably. Perform case-insensitive matching; character class and literal strings will match letters by ignoring case.",
  "title": "Regular Expression HOWTO.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 9,
  "start_char": 18558,
  "end_char": 20694,
  "token_count": 500,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_ac8c5a4a74040ab8.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:41.037922"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_009.txt"
}