{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_021",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "clear() and copy() are included for consistency with the interfaces of mutable containers that don’t support slicing operations (such as dict and set). copy() is not part of the collections. abc. MutableSequence ABC, but most concrete mutable sequence classes provide it. clear() copy() dict set copy() collections. abc. MutableSequence Added in version 3. 3: clear() and copy() methods. clear() copy() The value n is an integer, or an object implementing index(). Zero and negative values of n clear the sequence. Items in the sequence are not copied; they are referenced multiple times, as explained for s * n under Common Sequence Operations. The value n is an integer, or an object implementing index(). Zero and negative values of n clear the sequence. Items in the sequence are not copied; they are referenced multiple times, as explained for s * n under Common Sequence Operations. __index__() s * n ### Lists¶ Lists are mutable sequences, typically used to store collections of homogeneous items (where the precise degree of similarity will vary by application). Lists may be constructed in several ways: Using a pair of square brackets to denote the empty list: [] Using a pair of square brackets to denote the empty list: [] [] Using square brackets, separating items with commas: [a], [a, b, c] Using square brackets, separating items with commas: [a], [a, b, c] [a] [a, b, c] Using a list comprehension: [x for x in iterable] Using a list comprehension: [x for x in iterable] [x for x in iterable] Using the type constructor: list() or list(iterable) Using the type constructor: list() or list(iterable) list() list(iterable) The constructor builds a list whose items are the same and in the same order as iterable’s items. iterable may be either a sequence, a container that supports iteration, or an iterator object. If iterable is already a list, a copy is made and returned, similar to iterable[:]. For example, list('abc') returns ['a', 'b', 'c'] and list( (1, 2, 3) ) returns [1, 2, 3]. If no argument is given, the constructor creates a new empty list, [].",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 21,
  "start_char": 41428,
  "end_char": 43503,
  "token_count": 472,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.198582"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_021.txt"
}