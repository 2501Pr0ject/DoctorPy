{
  "chunk_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_004",
  "original_doc_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7",
  "content": "When the object is no longer needed, it is automatically removed from a weakref table and a callback is triggered for weakref objects. Typical applications include caching objects that are expensive to create: weakref >>> import weakref, gc >>> class A:. def __init__(self, value):. self. value = value. def __repr__(self):. return str(self. value). >>> a = A(10) # create a reference >>> d = weakref. WeakValueDictionary() >>> d['primary'] = a # does not create a reference >>> d['primary'] # fetch the object if it is still alive 10 >>> del a # remove the one reference >>> gc. collect() # run garbage collection right away 0 >>> d['primary'] # entry was automatically removed Traceback (most recent call last): File \"<stdin>\", line 1, in <module> d['primary'] # entry was automatically removed File \"C:/python313/lib/weakref. py\", line 46, in __getitem__ o = self. data[key]() KeyError: 'primary' ## 11. 7. Tools for Working with Lists¶ Many data structure needs can be met with the built-in list type. However, sometimes there is a need for alternative implementations with different performance trade-offs. The array module provides an array object that is like a list that stores only homogeneous data and stores it more compactly. The following example shows an array of numbers stored as two byte unsigned binary numbers (typecode \"H\") rather than the usual 16 bytes per entry for regular lists of Python int objects: array array \"H\" >>> from array import array >>> a = array('H', [4000, 10, 700, 22222]) >>> sum(a) 26932 >>> a[1:3] array('H', [10, 700]) The collections module provides a deque object that is like a list with faster appends and pops from the left side but slower lookups in the middle. These objects are well suited for implementing queues and breadth first tree searches: collections deque >>> from collections import deque >>> d = deque([\"task1\", \"task2\", \"task3\"]) >>> d. append(\"task4\") >>> print(\"Handling\", d. popleft()) Handling task1 unsearched = deque([starting_node]) def breadth_first_search(unsearched): node = unsearched.",
  "title": "11. Brief Tour of the Standard Library — Part II.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 4,
  "start_char": 8853,
  "end_char": 10913,
  "token_count": 492,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_df4c6c63651fc819.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.712198"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_004.txt"
}