The message is actually a format string, which may contain the standard string substitution syntax of %s, %d, %f, and so on. The rest of their arguments is a list of objects that correspond with the substitution fields in the message. With regard to kwargs, the logging methods care only about a keyword of exc_info and use it to determine whether to log exception information. Logger. debug(), Logger. info(), Logger. warning(), Logger. error(), and Logger. critical() all create log records with a message and a level that corresponds to their respective method names. The message is actually a format string, which may contain the standard string substitution syntax of %s, %d, %f, and so on. The rest of their arguments is a list of objects that correspond with the substitution fields in the message. With regard to kwargs, the logging methods care only about a keyword of exc_info and use it to determine whether to log exception information. Logger. debug() Logger. info() Logger. warning() Logger. error() Logger. critical() %s %d %f **kwargs exc_info Logger. exception() creates a log message similar to Logger. error(). The difference is that Logger. exception() dumps a stack trace along with it. Call this method only from an exception handler. Logger. exception() creates a log message similar to Logger. error(). The difference is that Logger. exception() dumps a stack trace along with it. Call this method only from an exception handler. Logger. exception() Logger. error() Logger. exception() Logger. log() takes a log level as an explicit argument. This is a little more verbose for logging messages than using the log level convenience methods listed above, but this is how to log at custom log levels. Logger. log() takes a log level as an explicit argument. This is a little more verbose for logging messages than using the log level convenience methods listed above, but this is how to log at custom log levels. Logger. log() getLogger() returns a reference to a logger instance with the specified name if it is provided, or root if not. The names are period-separated hierarchical structures. Multiple calls to getLogger() with the same name will return a reference to the same logger object. Loggers that are further down in the hierarchical list are children of loggers higher up in the list. For example, given a logger with a name of foo, loggers with names of foo. bar, foo. bar.