sqrt(sum(x**2 for x in coordinates)) For a two dimensional point (x, y), this is equivalent to computing the hypotenuse of a right triangle using the Pythagorean theorem, sqrt(xx + yy). (x, y) sqrt(x*x + y*y) Changed in version 3. 8: Added support for n-dimensional points. Formerly, only the two dimensional case was supported. Changed in version 3. 10: Improved the algorithm’s accuracy so that the maximum error is under 1 ulp (unit in the last place). More typically, the result is almost always correctly rounded to within 1/2 ulp. Calculate the product of all the elements in the input iterable. The default start value for the product is 1. 1 When the iterable is empty, return the start value. This function is intended specifically for use with numeric values and may reject non-numeric types. Added in version 3. 8. Return the sum of products of values from two iterables p and q. Raises ValueError if the inputs do not have the same length. ValueError Roughly equivalent to: sum(itertools. starmap(operator. mul, zip(p, q, strict=True))) For float and mixed int/float inputs, the intermediate products and sums are computed with extended precision. Added in version 3. 12. ## Angular conversion¶ Convert angle x from radians to degrees. Convert angle x from degrees to radians. ## Trigonometric functions¶ Return the arc cosine of x, in radians. The result is between 0 and pi. 0 pi Return the arc sine of x, in radians. The result is between -pi/2 and pi/2. -pi/2 pi/2 Return the arc tangent of x, in radians. The result is between -pi/2 and pi/2. -pi/2 pi/2 Return atan(y / x), in radians. The result is between -pi and pi. The vector in the plane from the origin to point (x, y) makes this angle with the positive X axis. The point of atan2() is that the signs of both inputs are known to it, so it can compute the correct quadrant for the angle. For example, atan(1) and atan2(1, 1) are both pi/4, but atan2(-1, -1) is -3*pi/4.