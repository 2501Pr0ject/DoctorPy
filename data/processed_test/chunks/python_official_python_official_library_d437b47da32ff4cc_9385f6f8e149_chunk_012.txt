Get the filesystem encoding: the encoding used with the filesystem error handler to convert between Unicode filenames and bytes filenames. The filesystem error handler is returned from getfilesystemencodeerrors(). getfilesystemencodeerrors() For best compatibility, str should be used for filenames in all cases, although representing filenames as bytes is also supported. Functions accepting or returning filenames should support either str or bytes and internally convert to the systemâ€™s preferred representation. os. fsencode() and os. fsdecode() should be used to ensure that the correct encoding and errors mode are used. os. fsencode() os. fsdecode() The filesystem encoding and error handler are configured at Python startup by the PyConfig_Read() function: see filesystem_encoding and filesystem_errors members of PyConfig. PyConfig_Read() filesystem_encoding filesystem_errors PyConfig Changed in version 3. 2: getfilesystemencoding() result cannot be None anymore. getfilesystemencoding() None Changed in version 3. 6: Windows is no longer guaranteed to return 'mbcs'. See PEP 529 and _enablelegacywindowsfsencoding() for more information. 'mbcs' _enablelegacywindowsfsencoding() Changed in version 3. 7: Return 'utf-8' if the Python UTF-8 Mode is enabled. 'utf-8' Get the filesystem error handler: the error handler used with the filesystem encoding to convert between Unicode filenames and bytes filenames. The filesystem encoding is returned from getfilesystemencoding(). getfilesystemencoding() os. fsencode() and os. fsdecode() should be used to ensure that the correct encoding and errors mode are used. os. fsencode() os. fsdecode() The filesystem encoding and error handler are configured at Python startup by the PyConfig_Read() function: see filesystem_encoding and filesystem_errors members of PyConfig. PyConfig_Read() filesystem_encoding filesystem_errors PyConfig Added in version 3. 6. Returns the current value for the integer string conversion length limitation. See also set_int_max_str_digits(). set_int_max_str_digits() Added in version 3. 11. Return the reference count of the object. The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to getrefcount(). getrefcount() Note that the returned value may not actually reflect how many references to the object are actually held. For example, some objects are immortal and have a very high refcount that does not reflect the actual number of references.