staticmethod() Changed in version 3. 9: Class methods can now wrap other descriptors such as property(). property() Changed in version 3. 10: Class methods now inherit the method attributes (module, name, qualname, doc and annotations) and have a new wrapped attribute. __module__ __name__ __qualname__ __doc__ __annotations__ __wrapped__ Deprecated since version 3. 11, removed in version 3. 13: Class methods can no longer wrap other descriptors such as property(). property() Compile the source into a code or AST object. Code objects can be executed by exec() or eval(). source can either be a normal string, a byte string, or an AST object. Refer to the ast module documentation for information on how to work with AST objects. exec() eval() ast The filename argument should give the file from which the code was read; pass some recognizable value if it wasn’t read from a file ('' is commonly used). '<string>' The mode argument specifies what kind of code must be compiled; it can be 'exec' if source consists of a sequence of statements, 'eval' if it consists of a single expression, or 'single' if it consists of a single interactive statement (in the latter case, expression statements that evaluate to something other than None will be printed). 'exec' 'eval' 'single' None The optional arguments flags and dont_inherit control which compiler options should be activated and which future features should be allowed. If neither is present (or both are zero) the code is compiled with the same flags that affect the code that is calling compile(). If the flags argument is given and dont_inherit is not (or is zero) then the compiler options and the future statements specified by the flags argument are used in addition to those that would be used anyway. If dont_inherit is a non-zero integer then the flags argument is it – the flags (future features and compiler options) in the surrounding code are ignored. compile() Compiler options and future statements are specified by bits which can be bitwise ORed together to specify multiple options. The bitfield required to specify a given future feature can be found as the compiler_flag attribute on the Feature instance in the __future__ module. Compiler flags can be found in ast module, with PyCF prefix.