This can be done by simply passing the dict and using square brackets '[]' to access the keys. '[]' >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678} >>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '. 'Dcab: {0[Dcab]:d}'. format(table)) Jack: 4098; Sjoerd: 4127; Dcab: 8637678 This could also be done by passing the table dictionary as keyword arguments with the ** notation. table ** >>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678} >>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'. format(**table)) Jack: 4098; Sjoerd: 4127; Dcab: 8637678 This is particularly useful in combination with the built-in function vars(), which returns a dictionary containing all local variables: vars() >>> table = {k: str(v) for k, v in vars(). items()} >>> message = " ". join([f'{k}: ' + '{' + k +'};' for k in table. keys()]) >>> print(message. format(**table)) __name__: __main__; __doc__: None; __package__: None; __loader__:. As an example, the following lines produce a tidily aligned set of columns giving integers and their squares and cubes: >>> for x in range(1, 11):. print('{0:2d} {1:3d} {2:4d}'. format(x, x*x, x*x*x)). 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 For a complete overview of string formatting with str. format(), see Format String Syntax. str. format() ### 7. 1. 3. Manual String Formatting¶ Here’s the same table of squares and cubes, formatted manually: >>> for x in range(1, 11):. print(repr(x).