C:\some ame >>> print(r'C:\some\name') # note the r before the quote C:\some\name There is one subtle aspect to raw strings: a raw string may not end in an odd number of \ characters; see the FAQ entry for more information and workarounds. \ String literals can span multiple lines. One way is using triple-quotes: """. """ or '''. '''. End-of-line characters are automatically included in the string, but itâ€™s possible to prevent this by adding a \ at the end of the line. In the following example, the initial newline is not included: """. """ '''. ''' \ >>> print("""\. Usage: thingy [OPTIONS]. -h Display this usage message. -H hostname Hostname to connect to. """) Usage: thingy [OPTIONS] -h Display this usage message -H hostname Hostname to connect to >>> Strings can be concatenated (glued together) with the + operator, and repeated with : + * >>> # 3 times 'un', followed by 'ium' >>> 3 * 'un' + 'ium' 'unununium' Two or more string literals (i. e. the ones enclosed between quotes) next to each other are automatically concatenated. >>> 'Py' 'thon' 'Python' This feature is particularly useful when you want to break long strings: >>> text = ('Put several strings within parentheses '. 'to have them joined together. ') >>> text 'Put several strings within parentheses to have them joined together. ' This only works with two literals though, not with variables or expressions: >>> prefix = 'Py' >>> prefix 'thon' # can't concatenate a variable and a string literal File "<stdin>", line 1 prefix 'thon' ^^^^^^ SyntaxError: invalid syntax >>> ('un' * 3) 'ium' File "<stdin>", line 1 ('un' * 3) 'ium' ^^^^^ SyntaxError: invalid syntax If you want to concatenate variables or a variable and a literal, use +: + >>> prefix + 'thon' 'Python' Strings can be indexed (subscripted), with the first character having index 0.