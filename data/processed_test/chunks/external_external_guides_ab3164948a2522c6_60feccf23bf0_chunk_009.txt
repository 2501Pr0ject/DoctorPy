The setLevel() method, just as in logger objects, specifies the lowest severity that will be dispatched to the appropriate destination. Why are there two setLevel() methods. The level set in the logger determines which severity of messages it will pass to its handlers. The level set in each handler determines which messages that handler will send on. setLevel() setLevel() setFormatter() selects a Formatter object for this handler to use. setFormatter() selects a Formatter object for this handler to use. setFormatter() addFilter() and removeFilter() respectively configure and deconfigure filter objects on handlers. addFilter() and removeFilter() respectively configure and deconfigure filter objects on handlers. addFilter() removeFilter() Application code should not directly instantiate and use instances of Handler. Instead, the Handler class is a base class that defines the interface that all handlers should have and establishes some default behavior that child classes can use (or override). Handler Handler ### Formatters¶ Formatter objects configure the final order, structure, and contents of the log message. Unlike the base logging. Handler class, application code may instantiate formatter classes, although you could likely subclass the formatter if your application needs special behavior. The constructor takes three optional arguments – a message format string, a date format string and a style indicator. logging. Handler If there is no message format string, the default is to use the raw message. If there is no date format string, the default date format is: %Y-%m-%d %H:%M:%S with the milliseconds tacked on at the end. The style is one of '%', '{', or '$'. If one of these is not specified, then '%' will be used. style '%' '{' '$' '%' If the style is '%', the message format string uses %()s styled string substitution; the possible keys are documented in LogRecord attributes. If the style is '{', the message format string is assumed to be compatible with str. format() (using keyword arguments), while if the style is '$' then the message format string should conform to what is expected by string. Template. substitute(). style '%' %(<dictionary key>)s '{' str. format() '$' string. Template. substitute() Changed in version 3. 2: Added the style parameter.