{
  "chunk_id": "python_official_python_official_library_482e94da82fc8f58_4a9e7712fa00_chunk_016",
  "original_doc_id": "python_official_python_official_library_482e94da82fc8f58_4a9e7712fa00",
  "content": "def derive(self, excs):. return MyGroup(self. message, excs). >>> e = MyGroup(\"eg\", [ValueError(1), TypeError(2)]) >>> e. add_note(\"a note\") >>> e. __context__ = Exception(\"context\") >>> e. __cause__ = Exception(\"cause\") >>> try:. raise e. except Exception as e:. exc = e. >>> match, rest = exc. split(ValueError) >>> exc, exc. __context__, exc. __cause__, exc. __notes__ (MyGroup('eg', [ValueError(1), TypeError(2)]), Exception('context'), Exception('cause'), ['a note']) >>> match, match. __context__, match. __cause__, match. __notes__ (MyGroup('eg', [ValueError(1)]), Exception('context'), Exception('cause'), ['a note']) >>> rest, rest. __context__, rest. __cause__, rest. __notes__ (MyGroup('eg', [TypeError(2)]), Exception('context'), Exception('cause'), ['a note']) >>> exc. __traceback__ is match. __traceback__ is rest. __traceback__ True BaseExceptionGroup __new__() __init__() class Errors(ExceptionGroup): def __new__(cls, errors, exit_code): self = super(). __new__(Errors, f\"exit code: {exit_code}\", errors) self. exit_code = exit_code return self def derive(self, excs): return Errors(excs, self.",
  "title": "Built-in Exceptions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 16,
  "start_char": 37512,
  "end_char": 38624,
  "token_count": 314,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_482e94da82fc8f58.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:34.399734"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_482e94da82fc8f58_4a9e7712fa00_chunk_016.txt"
}