{
  "chunk_id": "python_official_python_official_library_ccf716b46391ca56_40d31454785a_chunk_016",
  "original_doc_id": "python_official_python_official_library_ccf716b46391ca56_40d31454785a",
  "content": "The locale mechanism is very unreliable as it only handles one “culture” at a time and only works with 8-bit locales. Unicode matching is enabled by default for Unicode (str) patterns and it is able to handle different locales and languages. Changed in version 3. 6: LOCALE can be used only with bytes patterns and is not compatible with ASCII. LOCALE ASCII Changed in version 3. 7: Compiled regular expression objects with the LOCALE flag no longer depend on the locale at compile time. Only the locale at matching time affects the result of matching. LOCALE When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline). By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string. '^' '$' '^' '$' Corresponds to the inline flag (. m). (. m) Indicates no flag being applied, the value is 0. This flag may be used as a default value for a function keyword argument or as a base value that will be conditionally ORed with other flags. Example of use as a default value: 0 def myfunc(text, flag=re. NOFLAG): return re. match(text, flag) Added in version 3. 11. Make the '. ' special character match any character at all, including a newline; without this flag, '. ' will match anything except a newline. '. ' '. ' Corresponds to the inline flag (. s). (. s) In Python 3, Unicode characters are matched by default for str patterns. This flag is therefore redundant with no effect and is only kept for backward compatibility. str See ASCII to restrict matching to ASCII characters instead. ASCII This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments. Whitespace within the pattern is ignored, except when in a character class, or when preceded by an unescaped backslash, or within tokens like. , (. : or (. P<. >. For example, (. : and *. are not allowed.",
  "title": "re — Regular expression operations.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 16,
  "start_char": 30578,
  "end_char": 32777,
  "token_count": 484,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_ccf716b46391ca56.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:36.815818"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_ccf716b46391ca56_40d31454785a_chunk_016.txt"
}