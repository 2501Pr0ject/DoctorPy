operator — Standard operators as functions. 13. 5 Source:  operator — Standard operators as functions¶ operator Source code: Lib/operator. py The operator module exports a set of efficient functions corresponding to the intrinsic operators of Python. For example, operator. add(x, y) is equivalent to the expression x+y. Many function names are those used for special methods, without the double underscores. For backward compatibility, many of these have a variant with the double underscores kept. The variants without the double underscores are preferred for clarity. operator operator. add(x, y) x+y The functions fall into categories that perform object comparisons, logical operations, mathematical operations and sequence operations. The object comparison functions are useful for all objects, and are named after the rich comparison operators they support: Perform “rich comparisons” between a and b. Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a. = b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b. Note that these functions can return any value, which may or may not be interpretable as a Boolean value. See Comparisons for more information about rich comparisons. lt(a, b) a < b le(a, b) a <= b eq(a, b) a == b ne(a, b) a. = b gt(a, b) a > b ge(a, b) a >= b The logical operations are also generally applicable to all objects, and support truth tests, identity tests, and boolean operations: Return the outcome of not obj. (Note that there is no not() method for object instances; only the interpreter core defines this operation. The result is affected by the bool() and len() methods. ) not __not__() __bool__() __len__() Return True if obj is true, and False otherwise. This is equivalent to using the bool constructor. True False bool Return a is b. Tests object identity. a is b Return a is not b. Tests object identity. a is not b The mathematical and bitwise operations are the most numerous: Return the absolute value of obj. Return a + b, for a and b numbers. a + b Return the bitwise and of a and b. Return a // b.