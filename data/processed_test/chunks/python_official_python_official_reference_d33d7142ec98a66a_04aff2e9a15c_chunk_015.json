{
  "chunk_id": "python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c_chunk_015",
  "original_doc_id": "python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c",
  "content": "Each of the path entry hooks in this list is called with a single argument, the path entry to be searched. This callable may either return a path entry finder that can handle the path entry, or it may raise ImportError. An ImportError is used by the path based finder to signal that the hook cannot find a path entry finder for that path entry. The exception is ignored and import path iteration continues. The hook should expect either a string or bytes object; the encoding of bytes objects is up to the hook (e. g. it may be a file system encoding, UTF-8, or something else), and if the hook cannot decode the argument, it should raise ImportError. sys. path_hooks ImportError ImportError ImportError If sys. path_hooks iteration ends with no path entry finder being returned, then the path based finder’s find_spec() method will store None in sys. path_importer_cache (to indicate that there is no finder for this path entry) and return None, indicating that this meta path finder could not find the module. sys. path_hooks find_spec() None sys. path_importer_cache None If a path entry finder is returned by one of the path entry hook callables on sys. path_hooks, then the following protocol is used to ask the finder for a module spec, which is then used when loading the module. sys. path_hooks The current working directory – denoted by an empty string – is handled slightly differently from other entries on sys. path. First, if the current working directory is found to not exist, no value is stored in sys. path_importer_cache. Second, the value for the current working directory is looked up fresh for each module lookup. Third, the path used for sys. path_importer_cache and returned by importlib. machinery. PathFinder. find_spec() will be the actual current working directory and not the empty string. sys. path sys. path_importer_cache sys. path_importer_cache importlib. machinery. PathFinder. find_spec() ### 5. 5. 2. Path entry finder protocol¶ In order to support imports of modules and initialized packages and also to contribute portions to namespace packages, path entry finders must implement the find_spec() method. find_spec() find_spec() takes two arguments: the fully qualified name of the module being imported, and the (optional) target module. find_spec() returns a fully populated spec for the module.",
  "title": "5. The import system.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 15,
  "start_char": 34331,
  "end_char": 36665,
  "token_count": 490,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_d33d7142ec98a66a.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:39.015713"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c_chunk_015.txt"
}