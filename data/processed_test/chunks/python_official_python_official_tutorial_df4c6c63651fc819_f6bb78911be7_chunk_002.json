{
  "chunk_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_002",
  "original_doc_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7",
  "content": "format(filename, newname)) img_1074. jpg --> Ashley_0. jpg img_1076. jpg --> Ashley_1. jpg img_1077. jpg --> Ashley_2. jpg Another application for templating is separating program logic from the details of multiple output formats. This makes it possible to substitute custom templates for XML files, plain text reports, and HTML web reports. ## 11. 3. Working with Binary Data Record Layouts¶ The struct module provides pack() and unpack() functions for working with variable length binary record formats. The following example shows how to loop through header information in a ZIP file without using the zipfile module. Pack codes \"H\" and \"I\" represent two and four byte unsigned numbers respectively. The \"<\" indicates that they are standard size and in little-endian byte order: struct pack() unpack() zipfile \"H\" \"I\" \"<\" import struct with open('myfile. zip', 'rb') as f: data = f. read() start = 0 for i in range(3): # show the first 3 file headers start += 14 fields = struct. unpack('<IIIHH', data[start:start+16]) crc32, comp_size, uncomp_size, filenamesize, extra_size = fields start += 16 filename = data[start:start+filenamesize] start += filenamesize extra = data[start:start+extra_size] print(filename, hex(crc32), comp_size, uncomp_size) start += extra_size + comp_size # skip to the next header ## 11. 4. Multi-threading¶ Threading is a technique for decoupling tasks which are not sequentially dependent. Threads can be used to improve the responsiveness of applications that accept user input while other tasks run in the background. A related use case is running I/O in parallel with computations in another thread. The following code shows how the high level threading module can run tasks in background while the main program continues to run: threading import threading, zipfile class AsyncZip(threading. Thread): def __init__(self, infile, outfile): threading. Thread. __init__(self) self. infile = infile self. outfile = outfile def run(self): f = zipfile. ZipFile(self. outfile, 'w', zipfile. ZIP_DEFLATED) f. write(self. infile) f. close() print('Finished background zip of:', self. infile) background = AsyncZip('mydata.",
  "title": "11. Brief Tour of the Standard Library — Part II.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 2,
  "start_char": 4114,
  "end_char": 6260,
  "token_count": 496,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_df4c6c63651fc819.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.710413"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_002.txt"
}