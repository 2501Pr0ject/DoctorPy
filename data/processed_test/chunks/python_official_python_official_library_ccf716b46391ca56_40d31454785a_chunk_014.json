{
  "chunk_id": "python_official_python_official_library_ccf716b46391ca56_40d31454785a_chunk_014",
  "original_doc_id": "python_official_python_official_library_ccf716b46391ca56_40d31454785a",
  "content": "If the LOCALE flag is used, matches characters considered alphanumeric in the current locale and the underscore. [a-zA-Z0-9_] LOCALE \\W Matches any character which is not a word character. This is the opposite of \\w. By default, matches non-underscore () characters for which str. isalnum() returns False. \\w _ str. isalnum() False Matches [^a-zA-Z0-9] if the ASCII flag is used. [^a-zA-Z0-9_] ASCII If the LOCALE flag is used, matches characters which are neither alphanumeric in the current locale nor the underscore. LOCALE \\Z Matches only at the end of the string. Most of the escape sequences supported by Python string literals are also accepted by the regular expression parser: \\a \\b \\f \\n \\N \\r \\t \\u \\U \\v \\x \\\\ (Note that \\b is used to represent word boundaries, and means “backspace” only inside character classes. ) \\b '\\u', '\\U', and '\\N' escape sequences are only recognized in Unicode (str) patterns. In bytes patterns they are errors. Unknown escapes of ASCII letters are reserved for future use and treated as errors. '\\u' '\\U' '\\N' Octal escapes are included in a limited form. If the first digit is a 0, or if there are three octal digits, it is considered an octal escape. Otherwise, it is a group reference. As for string literals, octal escapes are always at most three digits in length. Changed in version 3. 3: The '\\u' and '\\U' escape sequences have been added. '\\u' '\\U' Changed in version 3. 6: Unknown escapes consisting of '\\' and an ASCII letter now are errors. '\\' Changed in version 3. 8: The '\\N{name}' escape sequence has been added. As in string literals, it expands to the named Unicode character (e. g. '\\N{EM DASH}'). '\\N{name}' '\\N{EM DASH}' ## Module Contents¶ The module defines several functions, constants, and an exception. Some of the functions are simplified versions of the full featured methods for compiled regular expressions. Most non-trivial applications always use the compiled form. ### Flags¶ Changed in version 3.",
  "title": "re — Regular expression operations.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 14,
  "start_char": 26678,
  "end_char": 28648,
  "token_count": 483,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_ccf716b46391ca56.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:36.814038"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_ccf716b46391ca56_40d31454785a_chunk_014.txt"
}