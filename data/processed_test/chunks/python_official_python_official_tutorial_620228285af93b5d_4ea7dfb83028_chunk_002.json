{
  "chunk_id": "python_official_python_official_tutorial_620228285af93b5d_4ea7dfb83028_chunk_002",
  "original_doc_id": "python_official_python_official_tutorial_620228285af93b5d_4ea7dfb83028",
  "content": "0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Continuation lines are needed when entering a multi-line construct. As an example, take a look at this if statement: if >>> the_world_is_flat = True >>> if the_world_is_flat:. print(\"Be careful not to fall off. \"). Be careful not to fall off. For more on interactive mode, see Interactive Mode. ## 2. 2. The Interpreter and Its Environment¶ ### 2. 2. 1. Source Code Encoding¶ By default, Python source files are treated as encoded in UTF-8. In that encoding, characters of most languages in the world can be used simultaneously in string literals, identifiers and comments — although the standard library only uses ASCII characters for identifiers, a convention that any portable code should follow. To display all these characters properly, your editor must recognize that the file is UTF-8, and it must use a font that supports all the characters in the file. To declare an encoding other than the default one, a special comment line should be added as the first line of the file. The syntax is as follows: # -*- coding: encoding -*- where encoding is one of the valid codecs supported by Python. codecs For example, to declare that Windows-1252 encoding is to be used, the first line of your source code file should be: # -*- coding: cp1252 -*- One exception to the first line rule is when the source code starts with a UNIX “shebang” line. In this case, the encoding declaration should be added as the second line of the file. For example: #. /usr/bin/env python3 # -*- coding: cp1252 -*- Footnotes ### Table of Contents 2. Using the Python Interpreter 2. 1. Invoking the Interpreter 2. 1. 1. Argument Passing 2. 1. 2. Interactive Mode 2. 2. The Interpreter and Its Environment 2. 2. 1. Source Code Encoding 2. 1. Invoking the Interpreter 2. 1. 1. Argument Passing 2. 1. 2. Interactive Mode 2. 1. 1. Argument Passing 2. 1. 2. Interactive Mode 2. 2. The Interpreter and Its Environment 2. 2. 1. Source Code Encoding 2.",
  "title": "2. Using the Python Interpreter.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 2,
  "start_char": 4278,
  "end_char": 6286,
  "token_count": 500,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_620228285af93b5d.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:37.675090"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_620228285af93b5d_4ea7dfb83028_chunk_002.txt"
}