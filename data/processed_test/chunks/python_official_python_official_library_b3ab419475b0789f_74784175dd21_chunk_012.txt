path. expanduser(). If a home directory can’t be resolved, RuntimeError is raised. ~ ~user os. path. expanduser() RuntimeError >>> p = PosixPath('~/films/Monty Python') >>> p. expanduser() PosixPath('/home/eric/films/Monty Python') Added in version 3. 5. Return a new path object representing the current directory (as returned by os. getcwd()): os. getcwd() >>> Path. cwd() PosixPath('/home/antoine/pathlib') Make the path absolute, without normalization or resolving symlinks. Returns a new path object: >>> p = Path('tests') >>> p PosixPath('tests') >>> p. absolute() PosixPath('/home/antoine/pathlib/tests') Make the path absolute, resolving any symlinks. A new path object is returned: >>> p = Path() >>> p PosixPath('. ') >>> p. resolve() PosixPath('/home/antoine/pathlib') “. ” components are also eliminated (this is the only method to do so):. >>> p = Path('docs/. /setup. py') >>> p. resolve() PosixPath('/home/antoine/pathlib/setup. py') If a path doesn’t exist or a symlink loop is encountered, and strict is True, OSError is raised. If strict is False, the path is resolved as far as possible and any remainder is appended without checking whether it exists. True OSError False Changed in version 3. 6: The strict parameter was added (pre-3. 6 behavior is strict). Changed in version 3. 13: Symlink loops are treated like other errors: OSError is raised in strict mode, and no exception is raised in non-strict mode. In previous versions, RuntimeError is raised no matter the value of strict. OSError RuntimeError Return the path to which the symbolic link points (as returned by os. readlink()): os. readlink() >>> p = Path('mylink') >>> p. symlink_to('setup. py') >>> p. readlink() PosixPath('setup. py') Added in version 3. 9. Changed in version 3. 13: Raises UnsupportedOperation if os. readlink() is not available. In previous versions, NotImplementedError was raised. UnsupportedOperation os. readlink() NotImplementedError ### Querying file type and status¶ Changed in version 3.