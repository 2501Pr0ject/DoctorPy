{
  "chunk_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_042",
  "original_doc_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e",
  "content": "dstname else: return self. stdname def utcoffset(self, dt): return self. stdoffset + self. dst(dt) def dst(self, dt): if dt is None or dt. tzinfo is None: # An exception may be sensible here, in one or both cases. # It depends on how you want to treat them. The default # fromutc() implementation (called by the default astimezone() # implementation) passes a datetime with dt. tzinfo is self. return ZERO assert dt. tzinfo is self start, end = us_dst_range(dt. year) # Can't compare naive to aware objects, so strip the timezone from # dt first. dt = dt. replace(tzinfo=None) if start + HOUR <= dt < end - HOUR: # DST is in effect. return HOUR if end - HOUR <= dt < end: # Fold (an ambiguous hour): use dt. fold to disambiguate. return ZERO if dt. fold else HOUR if start <= dt < start + HOUR: # Gap (a non-existent hour): reverse the fold rule. return HOUR if dt. fold else ZERO # DST is off. return ZERO def fromutc(self, dt): assert dt. tzinfo is self start, end = us_dst_range(dt. year) start = start. replace(tzinfo=self) end = end. replace(tzinfo=self) std_time = dt + self. stdoffset dst_time = std_time + HOUR if end <= dst_time < end + HOUR: # Repeated hour return std_time. replace(fold=1) if std_time < start or dst_time >= end: # Standard time return std_time if start <= std_time < end - HOUR: # Daylight saving time return dst_time Eastern = USTimeZone(-5, \"Eastern\", \"EST\", \"EDT\") Central = USTimeZone(-6, \"Central\", \"CST\", \"CDT\") Mountain = USTimeZone(-7, \"Mountain\", \"MST\", \"MDT\") Pacific = USTimeZone(-8, \"Pacific\", \"PST\", \"PDT\") Note that there are unavoidable subtleties twice per year in a tzinfo subclass accounting for both standard and daylight time, at the DST transition points.",
  "title": "datetime â€” Basic date and time types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 42,
  "start_char": 81023,
  "end_char": 82728,
  "token_count": 468,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_6eb624a4b28b1066.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:01.419427"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_042.txt"
}