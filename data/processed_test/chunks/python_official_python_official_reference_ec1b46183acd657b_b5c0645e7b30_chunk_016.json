{
  "chunk_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_016",
  "original_doc_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30",
  "content": "The double star pattern must be the last subpattern in the mapping pattern. Duplicate keys in mapping patterns are disallowed. Duplicate literal keys will raise a SyntaxError. Two keys that otherwise have the same value will raise a ValueError at runtime. SyntaxError ValueError The following is the logical flow for matching a mapping pattern against a subject value: If the subject value is not a mapping [3],the mapping pattern fails. If the subject value is not a mapping [3],the mapping pattern fails. If every key given in the mapping pattern is present in the subject mapping, and the pattern for each key matches the corresponding item of the subject mapping, the mapping pattern succeeds. If every key given in the mapping pattern is present in the subject mapping, and the pattern for each key matches the corresponding item of the subject mapping, the mapping pattern succeeds. If duplicate keys are detected in the mapping pattern, the pattern is considered invalid. A SyntaxError is raised for duplicate literal values; or a ValueError for named keys of the same value. If duplicate keys are detected in the mapping pattern, the pattern is considered invalid. A SyntaxError is raised for duplicate literal values; or a ValueError for named keys of the same value. SyntaxError ValueError Note Key-value pairs are matched using the two-argument form of the mapping subject’s get() method. Matched key-value pairs must already be present in the mapping, and not created on-the-fly via missing() or getitem(). get() __missing__() __getitem__() In simple terms {KEY1: P1, KEY2: P2,. } matches only if all the following happens: {KEY1: P1, KEY2: P2,. } check is a mapping check is a mapping <subject> KEY1 in KEY1 in KEY1 in <subject> P1 matches [KEY1] P1 matches [KEY1] P1 <subject>[KEY1] … and so on for the corresponding KEY/pattern pair. … and so on for the corresponding KEY/pattern pair. #### 8. 6. 4. 10. Class Patterns¶ A class pattern represents a class and its positional and keyword arguments (if any). Syntax: class_pattern ::= name_or_attr \"(\" [pattern_arguments \",\". ] \")\" pattern_arguments ::= positional_patterns [\",\" keyword_patterns] | keyword_patterns positional_patterns ::= \",\". pattern+ keyword_patterns ::= \",\".",
  "title": "8. Compound statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 16,
  "start_char": 37096,
  "end_char": 39337,
  "token_count": 482,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_ec1b46183acd657b.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.380040"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_016.txt"
}