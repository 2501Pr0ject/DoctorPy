{
  "chunk_id": "python_official_python_official_tutorial_b08b74d25282ad3e_276820cda60c_chunk_005",
  "original_doc_id": "python_official_python_official_tutorial_b08b74d25282ad3e_276820cda60c",
  "content": "rjust(2), repr(x*x). rjust(3), end=' '). # Note use of 'end' on previous line. print(repr(x*x*x). rjust(4)). 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 (Note that the one space between each column was added by the way print() works: it always adds spaces between its arguments. ) print() The str. rjust() method of string objects right-justifies a string in a field of a given width by padding it with spaces on the left. There are similar methods str. ljust() and str. center(). These methods do not write anything, they just return a new string. If the input string is too long, they don’t truncate it, but return it unchanged; this will mess up your column lay-out but that’s usually better than the alternative, which would be lying about a value. (If you really want truncation you can always add a slice operation, as in x. ljust(n)[:n]. ) str. rjust() str. ljust() str. center() x. ljust(n)[:n] There is another method, str. zfill(), which pads a numeric string on the left with zeros. It understands about plus and minus signs: str. zfill() >>> '12'. zfill(5) '00012' >>> '-3. 14'. zfill(7) '-003. 14' >>> '3. 14159265359'. zfill(5) '3. 14159265359' ### 7. 1. 4. Old string formatting¶ The % operator (modulo) can also be used for string formatting. Given format % values (where format is a string), % conversion specifications in format are replaced with zero or more elements of values. This operation is commonly known as string interpolation. For example: format % values % >>> import math >>> print('The value of pi is approximately %5. 3f. ' % math. pi) The value of pi is approximately 3. 142. More information can be found in the printf-style String Formatting section. ## 7. 2.",
  "title": "7. Input and Output.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 5,
  "start_char": 9678,
  "end_char": 11413,
  "token_count": 498,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_b08b74d25282ad3e.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:37.886518"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_b08b74d25282ad3e_276820cda60c_chunk_005.txt"
}