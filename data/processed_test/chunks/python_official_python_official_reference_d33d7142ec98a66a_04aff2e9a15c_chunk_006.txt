meta_path has three meta path finders, one that knows how to import built-in modules, one that knows how to import frozen modules, and one that knows how to import modules from an import path (i. e. the path based finder). sys. meta_path Changed in version 3. 4: The find_spec() method of meta path finders replaced find_module(), which is now deprecated. While it will continue to work without change, the import machinery will try it only if the finder does not implement find_spec(). find_spec() find_module() find_spec() Changed in version 3. 10: Use of find_module() by the import system now raises ImportWarning. find_module() ImportWarning Changed in version 3. 12: find_module() has been removed. Use find_spec() instead. find_module() find_spec() ## 5. 4. LoadingÂ¶ If and when a module spec is found, the import machinery will use it (and the loader it contains) when loading the module. Here is an approximation of what happens during the loading portion of import: module = None if spec. loader is not None and hasattr(spec. loader, 'create_module'): # It is assumed 'exec_module' will also be defined on the loader. module = spec. loader. create_module(spec) if module is None: module = ModuleType(spec. name) # The import-related module attributes get set here: _init_module_attrs(spec, module) if spec. loader is None: # unsupported raise ImportError if spec. origin is None and spec. submodule_search_locations is not None: # namespace package sys. modules[spec. name] = module elif not hasattr(spec. loader, 'exec_module'): module = spec. loader. load_module(spec. name) else: sys. modules[spec. name] = module try: spec. loader. exec_module(module) except BaseException: try: del sys. modules[spec. name] except KeyError: pass raise return sys. modules[spec. name] Note the following details: If there is an existing module object with the given name in sys. modules, import will have already returned it. If there is an existing module object with the given name in sys. modules, import will have already returned it. sys. modules The module will exist in sys. modules before the loader executes the module code.