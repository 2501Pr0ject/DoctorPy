{m} a/{2}b 'a//b' Readers of a reductionist bent may notice that the three other quantifiers can all be expressed using this notation. {0,} is the same as , {1,} is equivalent to +, and {0,1} is the same as. It’s better to use , +, or. when you can, simply because they’re shorter and easier to read. {0,} * {1,} + {0,1}. * +. ## Using Regular Expressions¶ Now that we’ve looked at some simple regular expressions, how do we actually use them in Python. The re module provides an interface to the regular expression engine, allowing you to compile REs into objects and then perform matches with them. re ### Compiling Regular Expressions¶ Regular expressions are compiled into pattern objects, which have methods for various operations such as searching for pattern matches or performing string substitutions. >>> import re >>> p = re. compile('ab*') >>> p re. compile('ab*') re. compile() also accepts an optional flags argument, used to enable various special features and syntax variations. We’ll go over the available settings later, but for now a single example will do: re. compile() >>> p = re. compile('ab*', re. IGNORECASE) The RE is passed to re. compile() as a string. REs are handled as strings because regular expressions aren’t part of the core Python language, and no special syntax was created for expressing them. (There are applications that don’t need REs at all, so there’s no need to bloat the language specification by including them. ) Instead, the re module is simply a C extension module included with Python, just like the socket or zlib modules. re. compile() re socket zlib Putting REs in strings keeps the Python language simpler, but has one disadvantage which is the topic of the next section. ### The Backslash Plague¶ As stated earlier, regular expressions use the backslash character ('\') to indicate special forms or to allow special characters to be used without invoking their special meaning. This conflicts with Python’s usage of the same character for the same purpose in string literals. '\' Let’s say you want to write a RE that matches the string \section, which might be found in a LaTeX file. To figure out what to write in the program code, start with the desired string to be matched.