Built-in Exceptions. 13. 5 Source:  Built-in Exceptions¶ In Python, all exceptions must be instances of a class that derives from BaseException. In a try statement with an except clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which it is derived). Two exception classes that are not related via subclassing are never equivalent, even if they have the same name. BaseException try except The built-in exceptions listed in this chapter can be generated by the interpreter or built-in functions. Except where mentioned, they have an “associated value” indicating the detailed cause of the error. This may be a string or a tuple of several items of information (e. g. , an error code and a string explaining the code). The associated value is usually passed as arguments to the exception class’s constructor. User code can raise built-in exceptions. This can be used to test an exception handler or to report an error condition “just like” the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error. The built-in exception classes can be subclassed to define new exceptions; programmers are encouraged to derive new exceptions from the Exception class or one of its subclasses, and not from BaseException. More information on defining exceptions is available in the Python Tutorial under User-defined Exceptions. Exception BaseException ## Exception context¶ Three attributes on exception objects provide information about the context in which the exception was raised: When raising a new exception while another exception is already being handled, the new exception’s context attribute is automatically set to the handled exception. An exception may be handled when an except or finally clause, or a with statement, is used. __context__ except finally with This implicit exception context can be supplemented with an explicit cause by using from with raise: from raise raise new_exc from original_exc The expression following from must be an exception or None. It will be set as cause on the raised exception. Setting cause also implicitly sets the suppress_context attribute to True, so that using raise new_exc from None effectively replaces the old exception with the new one for display purposes (e. g. converting KeyError to AttributeError), while leaving the old exception available in context for introspection when debugging.