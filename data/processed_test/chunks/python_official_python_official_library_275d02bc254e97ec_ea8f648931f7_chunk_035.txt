S_IFBLK, device defines the newly created device special file (probably using os. makedev()), otherwise it is ignored. stat. S_IFREG stat. S_IFCHR stat. S_IFBLK stat. S_IFIFO stat stat. S_IFCHR stat. S_IFBLK os. makedev() This function can also support paths relative to directory descriptors. Availability: Unix, not WASI. Changed in version 3. 3: Added the dir_fd parameter. Changed in version 3. 6: Accepts a path-like object. Extract the device major number from a raw device number (usually the st_dev or st_rdev field from stat). st_dev st_rdev stat Extract the device minor number from a raw device number (usually the st_dev or st_rdev field from stat). st_dev st_rdev stat Compose a raw device number from the major and minor device numbers. Return system configuration information relevant to a named file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX. 1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the pathconf_names dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted. pathconf_names If name is a string and is not known, ValueError is raised. If a specific value for name is not supported by the host system, even if it is included in pathconf_names, an OSError is raised with errno. EINVAL for the error number. ValueError pathconf_names OSError errno. EINVAL This function can support specifying a file descriptor. Availability: Unix. Changed in version 3. 6: Accepts a path-like object. Dictionary mapping names accepted by pathconf() and fpathconf() to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system. pathconf() fpathconf() Availability: Unix. Return a string representing the path to which the symbolic link points. The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using os. path. join(os. path. dirname(path), result). os. path. join(os. path.