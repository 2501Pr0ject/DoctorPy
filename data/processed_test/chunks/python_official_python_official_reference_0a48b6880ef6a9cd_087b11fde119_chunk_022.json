{
  "chunk_id": "python_official_python_official_reference_0a48b6880ef6a9cd_087b11fde119_chunk_022",
  "original_doc_id": "python_official_python_official_reference_0a48b6880ef6a9cd_087b11fde119",
  "content": "Binary bitwise operations¶ Each of the three bitwise operations has a different priority level: and_expr ::= shift_expr | and_expr \"&\" shift_expr xor_expr ::= and_expr | xor_expr \"^\" and_expr or_expr ::= xor_expr | or_expr \"|\" xor_expr shift_expr and_expr shift_expr and_expr xor_expr and_expr xor_expr or_expr xor_expr The & operator yields the bitwise AND of its arguments, which must be integers or one of them must be a custom object overriding and() or rand() special methods. & __and__() __rand__() The ^ operator yields the bitwise XOR (exclusive OR) of its arguments, which must be integers or one of them must be a custom object overriding xor() or rxor() special methods. ^ __xor__() __rxor__() The | operator yields the bitwise (inclusive) OR of its arguments, which must be integers or one of them must be a custom object overriding or() or ror() special methods. | __or__() __ror__() ## 6. 10. Comparisons¶ Unlike C, all comparison operations in Python have the same priority, which is lower than that of any arithmetic, shifting or bitwise operation. Also unlike C, expressions like a < b < c have the interpretation that is conventional in mathematics: a < b < c comparison ::= or_expr (comp_operator or_expr)* comp_operator ::= \"<\" | \">\" | \"==\" | \">=\" | \"<=\" | \". =\" | \"is\" [\"not\"] | [\"not\"] \"in\" or_expr comp_operator or_expr Comparisons yield boolean values: True or False. Custom rich comparison methods may return non-boolean values. In this case Python will call bool() on such value in boolean contexts. True False bool() Comparisons can be chained arbitrarily, e. g. , x < y <= z is equivalent to x < y and y <= z, except that y is evaluated only once (but in both cases z is not evaluated at all when x < y is found to be false). x < y <= z x < y and y <= z y z x < y Formally, if a, b, c, …, y, z are expressions and op1, op2, …, opN are comparison operators, then a op1 b op2 c. y opN z is equivalent to a op1 b and b op2 c and. y opN z, except that each expression is evaluated at most once.",
  "title": "6. Expressions.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 22,
  "start_char": 51179,
  "end_char": 53197,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_0a48b6880ef6a9cd.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:08.589570"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_0a48b6880ef6a9cd_087b11fde119_chunk_022.txt"
}