On the other hand, the os and os. path modules supply functions that work with low-level str and bytes objects, which is a more procedural approach. Some users consider the object-oriented style to be more readable. PurePath Path os os. path str bytes Many functions in os and os. path support bytes paths and paths relative to directory descriptors. These features aren’t available in pathlib. os os. path bytes Python’s str and bytes types, and portions of the os and os. path modules, are written in C and are very speedy. pathlib is written in pure Python and is often slower, but rarely slow enough to matter. str bytes os os. path pathlib’s path normalization is slightly more opinionated and consistent than os. path. For example, whereas os. path. abspath() eliminates “. ” segments from a path, which may change its meaning if symlinks are involved, Path. absolute() preserves these segments for greater safety. os. path os. path. abspath(). Path. absolute() pathlib’s path normalization may render it unsuitable for some applications: pathlib normalizes Path("my_folder/") to Path("my_folder"), which changes a path’s meaning when supplied to various operating system APIs and command-line utilities. Specifically, the absence of a trailing separator may allow the path to be resolved as either a file or directory, rather than a directory only. pathlib normalizes Path("my_folder/") to Path("my_folder"), which changes a path’s meaning when supplied to various operating system APIs and command-line utilities. Specifically, the absence of a trailing separator may allow the path to be resolved as either a file or directory, rather than a directory only. Path("my_folder/") Path("my_folder") pathlib normalizes Path(". /my_program") to Path("my_program"), which changes a path’s meaning when used as an executable search path, such as in a shell or when spawning a child process. Specifically, the absence of a separator in the path may force it to be looked up in PATH rather than the current directory. pathlib normalizes Path(". /my_program") to Path("my_program"), which changes a path’s meaning when used as an executable search path, such as in a shell or when spawning a child process. Specifically, the absence of a separator in the path may force it to be looked up in PATH rather than the current directory. Path(".