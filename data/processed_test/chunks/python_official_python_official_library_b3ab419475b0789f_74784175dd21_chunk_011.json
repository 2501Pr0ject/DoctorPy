{
  "chunk_id": "python_official_python_official_library_b3ab419475b0789f_74784175dd21_chunk_011",
  "original_doc_id": "python_official_python_official_library_b3ab419475b0789f_74784175dd21",
  "content": "__name__,)) UnsupportedOperation: cannot instantiate 'WindowsPath' on your system Some concrete path methods can raise an OSError if a system call fails (for example because the path doesn’t exist). OSError ### Parsing and generating URIs¶ Concrete path objects can be created from, and represented as, ‘file’ URIs conforming to RFC 8089. Note File URIs are not portable across machines with different filesystem encodings. Return a new path object from parsing a ‘file’ URI. For example: >>> p = Path. from_uri('file:///etc/hosts') PosixPath('/etc/hosts') On Windows, DOS device and UNC paths may be parsed from URIs: >>> p = Path. from_uri('file:///c:/windows') WindowsPath('c:/windows') >>> p = Path. from_uri('file://server/share') WindowsPath('//server/share') Several variant forms are supported: >>> p = Path. from_uri('file:////server/share') WindowsPath('//server/share') >>> p = Path. from_uri('file://///server/share') WindowsPath('//server/share') >>> p = Path. from_uri('file:c:/windows') WindowsPath('c:/windows') >>> p = Path. from_uri('file:/c|/windows') WindowsPath('c:/windows') ValueError is raised if the URI does not start with file:, or the parsed path isn’t absolute. ValueError file: Added in version 3. 13. Represent the path as a ‘file’ URI. ValueError is raised if the path isn’t absolute. ValueError >>> p = PosixPath('/etc/passwd') >>> p. as_uri() 'file:///etc/passwd' >>> p = WindowsPath('c:/Windows') >>> p. as_uri() 'file:///c:/Windows' For historical reasons, this method is also available from PurePath objects. However, its use of os. fsencode() makes it strictly impure. PurePath os. fsencode() ### Expanding and resolving paths¶ Return a new path object representing the user’s home directory (as returned by os. path. expanduser() with ~ construct). If the home directory can’t be resolved, RuntimeError is raised. os. path. expanduser() ~ RuntimeError >>> Path. home() PosixPath('/home/antoine') Added in version 3. 5. Return a new path with expanded ~ and ~user constructs, as returned by os.",
  "title": "pathlib — Object-oriented filesystem paths.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 11,
  "start_char": 21314,
  "end_char": 23346,
  "token_count": 500,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_b3ab419475b0789f.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:32.494601"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_b3ab419475b0789f_74784175dd21_chunk_011.txt"
}