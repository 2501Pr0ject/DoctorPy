* ** * ** A call always returns some value, possibly None, unless it raises an exception. How this value is computed depends on the type of the callable object. None If it is— The code block for the function is executed, passing it the argument list. The first thing the code block will do is bind the formal parameters to the arguments; this is described in section Function definitions. When the code block executes a return statement, this specifies the return value of the function call. If execution reaches the end of the code block without executing a return statement, the return value is None. return return None The result is up to the interpreter; see Built-in Functions for the descriptions of built-in functions and methods. A new instance of that class is returned. The corresponding user-defined function is called, with an argument list that is one longer than the argument list of the call: the instance becomes the first argument. The class must define a call() method; the effect is then the same as if that method was called. __call__() ## 6. 4. Await expression¶ Suspend the execution of coroutine on an awaitable object. Can only be used inside a coroutine function. await_expr ::= "await" primary primary Added in version 3. 5. ## 6. 5. The power operator¶ The power operator binds more tightly than unary operators on its left; it binds less tightly than unary operators on its right. The syntax is: power ::= (await_expr | primary) ["**" u_expr] await_expr primary u_expr Thus, in an unparenthesized sequence of power and unary operators, the operators are evaluated from right to left (this does not constrain the evaluation order for the operands): -12 results in -1. -1**2 -1 The power operator has the same semantics as the built-in pow() function, when called with two arguments: it yields its left argument raised to the power of its right argument. The numeric arguments are first converted to a common type, and the result is of that type. pow() For int operands, the result has the same type as the operands unless the second argument is negative; in that case, all arguments are converted to float and a float result is delivered. For example, 102 returns 100, but 10-2 returns 0. 01. 10**2 100 10**-2 0. 01 Raising 0.