{
  "chunk_id": "python_official_python_official_library_d437b47da32ff4cc_9385f6f8e149_chunk_031",
  "original_doc_id": "python_official_python_official_library_d437b47da32ff4cc_9385f6f8e149",
  "content": "exc_traceback: Exception traceback, can be None. exc_traceback None err_msg: Error message, can be None. err_msg: Error message, can be None. err_msg None object: Object causing the exception, can be None. object: Object causing the exception, can be None. object None The default hook formats err_msg and object as: f'{err_msg}: {object. r}'; use “Exception ignored in” error message if err_msg is None. err_msg object f'{err_msg}: {object. r}' err_msg None sys. unraisablehook() can be overridden to control how unraisable exceptions are handled. sys. unraisablehook() See also excepthook() which handles uncaught exceptions. excepthook() Warning Storing exc_value using a custom hook can create a reference cycle. It should be cleared explicitly to break the reference cycle when the exception is no longer needed. exc_value Storing object using a custom hook can resurrect it if it is set to an object which is being finalized. Avoid storing object after the custom hook completes to avoid resurrecting objects. object object Raise an auditing event sys. unraisablehook with arguments hook, unraisable when an exception that cannot be handled occurs. The unraisable object is the same as what will be passed to the hook. If no hook has been set, hook may be None. Raise an auditing event sys. unraisablehook with arguments hook, unraisable when an exception that cannot be handled occurs. The unraisable object is the same as what will be passed to the hook. If no hook has been set, hook may be None. sys. unraisablehook None Added in version 3. 8. A string containing the version number of the Python interpreter plus additional information on the build number and compiler used. This string is displayed when the interactive interpreter is started. Do not extract version information out of it, rather, use version_info and the functions provided by the platform module. version_info platform The C API version for this interpreter. Programmers may find this useful when debugging version conflicts between Python and extension modules. A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial. All values except releaselevel are integers; the release level is 'alpha', 'beta', 'candidate', or 'final'. The version_info value corresponding to the Python version 2.",
  "title": "sys — System-specific parameters and functions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 31,
  "start_char": 68935,
  "end_char": 71257,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_d437b47da32ff4cc.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:04.446045"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_d437b47da32ff4cc_9385f6f8e149_chunk_031.txt"
}