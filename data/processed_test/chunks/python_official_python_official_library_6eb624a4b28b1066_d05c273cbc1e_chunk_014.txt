tzinfo None Equivalent to: datetime. fromtimestamp(time. time()) See also now(), fromtimestamp(). now() fromtimestamp() This method is functionally equivalent to now(), but without a tz parameter. now() tz Return the current local date and time. If optional argument tz is None or not specified, this is like today(), but, if possible, supplies more precision than can be gotten from going through a time. time() timestamp (for example, this may be possible on platforms supplying the C gettimeofday() function). None today() time. time() gettimeofday() If tz is not None, it must be an instance of a tzinfo subclass, and the current date and time are converted to tz’s time zone. None tzinfo This function is preferred over today() and utcnow(). today() utcnow() Note Subsequent calls to datetime. now() may return the same instant depending on the precision of the underlying clock. datetime. now() Return the current UTC date and time, with tzinfo None. tzinfo None This is like now(), but returns the current UTC date and time, as a naive datetime object. An aware current UTC datetime can be obtained by calling datetime. now(timezone. utc). See also now(). now() datetime datetime. now(timezone. utc) now() Warning Because naive datetime objects are treated by many datetime methods as local times, it is preferred to use aware datetimes to represent times in UTC. As such, the recommended way to create an object representing the current time in UTC is by calling datetime. now(timezone. utc). datetime datetime datetime. now(timezone. utc) Deprecated since version 3. 12: Use datetime. now() with UTC instead. datetime. now() UTC Return the local date and time corresponding to the POSIX timestamp, such as is returned by time. time(). If optional argument tz is None or not specified, the timestamp is converted to the platform’s local date and time, and the returned datetime object is naive. time. time() None datetime If tz is not None, it must be an instance of a tzinfo subclass, and the timestamp is converted to tz’s time zone. None tzinfo fromtimestamp() may raise OverflowError, if the timestamp is out of the range of values supported by the platform C localtime() or gmtime() functions, and OSError on localtime() or gmtime() failure. It’s common for this to be restricted to years in 1970 through 2038.