{
  "chunk_id": "python_official_python_official_library_96003c24587351a2_74918d6d2a40_chunk_029",
  "original_doc_id": "python_official_python_official_library_96003c24587351a2_74918d6d2a40",
  "content": "x will invoke the getter, c. x = value will invoke the setter, and del c. x the deleter. c. x c. x = value del c. x If given, doc will be the docstring of the property attribute. Otherwise, the property will copy fget’s docstring (if it exists). This makes it possible to create read-only properties easily using property() as a decorator: property() class Parrot: def __init__(self): self. _voltage = 100000 @property def voltage(self): \"\"\"Get the current voltage. \"\"\" return self. _voltage The @property decorator turns the voltage() method into a “getter” for a read-only attribute with the same name, and it sets the docstring for voltage to “Get the current voltage. ” @property voltage() A property object has getter, setter, and deleter methods usable as decorators that create a copy of the property with the corresponding accessor function set to the decorated function. This is best explained with an example: getter setter deleter class C: def __init__(self): self. _x = None @property def x(self): \"\"\"I'm the 'x' property. \"\"\" return self. _x @x. setter def x(self, value): self. _x = value @x. deleter def x(self): del self. _x This code is exactly equivalent to the first example. Be sure to give the additional functions the same name as the original property (x in this case. ) x The returned property object also has the attributes fget, fset, and fdel corresponding to the constructor arguments. fget fset fdel Changed in version 3. 5: The docstrings of property objects are now writeable. Attribute holding the name of the property. The name of the property can be changed at runtime. Added in version 3. 13. Rather than being a function, range is actually an immutable sequence type, as documented in Ranges and Sequence Types — list, tuple, range. range Return a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval(); otherwise, the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object.",
  "title": "Built-in Functions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 29,
  "start_char": 62002,
  "end_char": 64187,
  "token_count": 491,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_96003c24587351a2.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:31.020405"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_96003c24587351a2_74918d6d2a40_chunk_029.txt"
}