{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_012",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "ModuleType Caution With the exception of name, it is strongly recommended that you rely on spec and its attributes instead of any of the other individual attributes listed in this subsection. Note that updating an attribute on spec will not update the corresponding attribute on the module itself: __name__ __spec__ __spec__ >>> import typing >>> typing. __name__, typing. __spec__. name ('typing', 'typing') >>> typing. __spec__. name = 'spelling' >>> typing. __name__, typing. __spec__. name ('typing', 'spelling') >>> typing. __name__ = 'keyboard_smashing' >>> typing. __name__, typing. __spec__. name ('keyboard_smashing', 'spelling') The name used to uniquely identify the module in the import system. For a directly executed module, this will be set to \"main\". \"__main__\" This attribute must be set to the fully qualified name of the module. It is expected to match the value of module. spec. name. module. __spec__. name A record of the module’s import-system-related state. Set to the module spec that was used when importing the module. See Module specs for more details. module spec Added in version 3. 4. The package a module belongs to. If the module is top-level (that is, not a part of any specific package) then the attribute should be set to '' (the empty string). Otherwise, it should be set to the name of the module’s package (which can be equal to module. name if the module itself is a package). See PEP 366 for further details. '' module. __name__ This attribute is used instead of name to calculate explicit relative imports for main modules. It defaults to None for modules created dynamically using the types. ModuleType constructor; use importlib. util. module_from_spec() instead to ensure the attribute is set to a str. __name__ None types. ModuleType importlib. util. module_from_spec() str It is strongly recommended that you use module. spec. parent instead of module. package. package is now only used as a fallback if spec. parent is not set, and this fallback path is deprecated. module. __spec__. parent module. __package__ __package__ __spec__. parent Changed in version 3. 4: This attribute now defaults to None for modules created dynamically using the types. ModuleType constructor.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 12,
  "start_char": 27186,
  "end_char": 29407,
  "token_count": 495,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.704442"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_012.txt"
}