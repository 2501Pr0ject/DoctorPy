05; ENDIF; ''' for token in tokenize(statements): print(token) The tokenizer produces the following output: Token(type='IF', value='IF', line=2, column=4) Token(type='ID', value='quantity', line=2, column=7) Token(type='THEN', value='THEN', line=2, column=16) Token(type='ID', value='total', line=3, column=8) Token(type='ASSIGN', value=':=', line=3, column=14) Token(type='ID', value='total', line=3, column=17) Token(type='OP', value='+', line=3, column=23) Token(type='ID', value='price', line=3, column=25) Token(type='OP', value='*', line=3, column=31) Token(type='ID', value='quantity', line=3, column=33) Token(type='END', value=';', line=3, column=41) Token(type='ID', value='tax', line=4, column=8) Token(type='ASSIGN', value=':=', line=4, column=12) Token(type='ID', value='price', line=4, column=15) Token(type='OP', value='*', line=4, column=21) Token(type='NUMBER', value=0. 05, line=4, column=23) Token(type='END', value=';', line=4, column=27) Token(type='ENDIF', value='ENDIF', line=5, column=4) Token(type='END', value=';', line=5, column=9) Friedl, Jeffrey. Mastering Regular Expressions. 3rd ed. , O’Reilly Media, 2009. The third edition of the book no longer covers Python at all, but the first edition covered writing good regular expression patterns in great detail. ### Table of Contents re — Regular expression operations Regular Expression Syntax Module Contents Flags Functions Exceptions Regular Expression Objects Match Objects Regular Expression Examples Checking for a Pair Simulating scanf() search() vs. match() Making a Phonebook Text Munging Finding all Adverbs Finding all Adverbs and their Positions Raw String Notation Writing a Tokenizer re Regular Expression Syntax Module Contents Flags Functions Exceptions Flags Functions Exceptions Regular Expression Objects Match Objects Regular Expression Examples Checking for a Pair Simulating scanf() search() vs.