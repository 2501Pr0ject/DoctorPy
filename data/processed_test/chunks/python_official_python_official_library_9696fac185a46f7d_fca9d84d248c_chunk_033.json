{
  "chunk_id": "python_official_python_official_library_9696fac185a46f7d_fca9d84d248c_chunk_033",
  "original_doc_id": "python_official_python_official_library_9696fac185a46f7d_fca9d84d248c",
  "content": "\" # sieve(30) → 2 3 5 7 11 13 17 19 23 29 if n > 2: yield 2 data = bytearray((0, 1)) * (n // 2) for p in iter_index(data, 1, start=3, stop=isqrt(n) + 1): data[p*p : n : p+p] = bytes(len(range(p*p, n, p+p))) yield from iter_index(data, 1, start=3) def factor(n): \"Prime factors of n. \" # factor(99) → 3 3 11 # factor(1_000_000_000_000_007) → 47 59 360620266859 # factor(1_000_000_000_000_403) → 1000000000000403 for prime in sieve(isqrt(n) + 1): while not n % prime: yield prime n //= prime if n == 1: return if n > 1: yield n def is_prime(n): \"Return True if n is prime. \" # is_prime(1_000_000_000_000_403) → True return n > 1 and next(factor(n)) == n def totient(n): \"Count of natural numbers up to n that are coprime to n. \" #  # totient(12) → 4 because len([1, 5, 7, 11]) == 4 for prime in set(factor(n)): n -= n // prime return n itertools functools.",
  "title": "itertools — Functions creating iterators for efficient looping.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 33,
  "start_char": 53184,
  "end_char": 54038,
  "token_count": 329,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_9696fac185a46f7d.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:02.122195"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_9696fac185a46f7d_fca9d84d248c_chunk_033.txt"
}