ffffff microsecond YYYY-MM-DDTHH:MM:SS, if microsecond is 0 YYYY-MM-DDTHH:MM:SS, if microsecond is 0 YYYY-MM-DDTHH:MM:SS microsecond If utcoffset() does not return None, a string is appended, giving the UTC offset: utcoffset() None YYYY-MM-DDTHH:MM:SS. ffffff+HH:MM[:SS[. ffffff]], if microsecond is not 0 YYYY-MM-DDTHH:MM:SS. ffffff+HH:MM[:SS[. ffffff]], if microsecond is not 0 YYYY-MM-DDTHH:MM:SS. ffffff+HH:MM[:SS[. ffffff]] microsecond YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[. ffffff]], if microsecond is 0 YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[. ffffff]], if microsecond is 0 YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[. ffffff]] microsecond Examples: >>> from datetime import datetime, timezone >>> datetime(2019, 5, 18, 15, 17, 8, 132263). isoformat() '2019-05-18T15:17:08. 132263' >>> datetime(2019, 5, 18, 15, 17, tzinfo=timezone. utc). isoformat() '2019-05-18T15:17:00+00:00' The optional argument sep (default 'T') is a one-character separator, placed between the date and time portions of the result. For example: 'T' >>> from datetime import tzinfo, timedelta, datetime >>> class TZ(tzinfo):. """A time zone with an arbitrary, constant -06:39 offset. """. def utcoffset(self, dt):. return timedelta(hours=-6, minutes=-39). >>> datetime(2002, 12, 25, tzinfo=TZ()). isoformat(' ') '2002-12-25 00:00:00-06:39' >>> datetime(2009, 11, 27, microsecond=100, tzinfo=TZ()).