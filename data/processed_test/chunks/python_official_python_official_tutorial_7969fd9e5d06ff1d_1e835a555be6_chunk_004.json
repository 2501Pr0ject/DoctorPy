{
  "chunk_id": "python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6_chunk_004",
  "original_doc_id": "python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6",
  "content": "For example: raise >>> raise NameError('HiThere') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> raise NameError('HiThere') NameError: HiThere The sole argument to raise indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from BaseException, such as Exception or one of its subclasses). If an exception class is passed, it will be implicitly instantiated by calling its constructor with no arguments: raise BaseException Exception raise ValueError # shorthand for 'raise ValueError()' If you need to determine whether an exception was raised but don’t intend to handle it, a simpler form of the raise statement allows you to re-raise the exception: raise >>> try:. raise NameError('HiThere'). except NameError:. print('An exception flew by. '). raise. An exception flew by. Traceback (most recent call last): File \"<stdin>\", line 2, in <module> raise NameError('HiThere') NameError: HiThere ## 8. 5. Exception Chaining¶ If an unhandled exception occurs inside an except section, it will have the exception being handled attached to it and included in the error message: except >>> try:. open(\"database. sqlite\"). except OSError:. raise RuntimeError(\"unable to handle error\"). Traceback (most recent call last): File \"<stdin>\", line 2, in <module> open(\"database. sqlite\") ~~~~^^^^^^^^^^^^^^^^^^^ FileNotFoundError: [Errno 2] No such file or directory: 'database. sqlite' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"<stdin>\", line 4, in <module> raise RuntimeError(\"unable to handle error\") RuntimeError: unable to handle error To indicate that an exception is a direct consequence of another, the raise statement allows an optional from clause: raise from # exc must be exception instance or None. raise RuntimeError from exc This can be useful when you are transforming exceptions. For example: >>> def func():. raise ConnectionError. >>> try:. func(). except ConnectionError as exc:. raise RuntimeError('Failed to open database') from exc.",
  "title": "8. Errors and Exceptions.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 4,
  "start_char": 9067,
  "end_char": 11169,
  "token_count": 453,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_7969fd9e5d06ff1d.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:33.777407"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6_chunk_004.txt"
}