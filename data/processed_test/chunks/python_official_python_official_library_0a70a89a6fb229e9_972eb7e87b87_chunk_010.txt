Both the real and imaginary components of a complex number are formatted as floating-point numbers, according to the specified presentation type. They are separated by the mandatory sign of the imaginary part, the latter being terminated by a j suffix. If the presentation type is missing, the result will match the output of str() (complex numbers with a non-zero real part are also surrounded by parentheses), possibly altered by other format modifiers. complex float '%' j str() ### Format examples¶ This section contains examples of the str. format() syntax and comparison with the old %-formatting. str. format() % In most of the cases the syntax is similar to the old %-formatting, with the addition of the {} and with : used instead of %. For example, '%03. 2f' can be translated to '{:03. 2f}'. % {} : % '%03. 2f' '{:03. 2f}' The new format syntax also supports new and different options, shown in the following examples. Accessing arguments by position: >>> '{0}, {1}, {2}'. format('a', 'b', 'c') 'a, b, c' >>> '{}, {}, {}'. format('a', 'b', 'c') # 3. 1+ only 'a, b, c' >>> '{2}, {1}, {0}'. format('a', 'b', 'c') 'c, b, a' >>> '{2}, {1}, {0}'. format(*'abc') # unpacking argument sequence 'c, b, a' >>> '{0}{1}{0}'. format('abra', 'cad') # arguments' indices can be repeated 'abracadabra' Accessing arguments by name: >>> 'Coordinates: {latitude}, {longitude}'. format(latitude='37. 24N', longitude='-115. 81W') 'Coordinates: 37. 24N, -115. 81W' >>> coord = {'latitude': '37. 24N', 'longitude': '-115. 81W'} >>> 'Coordinates: {latitude}, {longitude}'. format(**coord) 'Coordinates: 37. 24N, -115. 81W' Accessing arguments’ attributes: >>> c = 3-5j >>> ('The complex number {0} is formed from the real part {0. real} '. 'and the imaginary part {0. imag}. ').