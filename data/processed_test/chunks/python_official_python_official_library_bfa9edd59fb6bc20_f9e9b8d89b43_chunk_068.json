{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_068",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "x in set len(set) for x in set There are currently two built-in set types, set and frozenset. The set type is mutable — the contents can be changed using methods like add() and remove(). Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set. The frozenset type is immutable and hashable — its contents cannot be altered after it is created; it can therefore be used as a dictionary key or as an element of another set. set frozenset set add() remove() frozenset Non-empty sets (not frozensets) can be created by placing a comma-separated list of elements within braces, for example: {'jack', 'sjoerd'}, in addition to the set constructor. {'jack', 'sjoerd'} set The constructors for both classes work the same: Return a new set or frozenset object whose elements are taken from iterable. The elements of a set must be hashable. To represent sets of sets, the inner sets must be frozenset objects. If iterable is not specified, a new empty set is returned. frozenset Sets can be created by several means: Use a comma-separated list of elements within braces: {'jack', 'sjoerd'} Use a comma-separated list of elements within braces: {'jack', 'sjoerd'} {'jack', 'sjoerd'} Use a set comprehension: {c for c in 'abracadabra' if c not in 'abc'} Use a set comprehension: {c for c in 'abracadabra' if c not in 'abc'} {c for c in 'abracadabra' if c not in 'abc'} Use the type constructor: set(), set('foobar'), set(['a', 'b', 'foo']) Use the type constructor: set(), set('foobar'), set(['a', 'b', 'foo']) set() set('foobar') set(['a', 'b', 'foo']) Instances of set and frozenset provide the following operations: set frozenset Return the number of elements in set s (cardinality of s). Test x for membership in s. Test x for non-membership in s. Return True if the set has no elements in common with other. Sets are disjoint if and only if their intersection is the empty set. True Test whether every element in the set is in other.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 68,
  "start_char": 138171,
  "end_char": 140160,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.240423"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_068.txt"
}