" identifier primary identifier __getattribute__() __getattr__() __getattribute__() AttributeError AttributeError __getattr__() subscription ::= primary "[" flexible_expression_list "]" primary flexible_expression_list __getitem__() __class_getitem__() __class_getitem__ __getitem__ tuple __getitem__() dict int slice str list tuple __getitem__() x[-1] x __getitem__() string del slicing ::= primary "[" slice_list "]" slice_list ::= slice_item ("," slice_item)* [","] slice_item ::= expression | proper_slice proper_slice ::= [lower_bound] ":" [upper_bound] [ ":" [stride] ] lower_bound ::= expression upper_bound ::= expression stride ::= expression primary slice_list slice_item slice_item expression proper_slice lower_bound upper_bound stride expression expression expression __getitem__() start stop step None call ::= primary "(" [argument_list [","] | comprehension] ")" argument_list ::= positional_arguments ["," starred_and_keywords] ["," keywords_arguments] | starred_and_keywords ["," keywords_arguments] | keywords_arguments positional_arguments ::= positional_item ("," positional_item)* positional_item ::= assignment_expression | "*" expression starred_and_keywords ::= ("*" expression | keyword_item) ("," "*" expression | "," keyword_item)* keywords_arguments ::= (keyword_item | "**" expression) ("," keyword_item | "," "**" expression)* keyword_item ::= identifier "=" expression primary argument_list comprehension positional_arguments starred_and_keywords keywords_arguments starred_and_keywords keywords_arguments keywords_arguments assignment_expression expression expression keyword_item expression keyword_item keyword_item expression keyword_item expression identifier expression __call__() TypeError None TypeError PyArg_ParseTuple() TypeError *identifier TypeError **identifier *expression expression f(x1, x2, *y, x3, x4) *expression **expression >>> def f(a, b):. print(a, b). >>> f(b=1, *(2,)) 2 1 >>> f(a=1, *(2,)) Traceback (most recent call last): File "<stdin>", line 1, in <module> TypeError: f() got multiple values for keyword argument 'a' >>> f(1, *(2,)) 1 2 *expression **expression expression TypeError **expression "max-temp Â°F" ** TypeError *identifier **identifier * ** * ** None return return None __call__() await_expr ::= "await" primary primary power ::= (await_expr | primary) ["**" u_expr] await_expr primary u_expr -1**2 -1 pow() 10**2 100 10**-2 0.