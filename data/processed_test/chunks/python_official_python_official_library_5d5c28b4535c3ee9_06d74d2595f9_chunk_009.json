{
  "chunk_id": "python_official_python_official_library_5d5c28b4535c3ee9_06d74d2595f9_chunk_009",
  "original_doc_id": "python_official_python_official_library_5d5c28b4535c3ee9_06d74d2595f9",
  "content": "This behavior is not JSON specification compliant, but is consistent with most JavaScript based encoders and decoders. Otherwise, it will be a ValueError to encode such floats. NaN Infinity -Infinity ValueError If sort_keys is true (default: False), then the output of dictionaries will be sorted by key; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis. False If indent is a non-negative integer or string, then JSON array elements and object members will be pretty-printed with that indent level. An indent level of 0, negative, or \"\" will only insert newlines. None (the default) selects the most compact representation. Using a positive integer indent indents that many spaces per level. If indent is a string (such as \"\\t\"), that string is used to indent each level. \"\" None \"\\t\" Changed in version 3. 2: Allow strings for indent in addition to integers. If specified, separators should be an (item_separator, key_separator) tuple. The default is (', ', ': ') if indent is None and (',', ': ') otherwise. To get the most compact JSON representation, you should specify (',', ':') to eliminate whitespace. (item_separator, key_separator) (', ', ': ') None (',', ': ') (',', ':') Changed in version 3. 4: Use (',', ': ') as default if indent is not None. (',', ': ') None If specified, default should be a function that gets called for objects that can’t otherwise be serialized. It should return a JSON encodable version of the object or raise a TypeError. If not specified, TypeError is raised. TypeError TypeError Changed in version 3. 6: All parameters are now keyword-only. Implement this method in a subclass such that it returns a serializable object for o, or calls the base implementation (to raise a TypeError). TypeError For example, to support arbitrary iterators, you could implement default() like this: default() def default(self, o): try: iterable = iter(o) except TypeError: pass else: return list(iterable) # Let the base class default method raise the TypeError return super(). default(o) Return a JSON string representation of a Python data structure, o. For example: >>> json. JSONEncoder().",
  "title": "json — JSON encoder and decoder.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 9,
  "start_char": 18691,
  "end_char": 20866,
  "token_count": 472,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_5d5c28b4535c3ee9.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:37.146770"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_5d5c28b4535c3ee9_06d74d2595f9_chunk_009.txt"
}