{
  "chunk_id": "external_external_guides_1811034afddfd51a_93df0401e39e_chunk_013",
  "original_doc_id": "external_external_guides_1811034afddfd51a_93df0401e39e",
  "content": "py [-h] [-v | -q] x y calculate X to the power of Y positional arguments: x the base y the exponent options: -h, --help show this help message and exit -v, --verbose -q, --quiet The strings usage:, positional arguments:, options: and show this help message and exit are all translatable. usage: positional arguments: options: show this help message and exit In order to translate these strings, they must first be extracted into a. po file. For example, using Babel, run this command:. po $ pybabel extract -o messages. po /usr/lib/python3. 12/argparse. py This command will extract all translatable strings from the argparse module and output them into a file named messages. po. This command assumes that your Python installation is in /usr/lib. argparse messages. po /usr/lib You can find out the location of the argparse module on your system using this script: argparse import argparse print(argparse. __file__) Once the messages in the. po file are translated and the translations are installed using gettext, argparse will be able to display the translated messages. po gettext argparse To translate your own strings in the argparse output, use gettext. argparse gettext ## Custom type converters¶ The argparse module allows you to specify custom type converters for your command-line arguments. This allows you to modify user input before it’s stored in the argparse. Namespace. This can be useful when you need to pre-process the input before it is used in your program. argparse argparse. Namespace When using a custom type converter, you can use any callable that takes a single string argument (the argument value) and returns the converted value. However, if you need to handle more complex scenarios, you can use a custom action class with the action parameter instead. For example, let’s say you want to handle arguments with different prefixes and process them accordingly: import argparse parser = argparse. ArgumentParser(prefix_chars='-+') parser. add_argument('-a', metavar='<value>', action='append', type=lambda x: ('-', x)) parser. add_argument('+a', metavar='<value>', action='append', type=lambda x: ('+', x)) args = parser. parse_args() print(args) Output: $ python prog.",
  "title": "Argparse Tutorial.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 13,
  "start_char": 26334,
  "end_char": 28531,
  "token_count": 461,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_1811034afddfd51a.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:39.494717"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_1811034afddfd51a_93df0401e39e_chunk_013.txt"
}