None Note that filter(function, iterable) is equivalent to the generator expression (item for item in iterable if function(item)) if function is not None and (item for item in iterable if item) if function is None. filter(function, iterable) (item for item in iterable if function(item)) None (item for item in iterable if item) None See itertools. filterfalse() for the complementary function that returns elements of iterable for which function is false. itertools. filterfalse() Return a floating-point number constructed from a number or a string. Examples: >>> float('+1. 23') 1. 23 >>> float(' -12345\n') -12345. 0 >>> float('1e-003') 0. 001 >>> float('+1E6') 1000000. 0 >>> float('-Infinity') -inf If the argument is a string, it should contain a decimal number, optionally preceded by a sign, and optionally embedded in whitespace. The optional sign may be '+' or '-'; a '+' sign has no effect on the value produced. The argument may also be a string representing a NaN (not-a-number), or positive or negative infinity. More precisely, the input must conform to the floatvalue production rule in the following grammar, after leading and trailing whitespace characters are removed: '+' '-' '+' floatvalue sign ::= "+" | "-" infinity ::= "Infinity" | "inf" nan ::= "nan" digit ::= <a Unicode decimal digit, i. e. characters in Unicode general category Nd> digitpart ::= digit (["_"] digit)* number ::= [digitpart] ". " digitpart | digitpart [". "] exponent ::= ("e" | "E") [sign] digitpart floatnumber ::= number [exponent] absfloatvalue ::= floatnumber | infinity | nan floatvalue ::= [sign] absfloatvalue digit digit digitpart digitpart digitpart sign digitpart number exponent floatnumber infinity nan sign absfloatvalue Case is not significant, so, for example, “inf”, “Inf”, “INFINITY”, and “iNfINity” are all acceptable spellings for positive infinity. Otherwise, if the argument is an integer or a floating-point number, a floating-point number with the same value (within Python’s floating-point precision) is returned. If the argument is outside the range of a Python float, an OverflowError will be raised.