{
  "chunk_id": "python_official_python_official_library_ccf716b46391ca56_40d31454785a_chunk_017",
  "original_doc_id": "python_official_python_official_library_ccf716b46391ca56_40d31454785a",
  "content": "When a line contains a # that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such # through the end of the line are ignored. *. (. : (. P<. > (. : *. # # This means that the two following regular expression objects that match a decimal number are functionally equal: a = re. compile(r\"\"\"\\d + # the integral part \\. # the decimal point \\d * # some fractional digits\"\"\", re. X) b = re. compile(r\"\\d+\\. \\d*\") Corresponds to the inline flag (. x). (. x) ### Functions¶ Compile a regular expression pattern into a regular expression object, which can be used for matching using its match(), search() and other methods, described below. match() search() The expression’s behaviour can be modified by specifying a flags value. Values can be any of the flags variables, combined using bitwise OR (the | operator). | The sequence prog = re. compile(pattern) result = prog. match(string) is equivalent to result = re. match(pattern, string) but using re. compile() and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program. re. compile() Note The compiled versions of the most recent patterns passed to re. compile() and the module-level matching functions are cached, so programs that use only a few regular expressions at a time needn’t worry about compiling regular expressions. re. compile() Scan through string looking for the first location where the regular expression pattern produces a match, and return a corresponding Match. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string. Match None The expression’s behaviour can be modified by specifying a flags value. Values can be any of the flags variables, combined using bitwise OR (the | operator). | If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding Match. Return None if the string does not match the pattern; note that this is different from a zero-length match. Match None Note that even in MULTILINE mode, re. match() will only match at the beginning of the string and not at the beginning of each line. MULTILINE re.",
  "title": "re — Regular expression operations.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 17,
  "start_char": 32777,
  "end_char": 35061,
  "token_count": 479,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_ccf716b46391ca56.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:36.816700"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_ccf716b46391ca56_40d31454785a_chunk_017.txt"
}