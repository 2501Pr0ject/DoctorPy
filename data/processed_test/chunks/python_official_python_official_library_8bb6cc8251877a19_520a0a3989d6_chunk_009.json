{
  "chunk_id": "python_official_python_official_library_8bb6cc8251877a19_520a0a3989d6_chunk_009",
  "original_doc_id": "python_official_python_official_library_8bb6cc8251877a19_520a0a3989d6",
  "content": "registry[object] <function fun at 0x103fe0000> Added in version 3. 4. Changed in version 3. 7: The register() attribute now supports using type annotations. register() Changed in version 3. 11: The register() attribute now supports types. UnionType and typing. Union as type annotations. register() types. UnionType typing. Union Transform a method into a single-dispatch generic function. To define a generic method, decorate it with the @singledispatchmethod decorator. When defining a function using @singledispatchmethod, note that the dispatch happens on the type of the first non-self or non-cls argument: @singledispatchmethod @singledispatchmethod class Negator: @singledispatchmethod def neg(self, arg): raise NotImplementedError(\"Cannot negate a\") @neg. register def _(self, arg: int): return -arg @neg. register def _(self, arg: bool): return not arg @singledispatchmethod supports nesting with other decorators such as @classmethod. Note that to allow for dispatcher. register, singledispatchmethod must be the outer most decorator. Here is the Negator class with the neg methods bound to the class, rather than an instance of the class: @singledispatchmethod @classmethod dispatcher. register singledispatchmethod Negator neg class Negator: @singledispatchmethod @classmethod def neg(cls, arg): raise NotImplementedError(\"Cannot negate a\") @neg. register @classmethod def _(cls, arg: int): return -arg @neg. register @classmethod def _(cls, arg: bool): return not arg The same pattern can be used for other similar decorators: @staticmethod, @abstractmethod, and others. @staticmethod @abstractmethod Added in version 3. 8. Update a wrapper function to look like the wrapped function. The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function. The default values for these arguments are the module level constants WRAPPER_ASSIGNMENTS (which assigns to the wrapper function’s module, name, qualname, annotations, type_params, and doc, the documentation string) and WRAPPER_UPDATES (which updates the wrapper function’s dict, i. e. the instance dictionary).",
  "title": "functools — Higher-order functions and operations on callable objects.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 9,
  "start_char": 19623,
  "end_char": 21911,
  "token_count": 493,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_8bb6cc8251877a19.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:09.505117"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_8bb6cc8251877a19_520a0a3989d6_chunk_009.txt"
}