{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_031",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": ") This is done both for efficiency reasons and because otherwise getattr() would have no way to access other attributes of the instance. Note that at least for instance variables, you can take total control by not inserting any values in the instance attribute dictionary (but instead inserting them in another object). See the getattribute() method below for a way to actually get total control over attribute access. __getattr__() __getattr__() __setattr__() __getattr__() __getattribute__() Called unconditionally to implement attribute accesses for instances of the class. If the class also defines getattr(), the latter will not be called unless getattribute() either calls it explicitly or raises an AttributeError. This method should return the (computed) attribute value or raise an AttributeError exception. In order to avoid infinite recursion in this method, its implementation should always call the base class method with the same name to access any attributes it needs, for example, object. getattribute(self, name). __getattr__() __getattribute__() AttributeError AttributeError object. __getattribute__(self, name) Note This method may still be bypassed when looking up special methods as the result of implicit invocation via language syntax or built-in functions. See Special method lookup. For certain sensitive attribute accesses, raises an auditing event object. getattr with arguments obj and name. For certain sensitive attribute accesses, raises an auditing event object. getattr with arguments obj and name. object. __getattr__ obj name Called when an attribute assignment is attempted. This is called instead of the normal mechanism (i. e. store the value in the instance dictionary). name is the attribute name, value is the value to be assigned to it. If setattr() wants to assign to an instance attribute, it should call the base class method with the same name, for example, object. setattr(self, name, value). __setattr__() object. __setattr__(self, name, value) For certain sensitive attribute assignments, raises an auditing event object. setattr with arguments obj, name, value. For certain sensitive attribute assignments, raises an auditing event object. setattr with arguments obj, name, value. object. __setattr__ obj name value Like setattr() but for attribute deletion instead of assignment. This should only be implemented if del obj. name is meaningful for the object. __setattr__() del obj. name For certain sensitive attribute deletions, raises an auditing event object. delattr with arguments obj and name. For certain sensitive attribute deletions, raises an auditing event object.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 31,
  "start_char": 71262,
  "end_char": 73889,
  "token_count": 496,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.722418"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_031.txt"
}