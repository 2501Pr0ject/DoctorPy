{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_040",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "142857' >>> f'{Fraction(1, 7):_^+10}' '___+1/7___' ### printf-style String FormattingÂ¶ printf Note The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals, the str. format() interface, or template strings may help avoid these errors. Each of these alternatives provides their own trade-offs and benefits of simplicity, flexibility, and/or extensibility. str. format() String objects have one unique built-in operation: the % operator (modulo). This is also known as the string formatting or interpolation operator. Given format % values (where format is a string), % conversion specifications in format are replaced with zero or more elements of values. The effect is similar to using the sprintf() function in the C language. For example: % format % values % sprintf() >>> print('%s has %d quote types. ' % ('Python', 2)) Python has 2 quote types. If format requires a single argument, values may be a single non-tuple object. [5] Otherwise, values must be a tuple with exactly the number of items specified by the format string, or a single mapping object (for example, a dictionary). A conversion specifier contains two or more characters and has the following components, which must occur in this order: The '%' character, which marks the start of the specifier. The '%' character, which marks the start of the specifier. '%' Mapping key (optional), consisting of a parenthesised sequence of characters (for example, (somename)). Mapping key (optional), consisting of a parenthesised sequence of characters (for example, (somename)). (somename) Conversion flags (optional), which affect the result of some conversion types. Conversion flags (optional), which affect the result of some conversion types. Minimum field width (optional). If specified as an '' (asterisk), the actual width is read from the next element of the tuple in values, and the object to convert comes after the minimum field width and optional precision. Minimum field width (optional). If specified as an '' (asterisk), the actual width is read from the next element of the tuple in values, and the object to convert comes after the minimum field width and optional precision. '*' Precision (optional), given as a '. ' (dot) followed by the precision.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 40,
  "start_char": 80479,
  "end_char": 82864,
  "token_count": 496,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.215751"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_040.txt"
}