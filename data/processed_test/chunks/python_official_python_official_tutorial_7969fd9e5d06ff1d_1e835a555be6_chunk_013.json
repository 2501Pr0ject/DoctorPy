{
  "chunk_id": "python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6_chunk_013",
  "original_doc_id": "python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6",
  "content": "except OSError:. raise RuntimeError from None. Traceback (most recent call last): File \"<stdin>\", line 4, in <module> raise RuntimeError from None RuntimeError Exception try >>> try:. raise KeyboardInterrupt. finally:. print('Goodbye, world. '). Goodbye, world. Traceback (most recent call last): File \"<stdin>\", line 2, in <module> raise KeyboardInterrupt KeyboardInterrupt finally finally try finally try try except except finally except else finally finally break continue return try break continue return finally break continue return finally return finally return try return >>> def bool_return():. try:. return True. finally:. return False. >>> bool_return() False >>> def divide(x, y):. try:. result = x / y. except ZeroDivisionError:. print(\"division by zero. \"). else:. print(\"result is\", result). finally:. print(\"executing finally clause\"). >>> divide(2, 1) result is 2. 0 executing finally clause >>> divide(2, 0) division by zero. executing finally clause >>> divide(\"2\", \"1\") executing finally clause Traceback (most recent call last): File \"<stdin>\", line 1, in <module> divide(\"2\", \"1\") ~~~~~~^^^^^^^^^^ File \"<stdin>\", line 3, in divide result = x / y ~~^~~ TypeError: unsupported operand type(s) for /: 'str' and 'str' finally TypeError except finally finally for line in open(\"myfile. txt\"): print(line, end=\"\") with with open(\"myfile. txt\") as f: for line in f: print(line, end=\"\") ExceptionGroup >>> def f():. excs = [OSError('error 1'), SystemError('error 2')]. raise ExceptionGroup('there were problems', excs). >>> f() + Exception Group Traceback (most recent call last): | File \"<stdin>\", line 1, in <module> | f() | ~^^ | File \"<stdin>\", line 3, in f | raise ExceptionGroup('there were problems', excs) | ExceptionGroup: there were problems (2 sub-exceptions) +-+---------------- 1 ---------------- | OSError: error 1 +---------------- 2 ---------------- | SystemError: error 2 +------------------------------------ >>> try:. f(). except Exception as e:. print(f'caught {type(e)}: e').",
  "title": "8. Errors and Exceptions.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 13,
  "start_char": 26901,
  "end_char": 28912,
  "token_count": 484,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_7969fd9e5d06ff1d.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:33.784858"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6_chunk_013.txt"
}