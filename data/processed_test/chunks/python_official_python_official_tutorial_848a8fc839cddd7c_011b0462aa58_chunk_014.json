{
  "chunk_id": "python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58_chunk_014",
  "original_doc_id": "python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58",
  "content": "print(pos_only, standard, kwd_only) The first function definition, standard_arg, the most familiar form, places no restrictions on the calling convention and arguments may be passed by position or keyword: standard_arg >>> standard_arg(2) 2 >>> standard_arg(arg=2) 2 The second function pos_only_arg is restricted to only use positional parameters as there is a / in the function definition: pos_only_arg / >>> pos_only_arg(1) 1 >>> pos_only_arg(arg=1) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: pos_only_arg() got some positional-only arguments passed as keyword arguments: 'arg' The third function kwd_only_arg only allows keyword arguments as indicated by a * in the function definition: kwd_only_arg * >>> kwd_only_arg(3) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given >>> kwd_only_arg(arg=3) 3 And the last uses all three calling conventions in the same function definition: >>> combined_example(1, 2, 3) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: combined_example() takes 2 positional arguments but 3 were given >>> combined_example(1, 2, kwd_only=3) 1 2 3 >>> combined_example(1, standard=2, kwd_only=3) 1 2 3 >>> combined_example(pos_only=1, standard=2, kwd_only=3) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: combined_example() got some positional-only arguments passed as keyword arguments: 'pos_only' Finally, consider this function definition which has a potential collision between the positional argument name and kwds which has name as a key: name **kwds name def foo(name, **kwds): return 'name' in kwds There is no possible call that will make it return True as the keyword 'name' will always bind to the first parameter.",
  "title": "4. More Control Flow Tools.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 14,
  "start_char": 27193,
  "end_char": 29042,
  "token_count": 456,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_848a8fc839cddd7c.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:37.616976"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58_chunk_014.txt"
}