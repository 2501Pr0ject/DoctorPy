{
  "chunk_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_007",
  "original_doc_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7",
  "content": "repr(set('supercalifragilisticexpialidocious')) \"{'a', 'c', 'd', 'e', 'f', 'g',. }\" pprint >>> import pprint >>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',. 'yellow'], 'blue']]]. >>> pprint. pprint(t, width=30) [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta', 'yellow'], 'blue']]] textwrap >>> import textwrap >>> doc = \"\"\"The wrap() method is just like fill() except that it returns. a list of strings instead of one big string with newlines to separate. the wrapped lines. \"\"\". >>> print(textwrap. fill(doc, width=40)) The wrap() method is just like fill() except that it returns a list of strings instead of one big string with newlines to separate the wrapped lines. locale >>> import locale >>> locale. setlocale(locale. LC_ALL, 'English_United States. 1252') 'English_United States. 1252' >>> conv = locale. localeconv() # get a mapping of conventions >>> x = 1234567. 8 >>> locale. format_string(\"%d\", x, grouping=True) '1,234,567' >>> locale. format_string(\"%s%. *f\", (conv['currency_symbol'],. conv['frac_digits'], x), grouping=True) '$1,234,567. 80' string Template $ $$ $ >>> from string import Template >>> t = Template('${village}folk send $$10 to $cause. ') >>> t. substitute(village='Nottingham', cause='the ditch fund') 'Nottinghamfolk send $10 to the ditch fund. ' substitute() KeyError safe_substitute() >>> t = Template('Return the $item to $owner. ') >>> d = dict(item='unladen swallow') >>> t. substitute(d) Traceback (most recent call last):. KeyError: 'owner' >>> t. safe_substitute(d) 'Return the unladen swallow to $owner. ' >>> import time, os. path >>> photofiles = ['img_1074. jpg', 'img_1076. jpg', 'img_1077. jpg'] >>> class BatchRename(Template):. delimiter = '%'.",
  "title": "11. Brief Tour of the Standard Library â€” Part II.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 7,
  "start_char": 14711,
  "end_char": 16444,
  "token_count": 486,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_df4c6c63651fc819.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.714884"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_007.txt"
}