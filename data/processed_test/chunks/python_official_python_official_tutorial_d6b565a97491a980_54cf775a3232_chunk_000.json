{
  "chunk_id": "python_official_python_official_tutorial_d6b565a97491a980_54cf775a3232_chunk_000",
  "original_doc_id": "python_official_python_official_tutorial_d6b565a97491a980_54cf775a3232",
  "content": "3. An Informal Introduction to Python. 13. 5 Source:  3. An Informal Introduction to Python¶ In the following examples, input and output are distinguished by the presence or absence of prompts (>>> and …): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command. You can use the “Copy” button (it appears in the upper-right corner when hovering over or tapping a code example), which strips prompts and omits output, to copy and paste the input lines into your interpreter. Many of the examples in this manual, even those entered at the interactive prompt, include comments. Comments in Python start with the hash character, #, and extend to the end of the physical line. A comment may appear at the start of a line or following whitespace or code, but not within a string literal. A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples. # Some examples: # this is the first comment spam = 1 # and this is the second comment #. and now a third. text = \"# This is not a comment because it's inside quotes. \" ## 3. 1. Using Python as a Calculator¶ Let’s try some simple Python commands. Start the interpreter and wait for the primary prompt, >>>. (It shouldn’t take long. ) >>> ### 3. 1. 1. Numbers¶ The interpreter acts as a simple calculator: you can type an expression at it and it will write the value. Expression syntax is straightforward: the operators +, -, * and / can be used to perform arithmetic; parentheses (()) can be used for grouping. For example: + - * / () >>> 2 + 2 4 >>> 50 - 5*6 20 >>> (50 - 5*6) / 4 5. 0 >>> 8 / 5 # division always returns a floating-point number 1. 6 The integer numbers (e. g. 2, 4, 20) have type int, the ones with a fractional part (e. g. 5.",
  "title": "3. An Informal Introduction to Python.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 0,
  "start_char": 0,
  "end_char": 2053,
  "token_count": 499,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_d6b565a97491a980.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:31.158000"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_d6b565a97491a980_54cf775a3232_chunk_000.txt"
}