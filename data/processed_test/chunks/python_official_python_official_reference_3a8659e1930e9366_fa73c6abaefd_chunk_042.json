{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_042",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "Some ideas that have been explored include enum, logging, interface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource locking/synchronization. ### 3. 3. 4. Customizing instance and subclass checks¶ The following methods are used to override the default behavior of the isinstance() and issubclass() built-in functions. isinstance() issubclass() In particular, the metaclass abc. ABCMeta implements these methods in order to allow the addition of Abstract Base Classes (ABCs) as “virtual base classes” to any class or type (including built-in types), including other ABCs. abc. ABCMeta Return true if instance should be considered a (direct or indirect) instance of class. If defined, called to implement isinstance(instance, class). isinstance(instance, class) Return true if subclass should be considered a (direct or indirect) subclass of class. If defined, called to implement issubclass(subclass, class). issubclass(subclass, class) Note that these methods are looked up on the type (metaclass) of a class. They cannot be defined as class methods in the actual class. This is consistent with the lookup of special methods that are called on instances, only in this case the instance is itself a class. See also Includes the specification for customizing isinstance() and issubclass() behavior through instancecheck() and subclasscheck(), with motivation for this functionality in the context of adding Abstract Base Classes (see the abc module) to the language. isinstance() issubclass() __instancecheck__() __subclasscheck__() abc ### 3. 3. 5. Emulating generic types¶ When using type annotations, it is often useful to parameterize a generic type using Python’s square-brackets notation. For example, the annotation list[int] might be used to signify a list in which all the elements are of type int. list[int] list int See also Introducing Python’s framework for type annotations Documentation for objects representing parameterized generic classes typing. Generic Documentation on how to implement generic classes that can be parameterized at runtime and understood by static type-checkers. A class can generally only be parameterized if it defines the special class method class_getitem(). __class_getitem__() Return an object representing the specialization of a generic class by type arguments found in key. When defined on a class, class_getitem() is automatically a class method.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 42,
  "start_char": 96576,
  "end_char": 99023,
  "token_count": 483,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.732335"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_042.txt"
}