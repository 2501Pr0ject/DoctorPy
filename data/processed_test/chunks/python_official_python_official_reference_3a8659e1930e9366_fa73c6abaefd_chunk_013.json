{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_013",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "Previously the attribute was optional. None types. ModuleType Changed in version 3. 6: The value of package is expected to be the same as spec. parent. package is now only used as a fallback during import resolution if spec. parent is not defined. __package__ __spec__. parent __package__ __spec__. parent Changed in version 3. 10: ImportWarning is raised if an import resolution falls back to package instead of spec. parent. ImportWarning __package__ __spec__. parent Changed in version 3. 12: Raise DeprecationWarning instead of ImportWarning when falling back to package during import resolution. DeprecationWarning ImportWarning __package__ Deprecated since version 3. 13, will be removed in version 3. 15: package will cease to be set or taken into consideration by the import system or standard library. __package__ The loader object that the import machinery used to load the module. This attribute is mostly useful for introspection, but can be used for additional loader-specific functionality, for example getting data associated with a loader. loader defaults to None for modules created dynamically using the types. ModuleType constructor; use importlib. util. module_from_spec() instead to ensure the attribute is set to a loader object. __loader__ None types. ModuleType importlib. util. module_from_spec() It is strongly recommended that you use module. spec. loader instead of module. loader. module. __spec__. loader module. __loader__ Changed in version 3. 4: This attribute now defaults to None for modules created dynamically using the types. ModuleType constructor. Previously the attribute was optional. None types. ModuleType Deprecated since version 3. 12, will be removed in version 3. 16: Setting loader on a module while failing to set spec. loader is deprecated. In Python 3. 16, loader will cease to be set or taken into consideration by the import system or the standard library. __loader__ __spec__. loader __loader__ A (possibly empty) sequence of strings enumerating the locations where the packageâ€™s submodules will be found. Non-package modules should not have a path attribute. See path attributes on modules for more details. __path__ It is strongly recommended that you use module. spec. submodule_search_locations instead of module. path. module. __spec__. submodule_search_locations module.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 13,
  "start_char": 29407,
  "end_char": 31738,
  "token_count": 490,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.705315"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_013.txt"
}