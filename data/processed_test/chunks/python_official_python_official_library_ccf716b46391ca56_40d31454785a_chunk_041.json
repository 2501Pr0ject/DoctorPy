{
  "chunk_id": "python_official_python_official_library_ccf716b46391ca56_40d31454785a_chunk_041",
  "original_doc_id": "python_official_python_official_library_ccf716b46391ca56_40d31454785a",
  "content": "Match object; span=(0, 1), match='d'> >>> pattern. search(\"dog\", 1) # No match; search doesn't include the \"d\" Match None search() >>> pattern = re. compile(\"o\") >>> pattern. match(\"dog\") # No match as \"o\" is not at the start of \"dog\". >>> pattern. match(\"dog\", 1) # Match as \"o\" is the 2nd character of \"dog\". <re. Match object; span=(1, 2), match='o'> search() Match None search() >>> pattern = re. compile(\"o[gh]\") >>> pattern. fullmatch(\"dog\") # No match as \"o\" is not at the start of \"dog\". >>> pattern. fullmatch(\"ogre\") # No match as not the full string matches. >>> pattern. fullmatch(\"doggie\", 1, 3) # Matches within given limits. <re. Match object; span=(1, 3), match='og'> split() findall() search() finditer() search() sub() subn() compile() (. ) UNICODE (. P<id>) copy. copy() copy. deepcopy() True match() search() None if match = re. search(pattern, string) if match: process(match) match search re. Match [] sub() \\n \\1 \\2 \\g<1> \\g<name> \\g<0> IndexError None >>> m = re. match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\") >>> m. group(0) # The entire match 'Isaac Newton' >>> m. group(1) # The first parenthesized subgroup. 'Isaac' >>> m. group(2) # The second parenthesized subgroup. 'Newton' >>> m. group(1, 2) # Multiple arguments give us a tuple. ('Isaac', 'Newton') (. P<name>. ) IndexError >>> m = re. match(r\"(. P<first_name>\\w+) (. P<last_name>\\w+)\", \"Malcolm Reynolds\") >>> m. group('first_name') 'Malcolm' >>> m. group('last_name') 'Reynolds' >>> m. group(1) 'Malcolm' >>> m. group(2) 'Reynolds' >>> m = re. match(r\"(.",
  "title": "re â€” Regular expression operations.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 41,
  "start_char": 74079,
  "end_char": 75622,
  "token_count": 494,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_ccf716b46391ca56.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:36.837754"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_ccf716b46391ca56_40d31454785a_chunk_041.txt"
}