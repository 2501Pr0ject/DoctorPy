{
  "chunk_id": "python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c_chunk_000",
  "original_doc_id": "python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c",
  "content": "5. The import system. 13. 5 Source:  5. The import system¶ Python code in one module gains access to the code in another module by the process of importing it. The import statement is the most common way of invoking the import machinery, but it is not the only way. Functions such as importlib. import_module() and built-in import() can also be used to invoke the import machinery. import importlib. import_module() __import__() The import statement combines two operations; it searches for the named module, then it binds the results of that search to a name in the local scope. The search operation of the import statement is defined as a call to the import() function, with the appropriate arguments. The return value of import() is used to perform the name binding operation of the import statement. See the import statement for the exact details of that name binding operation. import import __import__() __import__() import import A direct call to import() performs only the module search and, if found, the module creation operation. While certain side-effects may occur, such as the importing of parent packages, and the updating of various caches (including sys. modules), only the import statement performs a name binding operation. __import__() sys. modules import When an import statement is executed, the standard builtin import() function is called. Other mechanisms for invoking the import system (such as importlib. import_module()) may choose to bypass import() and use their own solutions to implement import semantics. import __import__() importlib. import_module() __import__() When a module is first imported, Python searches for the module and if found, it creates a module object [1], initializing it. If the named module cannot be found, a ModuleNotFoundError is raised. Python implements various strategies to search for the named module when the import machinery is invoked. These strategies can be modified and extended by using various hooks described in the sections below. ModuleNotFoundError Changed in version 3. 3: The import system has been updated to fully implement the second phase of PEP 302. There is no longer any implicit import machinery - the full import system is exposed through sys. meta_path. In addition, native namespace package support has been implemented (see PEP 420). sys. meta_path ## 5. 1. importlib¶ importlib The importlib module provides a rich API for interacting with the import system. For example importlib.",
  "title": "5. The import system.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 0,
  "start_char": 0,
  "end_char": 2470,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_d33d7142ec98a66a.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:39.001306"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_d33d7142ec98a66a_04aff2e9a15c_chunk_000.txt"
}