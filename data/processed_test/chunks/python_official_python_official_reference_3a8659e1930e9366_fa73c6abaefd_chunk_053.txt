Awaitable Objects¶ An awaitable object generally implements an await() method. Coroutine objects returned from async def functions are awaitable. __await__() async def Note The generator iterator objects returned from generators decorated with types. coroutine() are also awaitable, but they do not implement await(). types. coroutine() __await__() Must return an iterator. Should be used to implement awaitable objects. For instance, asyncio. Future implements this method to be compatible with the await expression. The object class itself is not awaitable and does not provide this method. asyncio. Future await object Note The language doesn’t place any restriction on the type or value of the objects yielded by the iterator returned by await, as this is specific to the implementation of the asynchronous execution framework (e. g. asyncio) that will be managing the awaitable object. __await__ asyncio Added in version 3. 5. See also PEP 492 for additional information about awaitable objects. ### 3. 4. 2. Coroutine Objects¶ Coroutine objects are awaitable objects. A coroutine’s execution can be controlled by calling await() and iterating over the result. When the coroutine has finished executing and returns, the iterator raises StopIteration, and the exception’s value attribute holds the return value. If the coroutine raises an exception, it is propagated by the iterator. Coroutines should not directly raise unhandled StopIteration exceptions. __await__() StopIteration value StopIteration Coroutines also have the methods listed below, which are analogous to those of generators (see Generator-iterator methods). However, unlike generators, coroutines do not directly support iteration. Changed in version 3. 5. 2: It is a RuntimeError to await on a coroutine more than once. RuntimeError Starts or resumes execution of the coroutine. If value is None, this is equivalent to advancing the iterator returned by await(). If value is not None, this method delegates to the send() method of the iterator that caused the coroutine to suspend. The result (return value, StopIteration, or other exception) is the same as when iterating over the await() return value, described above. None __await__() None send() StopIteration __await__() Raises the specified exception in the coroutine. This method delegates to the throw() method of the iterator that caused the coroutine to suspend, if it has such a method. Otherwise, the exception is raised at the suspension point.