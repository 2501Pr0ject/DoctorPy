{
  "chunk_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_020",
  "original_doc_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40",
  "content": "Regular expressions are also commonly used to modify strings in various ways, using the following pattern methods: Method/Attribute Purpose split() split() Split the string into a list, splitting it wherever the RE matches sub() sub() Find all substrings where the RE matches, and replace them with a different string subn() subn() Does the same thing as sub(), but returns the new string and the number of replacements sub() ### Splitting Strings¶ The split() method of a pattern splits a string apart wherever the RE matches, returning a list of the pieces. It’s similar to the split() method of strings but provides much more generality in the delimiters that you can split by; string split() only supports splitting by whitespace or by a fixed string. As you’d expect, there’s a module-level re. split() function, too. split() split() split() re. split() Split string by the matches of the regular expression. If capturing parentheses are used in the RE, then their contents will also be returned as part of the resulting list. If maxsplit is nonzero, at most maxsplit splits are performed. You can limit the number of splits made, by passing a value for maxsplit. When maxsplit is nonzero, at most maxsplit splits will be made, and the remainder of the string is returned as the final element of the list. In the following example, the delimiter is any sequence of non-alphanumeric characters. >>> p = re. compile(r'\\W+') >>> p. split('This is a test, short and sweet, of split(). ') ['This', 'is', 'a', 'test', 'short', 'and', 'sweet', 'of', 'split', ''] >>> p. split('This is a test, short and sweet, of split(). ', 3) ['This', 'is', 'a', 'test, short and sweet, of split(). '] Sometimes you’re not only interested in what the text between delimiters is, but also need to know what the delimiter was. If capturing parentheses are used in the RE, then their values are also returned as part of the list. Compare the following calls: >>> p = re. compile(r'\\W+') >>> p2 = re. compile(r'(\\W+)') >>> p. split('This. is a test. ') ['This', 'is', 'a', 'test', ''] >>> p2. split('This.",
  "title": "Regular Expression HOWTO.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 20,
  "start_char": 40632,
  "end_char": 42716,
  "token_count": 498,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_ac8c5a4a74040ab8.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:41.047273"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_020.txt"
}