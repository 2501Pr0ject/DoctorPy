To prevent this, the caller must explicitly close the async generator by calling aclose() method to finalize the generator and ultimately detach it from the event loop. break aclose() In an asynchronous generator function, yield expressions are allowed anywhere in a try construct. However, if an asynchronous generator is not resumed before it is finalized (by reaching a zero reference count or by being garbage collected), then a yield expression within a try construct could result in a failure to execute pending finally clauses. In this case, it is the responsibility of the event loop or scheduler running the asynchronous generator to call the asynchronous generator-iterator’s aclose() method and run the resulting coroutine object, thus allowing any pending finally clauses to execute. try try finally aclose() finally To take care of finalization upon event loop termination, an event loop should define a finalizer function which takes an asynchronous generator-iterator and presumably calls aclose() and executes the coroutine. This finalizer may be registered by calling sys. set_asyncgen_hooks(). When first iterated over, an asynchronous generator-iterator will store the registered finalizer to be called upon finalization. For a reference example of a finalizer method see the implementation of asyncio. Loop. shutdown_asyncgens in Lib/asyncio/base_events. py. aclose() sys. set_asyncgen_hooks() asyncio. Loop. shutdown_asyncgens The expression yield from is a syntax error when used in an asynchronous generator function. yield from <expr> #### 6. 2. 9. 4. Asynchronous generator-iterator methods¶ This subsection describes the methods of an asynchronous generator iterator, which are used to control the execution of a generator function. Returns an awaitable which when run starts to execute the asynchronous generator or resumes it at the last executed yield expression. When an asynchronous generator function is resumed with an anext() method, the current yield expression always evaluates to None in the returned awaitable, which when run will continue to the next yield expression. The value of the yield_list of the yield expression is the value of the StopIteration exception raised by the completing coroutine. If the asynchronous generator exits without yielding another value, the awaitable instead raises a StopAsyncIteration exception, signalling that the asynchronous iteration has completed. __anext__() None yield_list StopIteration StopAsyncIteration This method is normally called implicitly by a async for loop. async for Returns an awaitable which when run resumes the execution of the asynchronous generator.