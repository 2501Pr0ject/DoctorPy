fwalk() dup() This example displays the number of bytes taken by non-directory files in each directory under the starting directory, except that it doesn’t look under any pycache subdirectory: __pycache__ import os for root, dirs, files, rootfd in os. fwalk('python/Lib/xml'): print(root, "consumes", end="") print(sum([os. stat(name, dir_fd=rootfd). st_size for name in files]), end="") print("bytes in", len(files), "non-directory files") if '__pycache__' in dirs: dirs. remove('__pycache__') # don't visit __pycache__ directories In the next example, walking the tree bottom-up is essential: rmdir() doesn’t allow deleting a directory before the directory is empty: rmdir() # Delete everything reachable from the directory named in "top", # assuming there are no symbolic links. # CAUTION: This is dangerous. For example, if top == '/', it # could delete all your disk files. import os for root, dirs, files, rootfd in os. fwalk(top, topdown=False): for name in files: os. unlink(name, dir_fd=rootfd) for name in dirs: os. rmdir(name, dir_fd=rootfd) Raises an auditing event os. fwalk with arguments top, topdown, onerror, follow_symlinks, dir_fd. os. fwalk top topdown onerror follow_symlinks dir_fd Availability: Unix. Added in version 3. 3. Changed in version 3. 6: Accepts a path-like object. Changed in version 3. 7: Added support for bytes paths. bytes Create an anonymous file and return a file descriptor that refers to it. flags must be one of the os. MFD_ constants available on the system (or a bitwise ORed combination of them). By default, the new file descriptor is non-inheritable. os. MFD_* The name supplied in name is used as a filename and will be displayed as the target of the corresponding symbolic link in the directory /proc/self/fd/. The displayed name is always prefixed with memfd: and serves only for debugging purposes. Names do not affect the behavior of the file descriptor, and as such multiple files can have the same name without any side effects. /proc/self/fd/ memfd: Availability: Linux >= 3.