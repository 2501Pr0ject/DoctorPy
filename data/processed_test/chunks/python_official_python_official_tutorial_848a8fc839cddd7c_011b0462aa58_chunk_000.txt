4. More Control Flow Tools. 13. 5 Source:  4. More Control Flow Tools¶ As well as the while statement just introduced, Python uses a few more that we will encounter in this chapter. while ## 4. 1. if Statements¶ if Perhaps the most well-known statement type is the if statement. For example: if >>> x = int(input("Please enter an integer: ")) Please enter an integer: 42 >>> if x < 0:. x = 0. print('Negative changed to zero'). elif x == 0:. print('Zero'). elif x == 1:. print('Single'). else:. print('More'). More There can be zero or more elif parts, and the else part is optional. The keyword ‘elif’ is short for ‘else if’, and is useful to avoid excessive indentation. An if … elif … elif … sequence is a substitute for the switch or case statements found in other languages. elif else elif if elif elif switch case If you’re comparing the same value to several constants, or checking for specific types or attributes, you may also find the match statement useful. For more details see match Statements. match ## 4. 2. for Statements¶ for The for statement in Python differs a bit from what you may be used to in C or Pascal. Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define both the iteration step and halting condition (as C), Python’s for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence. For example (no pun intended): for for >>> # Measure some strings: >>> words = ['cat', 'window', 'defenestrate'] >>> for w in words:. print(w, len(w)). cat 3 window 6 defenestrate 12 Code that modifies a collection while iterating over that same collection can be tricky to get right. Instead, it is usually more straight-forward to loop over a copy of the collection or to create a new collection: # Create a sample collection users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'} # Strategy: Iterate over a copy for user, status in users. copy().