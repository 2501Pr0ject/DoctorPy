{
  "chunk_id": "external_external_guides_d52644bc3a341648_525a24893365_chunk_005",
  "original_doc_id": "external_external_guides_d52644bc3a341648_525a24893365",
  "content": "All identifiers in the Python standard library MUST use ASCII-only identifiers, and SHOULD use English words wherever feasible (in many cases, abbreviations and technical terms are used which aren’t English). Open source projects with a global audience are encouraged to adopt a similar policy. ### Imports Imports should usually be on separate lines:# Correct: import os import sys # Wrong: import sys, os It’s okay to say this though: # Correct: from subprocess import Popen, PIPE # Correct: import os import sys # Wrong: import sys, os It’s okay to say this though: # Correct: from subprocess import Popen, PIPE Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants. Imports should be grouped in the following order: Standard library imports. Related third party imports. Local application/library specific imports. You should put a blank line between each group of imports. Imports should be grouped in the following order: Standard library imports. Related third party imports. Local application/library specific imports. You should put a blank line between each group of imports. Absolute imports are recommended, as they are usually more readable and tend to be better behaved (or at least give better error messages) if the import system is incorrectly configured (such as when a directory inside a package ends up on sys. path):import mypkg. sibling from mypkg import sibling from mypkg. sibling import example However, explicit relative imports are an acceptable alternative to absolute imports, especially when dealing with complex package layouts where using absolute imports would be unnecessarily verbose: from. import sibling from. sibling import example Standard library code should avoid complex package layouts and always use absolute imports. sys. path import mypkg. sibling from mypkg import sibling from mypkg. sibling import example However, explicit relative imports are an acceptable alternative to absolute imports, especially when dealing with complex package layouts where using absolute imports would be unnecessarily verbose: from. import sibling from. sibling import example Standard library code should avoid complex package layouts and always use absolute imports. When importing a class from a class-containing module, it’s usually okay to spell this:from myclass import MyClass from foo. bar. yourclass import YourClass If this spelling causes local name clashes, then spell them explicitly: import myclass import foo. bar. yourclass and use myclass. MyClass and foo. bar. yourclass. YourClass. from myclass import MyClass from foo. bar.",
  "title": "PEP 8 – Style Guide for Python Code | peps.python.org",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 5,
  "start_char": 11921,
  "end_char": 14572,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_d52644bc3a341648.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:41.771468"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_d52644bc3a341648_525a24893365_chunk_005.txt"
}