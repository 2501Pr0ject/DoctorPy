group('zonem'), instead of having to remember to retrieve group 9. m. group('zonem') The syntax for backreferences in an expression such as (. )\1 refers to the number of the group. There’s naturally a variant that uses the group name instead of the number. This is another Python extension: (. P=name) indicates that the contents of the group called name should again be matched at the current point. The regular expression for finding doubled words, \b(\w+)\s+\1\b can also be written as \b(. P\w+)\s+(. P=word)\b: (. )\1 (. P=name) \b(\w+)\s+\1\b \b(. P<word>\w+)\s+(. P=word)\b >>> p = re. compile(r'\b(. P<word>\w+)\s+(. P=word)\b') >>> p. search('Paris in the the spring'). group() 'the the' ### Lookahead Assertions¶ Another zero-width assertion is the lookahead assertion. Lookahead assertions are available in both positive and negative form, and look like this: (. =. ) Positive lookahead assertion. This succeeds if the contained regular expression, represented here by. , successfully matches at the current location, and fails otherwise. But, once the contained expression has been tried, the matching engine doesn’t advance at all; the rest of the pattern is tried right where the assertion started. (. ) Negative lookahead assertion. This is the opposite of the positive assertion; it succeeds if the contained expression doesn’t match at the current position in the string. To make this concrete, let’s look at a case where a lookahead is useful. Consider a simple pattern to match a filename and split it apart into a base name and an extension, separated by a. For example, in news. rc, news is the base name, and rc is the filename’s extension. news. rc news rc The pattern to match this is quite simple:. [. ]. $. *[. ]. *$ Notice that the. needs to be treated specially because it’s a metacharacter, so it’s inside a character class to only match that specific character. Also notice the trailing $; this is added to ensure that all the rest of the string must be included in the extension. This regular expression matches foo. bar and autoexec. bat and sendmail. cf and printers. conf. $ foo. bar autoexec.