{
  "chunk_id": "python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1_chunk_008",
  "original_doc_id": "python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1",
  "content": "Note that it is unnecessary to include the source code for the expression that failed in the error message; it will be displayed as part of the stack trace. __debug__ AssertionError __debug__ True False -O assert Assignments to debug are illegal. The value for the built-in variable is determined when the interpreter starts. __debug__ ## 7. 4. The pass statement¶ pass pass_stmt ::= \"pass\" pass is a null operation — when it is executed, nothing happens. It is useful as a placeholder when a statement is required syntactically, but no code needs to be executed, for example: pass def f(arg): pass # a function that does nothing (yet) class C: pass # a class with no methods (yet) ## 7. 5. The del statement¶ del del_stmt ::= \"del\" target_list target_list Deletion is recursively defined very similar to the way assignment is defined. Rather than spelling it out in full details, here are some hints. Deletion of a target list recursively deletes each target, from left to right. Deletion of a name removes the binding of that name from the local or global namespace, depending on whether the name occurs in a global statement in the same code block. If the name is unbound, a NameError exception will be raised. global NameError Deletion of attribute references, subscriptions and slicings is passed to the primary object involved; deletion of a slicing is in general equivalent to assignment of an empty slice of the right type (but even this is determined by the sliced object). Changed in version 3. 2: Previously it was illegal to delete a name from the local namespace if it occurs as a free variable in a nested block. ## 7. 6. The return statement¶ return return_stmt ::= \"return\" [expression_list] expression_list return may only occur syntactically nested in a function definition, not within a nested class definition. return If an expression list is present, it is evaluated, else None is substituted. None return leaves the current function call with the expression list (or None) as return value. return None When return passes control out of a try statement with a finally clause, that finally clause is executed before really leaving the function. return try finally finally In a generator function, the return statement indicates that the generator is done and will cause StopIteration to be raised.",
  "title": "7. Simple statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 8,
  "start_char": 18979,
  "end_char": 21296,
  "token_count": 485,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_086a4fc66c4c8ed9.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:05.262458"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1_chunk_008.txt"
}