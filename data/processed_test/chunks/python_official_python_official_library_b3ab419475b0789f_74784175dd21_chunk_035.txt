Path. rglob self pattern (dirpath, dirnames, filenames) Path '. ' '. ' dirpath / name del Path. walk() Path. walk() Path. walk() Path. walk() os. scandir() OSError filename Path. walk() Path. walk() Path. walk() Path. walk() os. walk() Path. walk() __pycache__ from pathlib import Path for root, dirs, files in Path("cpython/Lib/concurrent"). walk(on_error=print): print( root, "consumes", sum((root / file). stat(). st_size for file in files), "bytes in", len(files), "non-directory files" ) if '__pycache__' in dirs: dirs. remove('__pycache__') shutil. rmtree() rmdir() # Delete everything reachable from the directory "top". # CAUTION: This is dangerous. For example, if top == Path('/'), # it could delete all of your files. for root, dirs, files in top. walk(top_down=False): for name in files: (root / name). unlink() for name in dirs: (root / name). rmdir() umask FileExistsError open() write_text() write_bytes() umask FileExistsError mkdir -p FileNotFoundError FileExistsError FileExistsError mkdir -p >>> p = Path('mylink') >>> p. symlink_to('setup. py') >>> p. resolve() PosixPath('/home/antoine/pathlib/setup. py') >>> p. stat(). st_size 956 >>> p. lstat(). st_size 8 os. symlink() UnsupportedOperation os. symlink() NotImplementedError os. link() UnsupportedOperation os. link() NotImplementedError Path FileExistsError >>> p = Path('foo') >>> p. open('w'). write('some text') 9 >>> target = Path('bar') >>> p. rename(target) PosixPath('bar') >>> target. open(). read() 'some text' Path os. rename() Path Path Path Path Path. rmdir() FileNotFoundError FileNotFoundError rm -f KeyError follow_symlinks=False UnsupportedOperation pwd NotImplementedError KeyError follow_symlinks=False UnsupportedOperation grp NotImplementedError os. chmod() follow_symlinks=False lchmod() >>> p = Path('setup. py') >>> p. stat(). st_mode 33277 >>> p. chmod(0o444) >>> p. stat(). st_mode 33060 Path.