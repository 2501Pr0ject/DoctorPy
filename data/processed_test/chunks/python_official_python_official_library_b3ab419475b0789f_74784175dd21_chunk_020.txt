If the target is present, the type of the symlink will be created to match. Otherwise, the symlink will be created as a directory if target_is_directory is true or a file symlink (the default) otherwise. On non-Windows platforms, target_is_directory is ignored. >>> p = Path('mylink') >>> p. symlink_to('setup. py') >>> p. resolve() PosixPath('/home/antoine/pathlib/setup. py') >>> p. stat(). st_size 956 >>> p. lstat(). st_size 8 Note The order of arguments (link, target) is the reverse of os. symlink()’s. os. symlink() Changed in version 3. 13: Raises UnsupportedOperation if os. symlink() is not available. In previous versions, NotImplementedError was raised. UnsupportedOperation os. symlink() NotImplementedError Make this path a hard link to the same file as target. Note The order of arguments (link, target) is the reverse of os. link()’s. os. link() Added in version 3. 10. Changed in version 3. 13: Raises UnsupportedOperation if os. link() is not available. In previous versions, NotImplementedError was raised. UnsupportedOperation os. link() NotImplementedError ### Renaming and deleting¶ Rename this file or directory to the given target, and return a new Path instance pointing to target. On Unix, if target exists and is a file, it will be replaced silently if the user has permission. On Windows, if target exists, FileExistsError will be raised. target can be either a string or another path object: Path FileExistsError >>> p = Path('foo') >>> p. open('w'). write('some text') 9 >>> target = Path('bar') >>> p. rename(target) PosixPath('bar') >>> target. open(). read() 'some text' The target path may be absolute or relative. Relative paths are interpreted relative to the current working directory, not the directory of the Path object. Path It is implemented in terms of os. rename() and gives the same guarantees. os. rename() Changed in version 3. 8: Added return value, return the new Path instance. Path Rename this file or directory to the given target, and return a new Path instance pointing to target. If target points to an existing file or empty directory, it will be unconditionally replaced. Path The target path may be absolute or relative.