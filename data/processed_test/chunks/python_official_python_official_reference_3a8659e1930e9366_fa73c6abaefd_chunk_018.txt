Code objects¶ Code objects represent byte-compiled executable Python code, or bytecode. The difference between a code object and a function object is that the function object contains an explicit reference to the function’s globals (the module in which it was defined), while a code object contains no context; also the default argument values are stored in the function object, not in the code object (because they represent values calculated at run-time). Unlike function objects, code objects are immutable and contain no references (directly or indirectly) to mutable objects. ##### 3. 2. 13. 1. 1. Special read-only attributes¶ The function name The fully qualified function name Added in version 3. 11. The total number of positional parameters (including positional-only parameters and parameters with default values) that the function has The number of positional-only parameters (including arguments with default values) that the function has The number of keyword-only parameters (including arguments with default values) that the function has The number of local variables used by the function (including parameters) A tuple containing the names of the local variables in the function (starting with the parameter names) tuple A tuple containing the names of local variables that are referenced from at least one nested scope inside the function tuple A tuple containing the names of free (closure) variables that a nested scope references in an outer scope. See also function. closure. tuple function. __closure__ Note: references to global and builtin names are not included. A string representing the sequence of bytecode instructions in the function A tuple containing the literals used by the bytecode in the function tuple A tuple containing the names used by the bytecode in the function tuple The name of the file from which the code was compiled The line number of the first line of the function A string encoding the mapping from bytecode offsets to line numbers. For details, see the source code of the interpreter. Deprecated since version 3. 12: This attribute of code objects is deprecated, and may be removed in Python 3. 15. The required stack size of the code object An integer encoding a number of flags for the interpreter. integer The following flag bits are defined for co_flags: bit 0x04 is set if the function uses the arguments syntax to accept an arbitrary number of positional arguments; bit 0x08 is set if the function uses the keywords syntax to accept arbitrary keyword arguments; bit 0x20 is set if the function is a generator.