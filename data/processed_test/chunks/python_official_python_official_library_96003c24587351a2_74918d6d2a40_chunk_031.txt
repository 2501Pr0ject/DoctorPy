set set set For other containers see the built-in frozenset, list, tuple, and dict classes, as well as the collections module. frozenset list tuple dict collections This is the counterpart of getattr(). The arguments are an object, a string, and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x. foobar = 123. getattr() setattr(x, 'foobar', 123) x. foobar = 123 name need not be a Python identifier as defined in Identifiers and keywords unless the object chooses to enforce that, for example in a custom getattribute() or via slots. An attribute whose name is not an identifier will not be accessible using the dot notation, but is accessible through getattr() etc. __getattribute__() __slots__ getattr() Note Since private name mangling happens at compilation time, one must manually mangle a private attributeâ€™s (attributes with two leading underscores) name in order to set it with setattr(). setattr() Return a slice object representing the set of indices specified by range(start, stop, step). The start and step arguments default to None. range(start, stop, step) None Slice objects have read-only data attributes start, stop, and step which merely return the argument values (or their default). They have no other explicit functionality; however, they are used by NumPy and other third-party packages. start stop step Slice objects are also generated when extended indexing syntax is used. For example: a[start:stop:step] or a[start:stop, i]. See itertools. islice() for an alternate version that returns an iterator. a[start:stop:step] a[start:stop, i] itertools. islice() Changed in version 3. 12: Slice objects are now hashable (provided start, stop, and step are hashable). start stop step Return a new sorted list from the items in iterable. Has two optional arguments which must be specified as keyword arguments. key specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str. lower). The default value is None (compare the elements directly). key=str. lower None reverse is a boolean value. If set to True, then the list elements are sorted as if each comparison were reversed.