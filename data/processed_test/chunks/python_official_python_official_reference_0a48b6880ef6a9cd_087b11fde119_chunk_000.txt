6. Expressions. 13. 5 Source:  6. Expressions¶ This chapter explains the meaning of the elements of expressions in Python. Syntax Notes: In this and the following chapters, extended BNF notation will be used to describe syntax, not lexical analysis. When (one alternative of) a syntax rule has the form name ::= othername and no semantics are given, the semantics of this form of name are the same as for othername. name othername ## 6. 1. Arithmetic conversions¶ When a description of an arithmetic operator below uses the phrase “the numeric arguments are converted to a common type”, this means that the operator implementation for built-in types works as follows: If either argument is a complex number, the other is converted to complex; If either argument is a complex number, the other is converted to complex; otherwise, if either argument is a floating-point number, the other is converted to floating point; otherwise, if either argument is a floating-point number, the other is converted to floating point; otherwise, both must be integers and no conversion is necessary. otherwise, both must be integers and no conversion is necessary. Some additional rules apply for certain operators (e. g. , a string as a left argument to the ‘%’ operator). Extensions must define their own conversion behavior. ## 6. 2. Atoms¶ Atoms are the most basic elements of expressions. The simplest atoms are identifiers or literals. Forms enclosed in parentheses, brackets or braces are also categorized syntactically as atoms. The syntax for atoms is: atom ::= identifier | literal | enclosure enclosure ::= parenth_form | list_display | dict_display | set_display | generator_expression | yield_atom identifier literal enclosure parenth_form list_display dict_display set_display generator_expression yield_atom ### 6. 2. 1. Identifiers (Names)¶ An identifier occurring as an atom is a name. See section Identifiers and keywords for lexical definition and section Naming and binding for documentation of naming and binding. When the name is bound to an object, evaluation of the atom yields that object. When a name is not bound, an attempt to evaluate it raises a NameError exception. NameError #### 6. 2. 1. 1.