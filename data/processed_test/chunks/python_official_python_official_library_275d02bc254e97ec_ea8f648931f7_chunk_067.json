{
  "chunk_id": "python_official_python_official_library_275d02bc254e97ec_ea8f648931f7_chunk_067",
  "original_doc_id": "python_official_python_official_library_275d02bc254e97ec_ea8f648931f7",
  "content": "The returned file object reads or writes text strings rather than bytes. 'r' 'w' open() The close method returns None if the subprocess exited successfully, or the subprocess’s return code if there was an error. On POSIX systems, if the return code is positive it represents the return value of the process left-shifted by one byte. If the return code is negative, the process was terminated by the signal given by the negated value of the return code. (For example, the return value might be - signal. SIGKILL if the subprocess was killed. ) On Windows systems, the return value contains the signed integer return code from the child process. close None - signal. SIGKILL On Unix, waitstatus_to_exitcode() can be used to convert the close method result (exit status) into an exit code if it is not None. On Windows, the close method result is directly the exit code (or None). waitstatus_to_exitcode() close None close None This is implemented using subprocess. Popen; see that class’s documentation for more powerful ways to manage and communicate with subprocesses. subprocess. Popen Availability: not WASI, not Android, not iOS. Note The Python UTF-8 Mode affects encodings used for cmd and pipe contents. popen() is a simple wrapper around subprocess. Popen. Use subprocess. Popen or subprocess. run() to control options like encodings. popen() subprocess. Popen subprocess. Popen subprocess. run() Wraps the posix_spawn() C library API for use from Python. posix_spawn() Most users should use subprocess. run() instead of posix_spawn(). subprocess. run() posix_spawn() The positional-only arguments path, args, and env are similar to execve(). env is allowed to be None, in which case current process’ environment is used. execve() None The path parameter is the path to the executable file. The path should contain a directory. Use posix_spawnp() to pass an executable file without directory. posix_spawnp() The file_actions argument may be a sequence of tuples describing actions to take on specific file descriptors in the child process between the C library implementation’s fork() and exec() steps. The first item in each tuple must be one of the three type indicator listed below describing the remaining tuple elements: fork() exec() (os. POSIX_SPAWN_OPEN, fd, path, flags, mode) os.",
  "title": "os — Miscellaneous operating system interfaces.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 67,
  "start_char": 142777,
  "end_char": 145073,
  "token_count": 495,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_275d02bc254e97ec.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:24.831328"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_275d02bc254e97ec_ea8f648931f7_chunk_067.txt"
}