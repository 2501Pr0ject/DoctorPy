{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_017",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "When an attribute is not found there, and the instance’s class has an attribute by that name, the search continues with the class attributes. If a class attribute is found that is a user-defined function object, it is transformed into an instance method object whose self attribute is the instance. Static method and class method objects are also transformed; see above under “Classes”. See section Implementing Descriptors for another way in which attributes of a class retrieved via its instances may differ from the objects actually stored in the class’s dict. If no class attribute is found, and the object’s class has a getattr() method, that is called to satisfy the lookup. __self__ __dict__ __getattr__() Attribute assignments and deletions update the instance’s dictionary, never a class’s dictionary. If the class has a setattr() or delattr() method, this is called instead of updating the instance dictionary directly. __setattr__() __delattr__() Class instances can pretend to be numbers, sequences, or mappings if they have methods with certain special names. See section Special method names. #### 3. 2. 11. 1. Special attributes¶ The class to which a class instance belongs. A dictionary or other mapping object used to store an object’s (writable) attributes. Not all instances have a dict attribute; see the section on slots for more details. __dict__ ### 3. 2. 12. I/O objects (also known as file objects)¶ A file object represents an open file. Various shortcuts are available to create file objects: the open() built-in function, and also os. popen(), os. fdopen(), and the makefile() method of socket objects (and perhaps by other functions or methods provided by extension modules). open() os. popen() os. fdopen() makefile() The objects sys. stdin, sys. stdout and sys. stderr are initialized to file objects corresponding to the interpreter’s standard input, output and error streams; they are all open in text mode and therefore follow the interface defined by the io. TextIOBase abstract class. sys. stdin sys. stdout sys. stderr io. TextIOBase ### 3. 2. 13. Internal types¶ A few types used internally by the interpreter are exposed to the user. Their definitions may change with future versions of the interpreter, but they are mentioned here for completeness. #### 3. 2. 13. 1.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 17,
  "start_char": 38614,
  "end_char": 40920,
  "token_count": 499,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.709214"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_017.txt"
}