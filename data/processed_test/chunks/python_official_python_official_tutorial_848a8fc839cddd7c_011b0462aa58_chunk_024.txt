y = y def where_is(point): match point: case Point(x=0, y=0): print("Origin") case Point(x=0, y=y): print(f"Y={y}") case Point(x=x, y=0): print(f"X={x}") case Point(): print("Somewhere else") case _: print("Not a point") __match_args__ y var Point(1, var) Point(1, y=var) Point(x=1, y=var) Point(y=var, x=1) var foo. bar x= y= Point __match_args__ class Point: __match_args__ = ('x', 'y') def __init__(self, x, y): self. x = x self. y = y match points: case []: print("No points") case [Point(0, 0)]: print("The origin") case [Point(x, y)]: print(f"Single point {x}, {y}") case [Point(0, y1), Point(0, y2)]: print(f"Two on the Y axis at {y1}, {y2}") case _: print("Something else") if match match point: case Point(x, y) if x == y: print(f"Y=X at {x}") case Point(x, y): print(f"Not on the diagonal") [x, y, *rest] (x, y, *rest) * _ (x, y, *_) {"bandwidth": b, "latency": l} "bandwidth" "latency" **rest **_ as case (Point(x1, y1), Point(x2, y2) as p2):. p2 True False None from enum import Enum class Color(Enum): RED = 'red' GREEN = 'green' BLUE = 'blue' color = Color(input("Enter your choice of 'red', 'blue' or 'green': ")) match color: case Color. RED: print("I see red. ") case Color. GREEN: print("Grass is green") case Color. BLUE: print("I'm feeling the blues :(") >>> def fib(n): # write Fibonacci series less than n. """Print a Fibonacci series less than n. """. a, b = 0, 1. while a < n:. print(a, end=' '). a, b = b, a+b. print().