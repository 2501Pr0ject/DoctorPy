List Comprehensions 5. 1. 4. Nested List Comprehensions 5. 1. 1. Using Lists as Stacks 5. 1. 2. Using Lists as Queues 5. 1. 3. List Comprehensions 5. 1. 4. Nested List Comprehensions 5. 2. The del statement del 5. 3. Tuples and Sequences 5. 4. Sets 5. 5. Dictionaries 5. 6. Looping Techniques 5. 7. More on Conditions 5. 8. Comparing Sequences and Other Types #### Previous topic 4. More Control Flow Tools #### Next topic 6. Modules ### This page Report a bug Show source a[len(a):] = [x] a[len(a):] = iterable a. insert(0, x) a. insert(len(a), x) a. append(x) ValueError a. pop() IndexError del a[:] ValueError sorted() a[:] >>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana'] >>> fruits. count('apple') 2 >>> fruits. count('tangerine') 0 >>> fruits. index('banana') 3 >>> fruits. index('banana', 4) # Find next banana starting at position 4 6 >>> fruits. reverse() >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] >>> fruits. append('grape') >>> fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] >>> fruits. sort() >>> fruits ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] >>> fruits. pop() 'pear' insert remove sort None [None, 'hello', 10] None 3+4j < 5+7j append() pop() >>> stack = [3, 4, 5] >>> stack. append(6) >>> stack. append(7) >>> stack [3, 4, 5, 6, 7] >>> stack. pop() 7 >>> stack [3, 4, 5, 6] >>> stack. pop() 6 >>> stack.