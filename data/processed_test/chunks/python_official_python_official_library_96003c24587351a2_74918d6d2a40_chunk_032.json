{
  "chunk_id": "python_official_python_official_library_96003c24587351a2_74918d6d2a40_chunk_032",
  "original_doc_id": "python_official_python_official_library_96003c24587351a2_74918d6d2a40",
  "content": "True Use functools. cmp_to_key() to convert an old-style cmp function to a key function. functools. cmp_to_key() The built-in sorted() function is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal — this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade). sorted() The sort algorithm uses only < comparisons between items. While defining an lt() method will suffice for sorting, PEP 8 recommends that all six rich comparisons be implemented. This will help avoid bugs when using the same data with other ordering tools such as max() that rely on a different underlying method. Implementing all six comparisons also helps avoid confusion for mixed type comparisons which can call reflected the gt() method. < __lt__() max() __gt__() For sorting examples and a brief sorting tutorial, see Sorting Techniques. Transform a method into a static method. A static method does not receive an implicit first argument. To declare a static method, use this idiom: class C: @staticmethod def f(arg1, arg2, argN):. The @staticmethod form is a function decorator – see Function definitions for details. @staticmethod A static method can be called either on the class (such as C. f()) or on an instance (such as C(). f()). Moreover, the static method descriptor is also callable, so it can be used in the class definition (such as f()). C. f() C(). f() f() Static methods in Python are similar to those found in Java or C++. Also, see classmethod() for a variant that is useful for creating alternate class constructors. classmethod() Like all decorators, it is also possible to call staticmethod as a regular function and do something with its result. This is needed in some cases where you need a reference to a function from a class body and you want to avoid the automatic transformation to instance method. For these cases, use this idiom: staticmethod def regular_function():. class C: method = staticmethod(regular_function) For more information on static methods, see The standard type hierarchy. Changed in version 3. 10: Static methods now inherit the method attributes (module, name, qualname, doc and annotations), have a new wrapped attribute, and are now callable as regular functions.",
  "title": "Built-in Functions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 32,
  "start_char": 68492,
  "end_char": 70796,
  "token_count": 480,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_96003c24587351a2.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:31.022951"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_96003c24587351a2_74918d6d2a40_chunk_032.txt"
}