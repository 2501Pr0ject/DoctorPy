popleft() for m in gen_moves(node): if is_goal(m): return m unsearched. append(m) In addition to alternative list implementations, the library also offers other tools such as the bisect module with functions for manipulating sorted lists: bisect >>> import bisect >>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')] >>> bisect. insort(scores, (300, 'ruby')) >>> scores [(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')] The heapq module provides functions for implementing heaps based on regular lists. The lowest valued entry is always kept at position zero. This is useful for applications which repeatedly access the smallest element but do not want to run a full list sort: heapq >>> from heapq import heapify, heappop, heappush >>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0] >>> heapify(data) # rearrange the list into heap order >>> heappush(data, -5) # add a new entry >>> [heappop(data) for i in range(3)] # fetch the three smallest entries [-5, 0, 1] ## 11. 8. Decimal Floating-Point ArithmeticÂ¶ The decimal module offers a Decimal datatype for decimal floating-point arithmetic. Compared to the built-in float implementation of binary floating point, the class is especially helpful for decimal Decimal float financial applications and other uses which require exact decimal representation, financial applications and other uses which require exact decimal representation, control over precision, control over precision, control over rounding to meet legal or regulatory requirements, control over rounding to meet legal or regulatory requirements, tracking of significant decimal places, or tracking of significant decimal places, or applications where the user expects the results to match calculations done by hand. applications where the user expects the results to match calculations done by hand. For example, calculating a 5% tax on a 70 cent phone charge gives different results in decimal floating point and binary floating point. The difference becomes significant if the results are rounded to the nearest cent: >>> from decimal import * >>> round(Decimal('0. 70') * Decimal('1. 05'), 2) Decimal('0. 74') >>> round(.