{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_005",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "Nd All numbers. Real types (int and float) also include the following operations: numbers. Real int float Operation Result math. trunc(x) math. trunc(x) x truncated to Integral Integral round(x[, n]) round(x[, n]) x rounded to n digits, rounding half to even. If n is omitted, it defaults to 0. math. floor(x) math. floor(x) the greatest Integral <= x Integral math. ceil(x) math. ceil(x) the least Integral >= x Integral For additional numeric operations see the math and cmath modules. math cmath ### Bitwise Operations on Integer Types¶ Bitwise operations only make sense for integers. The result of bitwise operations is calculated as though carried out in two’s complement with an infinite number of sign bits. The priorities of the binary bitwise operations are all lower than the numeric operations and higher than the comparisons; the unary operation ~ has the same priority as the other unary numeric operations (+ and -). ~ + - This table lists the bitwise operations sorted in ascending priority: Operation Result Notes x | y x | y bitwise or of x and y (4) x ^ y x ^ y bitwise exclusive or of x and y (4) x & y x & y bitwise and of x and y (4) x << n x << n x shifted left by n bits (1)(2) x >> n x >> n x shifted right by n bits (1)(3) ~x ~x the bits of x inverted Notes: Negative shift counts are illegal and cause a ValueError to be raised. Negative shift counts are illegal and cause a ValueError to be raised. ValueError A left shift by n bits is equivalent to multiplication by pow(2, n). A left shift by n bits is equivalent to multiplication by pow(2, n). pow(2, n) A right shift by n bits is equivalent to floor division by pow(2, n). A right shift by n bits is equivalent to floor division by pow(2, n). pow(2, n) Performing these calculations with at least one extra sign extension bit in a finite two’s complement representation (a working bit-width of 1 + max(x. bit_length(), y. bit_length()) or more) is sufficient to get the same result as if there were an infinite number of sign bits.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 5,
  "start_char": 9736,
  "end_char": 11750,
  "token_count": 472,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.183923"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_005.txt"
}