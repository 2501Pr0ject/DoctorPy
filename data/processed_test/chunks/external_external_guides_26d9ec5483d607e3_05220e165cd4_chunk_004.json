{
  "chunk_id": "external_external_guides_26d9ec5483d607e3_05220e165cd4_chunk_004",
  "original_doc_id": "external_external_guides_26d9ec5483d607e3_05220e165cd4",
  "content": "pop() while trimmed and not trimmed[0]: trimmed. pop(0) # Return a single string: return '\\n'. join(trimmed) The docstring in this example contains two newline characters and is therefore 3 lines long. The first and last lines are blank: def foo(): \"\"\" This is the second line of the docstring. \"\"\" To illustrate: >>> print repr(foo. __doc__) '\\n This is the second line of the docstring. \\n ' >>> foo. __doc__. splitlines() ['', ' This is the second line of the docstring. ', ' '] >>> trim(foo. __doc__) 'This is the second line of the docstring. ' Once trimmed, these docstrings are equivalent: def foo(): \"\"\"A multi-line docstring. \"\"\" def bar(): \"\"\" A multi-line docstring. \"\"\" ## Copyright This document has been placed in the public domain. ## Acknowledgements The “Specification” text comes mostly verbatim from PEP 8 by Guido van Rossum. This document borrows ideas from the archives of the Python Doc-SIG. Thanks to all members past and present. Source:  Last modified: 2024-04-17 11:35:59 GMT __doc__ __init__ __init__. py __doc__ __init__ \"\"\"triple double quotes\"\"\" r\"\"\"raw triple double quotes\"\"\" def kos_root(): \"\"\"Return the pathname of the KOS root directory. \"\"\" global _kos_root if _kos_root: return _kos_root. def function(a, b): \"\"\"function(a, b) -> list\"\"\" def function(a, b): \"\"\"Do X and return a list. \"\"\" __init__. py __init__ def complex(real=0. 0, imag=0. 0): \"\"\"Form a complex number. Keyword arguments: real -- the real part (default 0. 0) imag -- the imaginary part (default 0. 0) \"\"\" if imag == 0. 0 and real == 0. 0: return complex_zero. fill-paragraph def trim(docstring): if not docstring: return '' # Convert tabs to spaces (following the normal Python rules) # and split into a list of lines: lines = docstring. expandtabs(). splitlines() # Determine minimum indentation (first line doesn't count): indent = sys. maxsize for line in lines[1:]: stripped = line.",
  "title": "PEP 257 – Docstring Conventions | peps.python.org",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 4,
  "start_char": 9078,
  "end_char": 10972,
  "token_count": 496,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_26d9ec5483d607e3.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:39.243016"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_26d9ec5483d607e3_05220e165cd4_chunk_004.txt"
}