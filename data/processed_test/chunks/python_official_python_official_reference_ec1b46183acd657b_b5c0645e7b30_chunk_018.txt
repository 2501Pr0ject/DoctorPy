For the following built-in types the handling of positional subpatterns is different: bool bytearray bytes dict float frozenset int list set str tuple These classes accept a single positional argument, and the pattern there is matched against the whole object rather than an attribute. For example int(0|1) matches the value 0, but not the value 0. 0. If no pattern arguments are present, the pattern succeeds. Otherwise, the subsequent steps depend on whether keyword or positional argument patterns are present. For a number of built-in types (specified below), a single positional subpattern is accepted which will match the entire subject; for these types keyword patterns also work as for other types. If only keyword patterns are present, they are processed as follows, one by one: I. The keyword is looked up as an attribute on the subject. If this raises an exception other than AttributeError, the exception bubbles up. If this raises an exception other than AttributeError, the exception bubbles up. AttributeError If this raises AttributeError, the class pattern has failed. If this raises AttributeError, the class pattern has failed. AttributeError Else, the subpattern associated with the keyword pattern is matched against the subject’s attribute value. If this fails, the class pattern fails; if this succeeds, the match proceeds to the next keyword. Else, the subpattern associated with the keyword pattern is matched against the subject’s attribute value. If this fails, the class pattern fails; if this succeeds, the match proceeds to the next keyword. II. If all keyword patterns succeed, the class pattern succeeds. If any positional patterns are present, they are converted to keyword patterns using the match_args attribute on the class name_or_attr before matching: __match_args__ name_or_attr I. The equivalent of getattr(cls, "match_args", ()) is called. getattr(cls, "__match_args__", ()) If this raises an exception, the exception bubbles up. If this raises an exception, the exception bubbles up. If the returned value is not a tuple, the conversion fails and TypeError is raised. If the returned value is not a tuple, the conversion fails and TypeError is raised. TypeError If there are more positional patterns than len(cls. match_args), TypeError is raised. If there are more positional patterns than len(cls. match_args), TypeError is raised. len(cls. __match_args__) TypeError Otherwise, positional pattern i is converted to a keyword pattern using match_args[i] as the keyword.