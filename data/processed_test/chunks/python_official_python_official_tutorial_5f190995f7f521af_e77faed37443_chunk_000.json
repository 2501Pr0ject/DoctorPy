{
  "chunk_id": "python_official_python_official_tutorial_5f190995f7f521af_e77faed37443_chunk_000",
  "original_doc_id": "python_official_python_official_tutorial_5f190995f7f521af_e77faed37443",
  "content": "6. Modules. 13. 5 Source:  6. Modules¶ If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead. This is known as creating a script. As your program gets longer, you may want to split it into several files for easier maintenance. You may also want to use a handy function that you’ve written in several programs without copying its definition into each program. To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode). A module is a file containing Python definitions and statements. The file name is the module name with the suffix. py appended. Within a module, the module’s name (as a string) is available as the value of the global variable name. For instance, use your favorite text editor to create a file called fibo. py in the current directory with the following contents:. py __name__ fibo. py # Fibonacci numbers module def fib(n): \"\"\"Write Fibonacci series up to n. \"\"\" a, b = 0, 1 while a < n: print(a, end=' ') a, b = b, a+b print() def fib2(n): \"\"\"Return Fibonacci series up to n. \"\"\" result = [] a, b = 0, 1 while a < n: result. append(a) a, b = b, a+b return result Now enter the Python interpreter and import this module with the following command: >>> import fibo This does not add the names of the functions defined in fibo directly to the current namespace (see Python Scopes and Namespaces for more details); it only adds the module name fibo there. Using the module name you can access the functions: fibo fibo >>> fibo. fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 >>> fibo.",
  "title": "6. Modules.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 0,
  "start_char": 0,
  "end_char": 2081,
  "token_count": 500,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_5f190995f7f521af.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:01.854904"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_5f190995f7f521af_e77faed37443_chunk_000.txt"
}