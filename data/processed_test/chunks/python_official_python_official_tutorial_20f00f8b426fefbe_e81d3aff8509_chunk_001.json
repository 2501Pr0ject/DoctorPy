{
  "chunk_id": "python_official_python_official_tutorial_20f00f8b426fefbe_e81d3aff8509_chunk_001",
  "original_doc_id": "python_official_python_official_tutorial_20f00f8b426fefbe_e81d3aff8509",
  "content": "Python is an interpreted language, which can save you considerable time during program development because no compilation and linking is necessary. The interpreter can be used interactively, which makes it easy to experiment with features of the language, to write throw-away programs, or to test functions during bottom-up program development. It is also a handy desk calculator. Python enables programs to be written compactly and readably. Programs written in Python are typically much shorter than equivalent C, C++, or Java programs, for several reasons: the high-level data types allow you to express complex operations in a single statement; the high-level data types allow you to express complex operations in a single statement; statement grouping is done by indentation instead of beginning and ending brackets; statement grouping is done by indentation instead of beginning and ending brackets; no variable or argument declarations are necessary. no variable or argument declarations are necessary. Python is extensible: if you know how to program in C it is easy to add a new built-in function or module to the interpreter, either to perform critical operations at maximum speed, or to link Python programs to libraries that may only be available in binary form (such as a vendor-specific graphics library). Once you are really hooked, you can link the Python interpreter into an application written in C and use it as an extension or command language for that application. By the way, the language is named after the BBC show “Monty Python’s Flying Circus” and has nothing to do with reptiles. Making references to Monty Python skits in documentation is not only allowed, it is encouraged. Now that you are all excited about Python, you’ll want to examine it in some more detail. Since the best way to learn a language is to use it, the tutorial invites you to play with the Python interpreter as you read. In the next chapter, the mechanics of using the interpreter are explained. This is rather mundane information, but essential for trying out the examples shown later. The rest of the tutorial introduces various features of the Python language and system through examples, beginning with simple expressions, statements and data types, through functions and modules, and finally touching upon advanced concepts like exceptions and user-defined classes. #### Previous topic The Python Tutorial #### Next topic 2. Using the Python Interpreter ### This page Report a bug Show source.",
  "title": "1. Whetting Your Appetite.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 1,
  "start_char": 2297,
  "end_char": 4794,
  "token_count": 463,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_20f00f8b426fefbe.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:34.412705"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_20f00f8b426fefbe_e81d3aff8509_chunk_001.txt"
}