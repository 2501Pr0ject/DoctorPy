Next, you must escape any backslashes and other metacharacters by preceding them with a backslash, resulting in the string \section. The resulting string that must be passed to re. compile() must be \section. However, to express this as a Python string literal, both backslashes must be escaped again. \section \\section re. compile() \\section Characters Stage \section \section Text string to be matched \section \\section Escaped backslash for re. compile() re. compile() "\\section" "\\\\section" Escaped backslashes for a string literal In short, to match a literal backslash, one has to write '\\' as the RE string, because the regular expression must be \, and each backslash must be expressed as \ inside a regular Python string literal. In REs that feature backslashes repeatedly, this leads to lots of repeated backslashes and makes the resulting strings difficult to understand. '\\\\' \\ \\ The solution is to use Python’s raw string notation for regular expressions; backslashes are not handled in any special way in a string literal prefixed with 'r', so r"\n" is a two-character string containing '\' and 'n', while "\n" is a one-character string containing a newline. Regular expressions will often be written in Python code using this raw string notation. 'r' r"\n" '\' 'n' "\n" In addition, special escape sequences that are valid in regular expressions, but not valid as Python string literals, now result in a DeprecationWarning and will eventually become a SyntaxError, which means the sequences will be invalid if raw string notation or escaping the backslashes isn’t used. DeprecationWarning SyntaxError Regular String Raw string "ab" "ab*" r"ab" r"ab*" "\\section" "\\\\section" r"\section" r"\\section" "\w+\s+\1" "\\w+\\s+\\1" r"\w+\s+\1" r"\w+\s+\1" ### Performing Matches¶ Once you have an object representing a compiled regular expression, what do you do with it. Pattern objects have several methods and attributes. Only the most significant ones will be covered here; consult the re docs for a complete listing. re Method/Attribute Purpose match() match() Determine if the RE matches at the beginning of the string. search() search() Scan through a string, looking for any location where this RE matches.