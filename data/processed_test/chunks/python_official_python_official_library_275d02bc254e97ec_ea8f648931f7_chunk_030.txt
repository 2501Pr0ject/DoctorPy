Change the current working directory to the directory represented by the file descriptor fd. The descriptor must refer to an opened directory, not an open file. As of Python 3. 3, this is equivalent to os. chdir(fd). os. chdir(fd) Raises an auditing event os. chdir with argument path. os. chdir path Availability: Unix. Return a string representing the current working directory. Return a bytestring representing the current working directory. Changed in version 3. 8: The function now uses the UTF-8 encoding on Windows, rather than the ANSI code page: see PEP 529 for the rationale. The function is no longer deprecated on Windows. Set the flags of path to the numeric flags, like chflags(), but do not follow symbolic links. As of Python 3. 3, this is equivalent to os. chflags(path, flags, follow_symlinks=False). chflags() os. chflags(path, flags, follow_symlinks=False) Raises an auditing event os. chflags with arguments path, flags. os. chflags path flags Availability: Unix, not WASI. Changed in version 3. 6: Accepts a path-like object. Change the mode of path to the numeric mode. If path is a symlink, this affects the symlink rather than the target. See the docs for chmod() for possible values of mode. As of Python 3. 3, this is equivalent to os. chmod(path, mode, follow_symlinks=False). chmod() os. chmod(path, mode, follow_symlinks=False) lchmod() is not part of POSIX, but Unix implementations may have it if changing the mode of symbolic links is supported. lchmod() Raises an auditing event os. chmod with arguments path, mode, dir_fd. os. chmod path mode dir_fd Availability: Unix, Windows, not Linux, FreeBSD >= 1. 3, NetBSD >= 1. 3, not OpenBSD Changed in version 3. 6: Accepts a path-like object. Changed in version 3. 13: Added support on Windows. Change the owner and group id of path to the numeric uid and gid. This function will not follow symbolic links. As of Python 3. 3, this is equivalent to os. chown(path, uid, gid, follow_symlinks=False). os.