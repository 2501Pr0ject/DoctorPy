{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_071",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "index() bin() hex() oct() __int__() __float__() __complex__() int() float() complex() __index__() round() math trunc() floor() ceil() __round__() Integral int int() __trunc__() __int__() __index__() int() __trunc__() with with object with as None __exit__() with case MyClass(x, y) MyClass () MyClass. __match_args__ (\"left\", \"center\", \"right\") case MyClass(x, y) case MyClass(left=x, center=y) TypeError match bytes memoryview memoryview inspect. BufferFlags memoryview memoryview __buffer__() None __buffer__ __release_buffer__ collections. abc. Buffer >>> class C:. pass. >>> c = C() >>> c. __len__ = lambda: 5 >>> len(c) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: object of type 'C' has no len() __hash__() __repr__() >>> 1. __hash__() == hash(1) True >>> int. __hash__() == hash(int) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: descriptor '__hash__' of 'int' object needs an argument >>> type(1). __hash__(1) == hash(1) True >>> type(int). __hash__(int) == hash(int) True __getattribute__() >>> class Meta(type):. def __getattribute__(*args):. print(\"Metaclass getattribute invoked\"). return type. __getattribute__(*args). >>> class C(object, metaclass=Meta):. def __len__(self):. return 10. def __getattribute__(*args):. print(\"Class getattribute invoked\"). return object. __getattribute__(*args). >>> c = C() >>> c. __len__() # Explicit lookup via instance Class getattribute invoked 10 >>> type(c). __len__(c) # Explicit lookup via type Metaclass getattribute invoked 10 >>> len(c) # Implicit lookup 10 __getattribute__() __await__() async def types. coroutine() __await__() asyncio. Future await object __await__ asyncio __await__() StopIteration value StopIteration RuntimeError None __await__() None send() StopIteration __await__() throw() StopIteration __await__() close() GeneratorExit __anext__ async for object StopAsyncIteration class Reader: async def readline(self):.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 71,
  "start_char": 148956,
  "end_char": 150919,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.766659"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_071.txt"
}