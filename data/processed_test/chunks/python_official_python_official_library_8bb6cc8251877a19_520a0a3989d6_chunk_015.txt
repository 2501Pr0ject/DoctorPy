registry[float] <function fun_num at 0x1035a2840> >>> fun. registry[object] <function fun at 0x103fe0000> register() register() types. UnionType typing. Union @singledispatchmethod @singledispatchmethod class Negator: @singledispatchmethod def neg(self, arg): raise NotImplementedError("Cannot negate a") @neg. register def _(self, arg: int): return -arg @neg. register def _(self, arg: bool): return not arg @singledispatchmethod @classmethod dispatcher. register singledispatchmethod Negator neg class Negator: @singledispatchmethod @classmethod def neg(cls, arg): raise NotImplementedError("Cannot negate a") @neg. register @classmethod def _(cls, arg: int): return -arg @neg. register @classmethod def _(cls, arg: bool): return not arg @staticmethod @abstractmethod WRAPPER_ASSIGNMENTS __module__ __name__ __qualname__ __annotations__ __type_params__ __doc__ WRAPPER_UPDATES __dict__ lru_cache() __wrapped__ update_wrapper() AttributeError __wrapped__ __annotations__ AttributeError __wrapped__ __wrapped__ __type_params__ update_wrapper() partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated) >>> from functools import wraps >>> def my_decorator(f):. @wraps(f). def wrapper(*args, **kwds):. print('Calling decorated function'). return f(*args, **kwds). return wrapper. >>> @my_decorator. def example():. """Docstring""". print('Called example function'). >>> example() Calling decorated function Called example function >>> example. __name__ 'example' >>> example. __doc__ 'Docstring' 'wrapper' example() partial partial partial() partial func partial partial partial __name__ function. __doc__ partial functools partial itertools operator.