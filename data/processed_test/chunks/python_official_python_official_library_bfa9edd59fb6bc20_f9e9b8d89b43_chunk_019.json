{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_019",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "index(x), only without copying any data and with the returned index being relative to the start of the sequence rather than the start of the slice. index ValueError s[i:j]. index(x) An IndexError is raised if i is outside the sequence range. An IndexError is raised if i is outside the sequence range. IndexError ### Immutable Sequence Types¶ The only operation that immutable sequence types generally implement that is not also implemented by mutable sequence types is support for the hash() built-in. hash() This support allows immutable sequences, such as tuple instances, to be used as dict keys and stored in set and frozenset instances. tuple dict set frozenset Attempting to hash an immutable sequence that contains unhashable values will result in TypeError. TypeError ### Mutable Sequence Types¶ The operations in the following table are defined on mutable sequence types. The collections. abc. MutableSequence ABC is provided to make it easier to correctly implement these operations on custom sequence types. collections. abc. MutableSequence In the table s is an instance of a mutable sequence type, t is any iterable object and x is an arbitrary object that meets any type and value restrictions imposed by s (for example, bytearray only accepts integers that meet the value restriction 0 <= x <= 255). bytearray 0 <= x <= 255 Operation Result Notes s[i] = x s[i] = x item i of s is replaced by x del s[i] del s[i] removes item i of s s[i:j] = t s[i:j] = t slice of s from i to j is replaced by the contents of the iterable t del s[i:j] del s[i:j] same as s[i:j] = [] s[i:j] = [] s[i:j:k] = t s[i:j:k] = t the elements of s[i:j:k] are replaced by those of t s[i:j:k] (1) del s[i:j:k] del s[i:j:k] removes the elements of s[i:j:k] from the list s[i:j:k] s. append(x) s. append(x) appends x to the end of the sequence (same as s[len(s):len(s)] = [x]) s[len(s):len(s)] = [x] s. clear() s. clear() removes all items from s (same as del s[:]) del s[:] (5) s. copy() s.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 19,
  "start_char": 37599,
  "end_char": 39575,
  "token_count": 487,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.196790"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_019.txt"
}