{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_070",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "False a<b a==b a>b Since sets only define partial ordering (subset relationships), the output of the list. sort() method is undefined for lists of sets. list. sort() Set elements, like dictionary keys, must be hashable. Binary operations that mix set instances with frozenset return the type of the first operand. For example: frozenset('ab') | set('bc') returns an instance of frozenset. set frozenset frozenset('ab') | set('bc') frozenset The following table lists operations available for set that do not apply to immutable instances of frozenset: set frozenset Update the set, adding elements from all others. Update the set, keeping only elements found in it and all others. Update the set, removing elements found in others. Update the set, keeping only elements found in either set, but not in both. Add element elem to the set. Remove element elem from the set. Raises KeyError if elem is not contained in the set. KeyError Remove element elem from the set if it is present. Remove and return an arbitrary element from the set. Raises KeyError if the set is empty. KeyError Remove all elements from the set. Note, the non-operator versions of the update(), intersection_update(), difference_update(), and symmetric_difference_update() methods will accept any iterable as an argument. update() intersection_update() difference_update() symmetric_difference_update() Note, the elem argument to the contains(), remove(), and discard() methods may be a set. To support searching for an equivalent frozenset, a temporary one is created from elem. __contains__() remove() discard() ## Mapping Types — dict¶ dict A mapping object maps hashable values to arbitrary objects. Mappings are mutable objects. There is currently only one standard mapping type, the dictionary. (For other containers see the built-in list, set, and tuple classes, and the collections module. ) list set tuple collections A dictionary’s keys are almost arbitrary values. Values that are not hashable, that is, values containing lists, dictionaries or other mutable types (that are compared by value rather than by object identity) may not be used as keys. Values that compare equal (such as 1, 1. 0, and True) can be used interchangeably to index the same dictionary entry. 1 1. 0 True Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 70,
  "start_char": 142224,
  "end_char": 144604,
  "token_count": 500,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.242472"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_070.txt"
}