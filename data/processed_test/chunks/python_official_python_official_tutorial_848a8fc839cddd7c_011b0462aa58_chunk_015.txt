For example: True 'name' >>> foo(1, **{'name': 2}) Traceback (most recent call last): File "<stdin>", line 1, in <module> TypeError: foo() got multiple values for argument 'name' >>> But using / (positional only arguments), it is possible since it allows name as a positional argument and 'name' as a key in the keyword arguments: / name 'name' >>> def foo(name, /, **kwds):. return 'name' in kwds. >>> foo(1, **{'name': 2}) True In other words, the names of positional-only parameters can be used in kwds without ambiguity. **kwds #### 4. 9. 3. 5. Recap¶ The use case will determine which parameters to use in the function definition: def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2): As guidance: Use positional-only if you want the name of the parameters to not be available to the user. This is useful when parameter names have no real meaning, if you want to enforce the order of the arguments when the function is called or if you need to take some positional parameters and arbitrary keywords. Use positional-only if you want the name of the parameters to not be available to the user. This is useful when parameter names have no real meaning, if you want to enforce the order of the arguments when the function is called or if you need to take some positional parameters and arbitrary keywords. Use keyword-only when names have meaning and the function definition is more understandable by being explicit with names or you want to prevent users relying on the position of the argument being passed. Use keyword-only when names have meaning and the function definition is more understandable by being explicit with names or you want to prevent users relying on the position of the argument being passed. For an API, use positional-only to prevent breaking API changes if the parameter’s name is modified in the future. For an API, use positional-only to prevent breaking API changes if the parameter’s name is modified in the future. ### 4. 9. 4. Arbitrary Argument Lists¶ Finally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple (see Tuples and Sequences).