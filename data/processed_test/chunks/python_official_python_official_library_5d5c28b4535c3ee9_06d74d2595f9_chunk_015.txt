write() str True str int float bool None TypeError False True False False RecursionError True False float nan inf -inf ValueError True NaN Infinity -Infinity JSONEncoder default() None JSONEncoder "\t" "" None (item_separator, key_separator) None (', ', ': ') None (',', ': ') (',', ':') TypeError None TypeError True False (',', ': ') None str dump() str loads(dumps(x)). = x. read() JSONDecoder load() None JSONDecoder dict dict None dict None None float(num_str) decimal. Decimal None int(num_str) float '-Infinity' 'Infinity' 'NaN' None int() load() str bytes bytearray bytes bytearray NaN Infinity -Infinity float dict dict float(num_str) decimal. Decimal int(num_str) float '-Infinity' 'Infinity' 'NaN' True '\t' '\n' '\r' '\0' JSONDecodeError str JSONDecodeError str default() o TypeError TypeError str int float bool None RecursionError NaN Infinity -Infinity ValueError False "" None "\t" (item_separator, key_separator) (', ', ': ') None (',', ': ') (',', ':') (',', ': ') None TypeError TypeError TypeError default() def default(self, o): try: iterable = iter(o) except TypeError: pass else: return list(iterable) # Let the base class default method raise the TypeError return super(). default(o) >>> json. JSONEncoder(). encode({"foo": ["bar", "baz"]}) '{"foo": ["bar", "baz"]}' for chunk in json. JSONEncoder(). iterencode(bigobject): mysocket. write(chunk) ValueError JSONEncoder JSONDecoder Unicode strings ValueError str Infinity -Infinity NaN >>> # Neither of these calls raises an exception, but the results are not valid JSON >>> json. dumps(float('-inf')) '-Infinity' >>> json. dumps(float('nan')) 'NaN' >>> # Same when deserializing >>> json. loads('-Infinity') -inf >>> json. loads('NaN') nan >>> weird_json = '{"x": 1, "x": 2, "x": 3}' >>> json. loads(weird_json) {'x': 3} dict list int decimal. Decimal json. tool infile outfile sys. stdin sys. stdout $ echo '{"json": "obj"}' | python -m json. tool { "json": "obj" } $ echo '{1. 2:3.