if (this_is_one_thing and that_is_another_thing): do_something() my_list = [ 1, 2, 3, 4, 5, 6, ] result = some_function_that_takes_arguments( 'a', 'b', 'c', 'd', 'e', 'f', ) my_list = [ 1, 2, 3, 4, 5, 6, ] result = some_function_that_takes_arguments( 'a', 'b', 'c', 'd', 'e', 'f', ) with with open('/path/to/some/file/you/want/to/read') as file_1, \ open('/path/to/some/file/being/written', 'w') as file_2: file_2. write(file_1. read()) with assert # Wrong: # operators sit far away from their operands income = (gross_wages + taxable_interest + (dividends - qualified_dividends) - ira_deduction - student_loan_interest) # Correct: # easy to match operators with operands income = (gross_wages + taxable_interest + (dividends - qualified_dividends) - ira_deduction - student_loan_interest) # Correct: import os import sys # Wrong: import sys, os # Correct: from subprocess import Popen, PIPE sys. path import mypkg. sibling from mypkg import sibling from mypkg. sibling import example from. import sibling from. sibling import example from myclass import MyClass from foo. bar. yourclass import YourClass import myclass import foo. bar. yourclass myclass. MyClass foo. bar. yourclass. YourClass from <module> import * __all__ __author__ __version__ from __future__ """This is the example module. This module does stuff. """ from __future__ import barry_as_FLUFL __all__ = ['a', 'b', 'c'] __version__ = '0.