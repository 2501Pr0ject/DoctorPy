{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_027",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "__repr__() __str__() The default implementation defined by the built-in type object calls object. repr(). object object. __repr__() Called by bytes to compute a byte-string representation of an object. This should return a bytes object. The object class itself does not provide this method. bytes object Called by the format() built-in function, and by extension, evaluation of formatted string literals and the str. format() method, to produce a “formatted” string representation of an object. The format_spec argument is a string that contains a description of the formatting options desired. The interpretation of the format_spec argument is up to the type implementing format(), however most classes will either delegate formatting to one of the built-in types, or use a similar formatting option syntax. format() str. format() __format__() See Format Specification Mini-Language for a description of the standard formatting syntax. The return value must be a string object. The default implementation by the object class should be given an empty format_spec string. It delegates to str(). object __str__() Changed in version 3. 4: The format method of object itself raises a TypeError if passed any non-empty string. object TypeError Changed in version 3. 7: object. format(x, '') is now equivalent to str(x) rather than format(str(x), ''). object. __format__(x, '') str(x) format(str(x), '') These are the so-called “rich comparison” methods. The correspondence between operator symbols and method names is as follows: x<y calls x. lt(y), x<=y calls x. le(y), x==y calls x. eq(y), x. =y calls x. ne(y), x>y calls x. gt(y), and x>=y calls x. ge(y). x<y x. __lt__(y) x<=y x. __le__(y) x==y x. __eq__(y) x. =y x. __ne__(y) x>y x. __gt__(y) x>=y x. __ge__(y) A rich comparison method may return the singleton NotImplemented if it does not implement the operation for a given pair of arguments. By convention, False and True are returned for a successful comparison. However, these methods can return any value, so if the comparison operator is used in a Boolean context (e. g.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 27,
  "start_char": 62109,
  "end_char": 64187,
  "token_count": 478,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.718734"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_027.txt"
}