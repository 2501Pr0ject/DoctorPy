{
  "chunk_id": "external_external_guides_ab3164948a2522c6_60feccf23bf0_chunk_004",
  "original_doc_id": "external_external_guides_ab3164948a2522c6_60feccf23bf0",
  "content": "If you need more control over the formatting of the date/time, provide a datefmt argument to basicConfig, as in this example: basicConfig import logging logging. basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p') logging. warning('is when this event was logged. ') which would display something like this: 12/12/2010 11:46:36 AM is when this event was logged. The format of the datefmt argument is the same as supported by time. strftime(). time. strftime() ### Next Steps¶ That concludes the basic tutorial. It should be enough to get you up and running with logging. There’s a lot more that the logging package offers, but to get the best out of it, you’ll need to invest a little more of your time in reading the following sections. If you’re ready for that, grab some of your favourite beverage and carry on. If your logging needs are simple, then use the above examples to incorporate logging into your own scripts, and if you run into problems or don’t understand something, please post a question on the comp. lang. python Usenet group (available at  and you should receive help before too long. Still here. You can carry on reading the next few sections, which provide a slightly more advanced/in-depth tutorial than the basic one above. After that, you can take a look at the Logging Cookbook. ## Advanced Logging Tutorial¶ The logging library takes a modular approach and offers several categories of components: loggers, handlers, filters, and formatters. Loggers expose the interface that application code directly uses. Loggers expose the interface that application code directly uses. Handlers send the log records (created by loggers) to the appropriate destination. Handlers send the log records (created by loggers) to the appropriate destination. Filters provide a finer grained facility for determining which log records to output. Filters provide a finer grained facility for determining which log records to output. Formatters specify the layout of log records in the final output. Formatters specify the layout of log records in the final output. Log event information is passed between loggers, handlers, filters and formatters in a LogRecord instance. LogRecord Logging is performed by calling methods on instances of the Logger class (hereafter called loggers).",
  "title": "Logging HOWTO.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 4,
  "start_char": 9432,
  "end_char": 11745,
  "token_count": 481,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_ab3164948a2522c6.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:42.523855"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_ab3164948a2522c6_60feccf23bf0_chunk_004.txt"
}