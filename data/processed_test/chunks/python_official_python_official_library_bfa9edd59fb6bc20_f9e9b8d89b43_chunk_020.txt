copy() creates a shallow copy of s (same as s[:]) s[:] (5) s. extend(t) or s += t s. extend(t) s += t extends s with the contents of t (for the most part the same as s[len(s):len(s)] = t) s[len(s):len(s)] = t s = n s *= n updates s with its contents repeated n times (6) s. insert(i, x) s. insert(i, x) inserts x into s at the index given by i (same as s[i:i] = [x]) s[i:i] = [x] s. pop() or s. pop(i) s. pop() s. pop(i) retrieves the item at i and also removes it from s (2) s. remove(x) s. remove(x) removes the first item from s where s[i] is equal to x s[i] (3) s. reverse() s. reverse() reverses the items of s in place (4) Notes: If k is not equal to 1, t must have the same length as the slice it is replacing. If k is not equal to 1, t must have the same length as the slice it is replacing. 1 The optional argument i defaults to -1, so that by default the last item is removed and returned. The optional argument i defaults to -1, so that by default the last item is removed and returned. -1 remove() raises ValueError when x is not found in s. remove() raises ValueError when x is not found in s. remove() ValueError The reverse() method modifies the sequence in place for economy of space when reversing a large sequence. To remind users that it operates by side effect, it does not return the reversed sequence. The reverse() method modifies the sequence in place for economy of space when reversing a large sequence. To remind users that it operates by side effect, it does not return the reversed sequence. reverse() clear() and copy() are included for consistency with the interfaces of mutable containers that donâ€™t support slicing operations (such as dict and set). copy() is not part of the collections. abc. MutableSequence ABC, but most concrete mutable sequence classes provide it. Added in version 3. 3: clear() and copy() methods.