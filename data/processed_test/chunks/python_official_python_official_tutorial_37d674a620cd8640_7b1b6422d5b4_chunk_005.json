{
  "chunk_id": "python_official_python_official_tutorial_37d674a620cd8640_7b1b6422d5b4_chunk_005",
  "original_doc_id": "python_official_python_official_tutorial_37d674a620cd8640_7b1b6422d5b4",
  "content": "] The following list comprehension will transpose rows and columns: >>> [[row[i] for row in matrix] for i in range(4)] [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] As we saw in the previous section, the inner list comprehension is evaluated in the context of the for that follows it, so this example is equivalent to: for >>> transposed = [] >>> for i in range(4):. transposed. append([row[i] for row in matrix]). >>> transposed [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] which, in turn, is the same as: >>> transposed = [] >>> for i in range(4):. # the following 3 lines implement the nested listcomp. transposed_row = []. for row in matrix:. transposed_row. append(row[i]). transposed. append(transposed_row). >>> transposed [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] In the real world, you should prefer built-in functions to complex flow statements. The zip() function would do a great job for this use case: zip() >>> list(zip(*matrix)) [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)] See Unpacking Argument Lists for details on the asterisk in this line. ## 5. 2. The del statementÂ¶ del There is a way to remove an item from a list given its index instead of its value: the del statement. This differs from the pop() method which returns a value. The del statement can also be used to remove slices from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice). For example: del pop() del >>> a = [-1, 1, 66. 25, 333, 333, 1234. 5] >>> del a[0] >>> a [1, 66. 25, 333, 333, 1234.",
  "title": "5. Data Structures.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 5,
  "start_char": 7755,
  "end_char": 9294,
  "token_count": 494,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_37d674a620cd8640.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:05.619679"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_37d674a620cd8640_7b1b6422d5b4_chunk_005.txt"
}