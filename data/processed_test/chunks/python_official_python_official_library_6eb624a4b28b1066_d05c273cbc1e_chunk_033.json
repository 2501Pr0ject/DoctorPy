{
  "chunk_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_033",
  "original_doc_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e",
  "content": "time(4, 23, 1, tzinfo=datetime. timezone(datetime. timedelta(seconds=14400))) >>> time. fromisoformat('04:23:01Z') datetime. time(4, 23, 1, tzinfo=datetime. timezone. utc) >>> time. fromisoformat('04:23:01+00:00') datetime. time(4, 23, 1, tzinfo=datetime. timezone. utc) Added in version 3. 7. Changed in version 3. 11: Previously, this method only supported formats that could be emitted by time. isoformat(). time. isoformat() Instance methods: Return a new time with the same values, but with specified parameters updated. Note that tzinfo=None can be specified to create a naive time from an aware time, without conversion of the time data. time tzinfo=None time time time objects are also supported by generic function copy. replace(). time copy. replace() Changed in version 3. 6: Added the fold parameter. Return a string representing the time in ISO 8601 format, one of: HH:MM:SS. ffffff, if microsecond is not 0 HH:MM:SS. ffffff, if microsecond is not 0 HH:MM:SS. ffffff microsecond HH:MM:SS, if microsecond is 0 HH:MM:SS, if microsecond is 0 HH:MM:SS microsecond HH:MM:SS. ffffff+HH:MM[:SS[. ffffff]], if utcoffset() does not return None HH:MM:SS. ffffff+HH:MM[:SS[. ffffff]], if utcoffset() does not return None HH:MM:SS. ffffff+HH:MM[:SS[. ffffff]] utcoffset() None HH:MM:SS+HH:MM[:SS[. ffffff]], if microsecond is 0 and utcoffset() does not return None HH:MM:SS+HH:MM[:SS[. ffffff]], if microsecond is 0 and utcoffset() does not return None HH:MM:SS+HH:MM[:SS[. ffffff]] microsecond utcoffset() None The optional argument timespec specifies the number of additional components of the time to include (the default is 'auto').",
  "title": "datetime â€” Basic date and time types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 33,
  "start_char": 63938,
  "end_char": 65575,
  "token_count": 502,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_6eb624a4b28b1066.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:01.409899"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_033.txt"
}