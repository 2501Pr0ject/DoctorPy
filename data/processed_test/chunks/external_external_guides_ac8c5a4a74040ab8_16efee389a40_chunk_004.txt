b 'b' The end of the RE has now been reached, and it has matched 'abcb'. This demonstrates how the matching engine goes as far as it can at first, and if no match is found it will then progressively back up and retry the rest of the RE again and again. It will back up until it has tried zero matches for [bcd], and if that subsequently fails, the engine will conclude that the string doesn’t match the RE at all. 'abcb' [bcd]* Another repeating metacharacter is +, which matches one or more times. Pay careful attention to the difference between * and +; * matches zero or more times, so whatever’s being repeated may not be present at all, while + requires at least one occurrence. To use a similar example, ca+t will match 'cat' (1 'a'), 'caaat' (3 'a's), but won’t match 'ct'. + * + * + ca+t 'cat' 'a' 'caaat' 'a' 'ct' There are two more repeating operators or quantifiers. The question mark character,. , matches either once or zero times; you can think of it as marking something as being optional. For example, home-. brew matches either 'homebrew' or 'home-brew'. home-. brew 'homebrew' 'home-brew' The most complicated quantifier is {m,n}, where m and n are decimal integers. This quantifier means there must be at least m repetitions, and at most n. For example, a/{1,3}b will match 'a/b', 'a//b', and 'a///b'. It won’t match 'ab', which has no slashes, or 'a////b', which has four. {m,n} a/{1,3}b 'a/b' 'a//b' 'a///b' 'ab' 'a////b' You can omit either m or n; in that case, a reasonable value is assumed for the missing value. Omitting m is interpreted as a lower limit of 0, while omitting n results in an upper bound of infinity. The simplest case {m} matches the preceding item exactly m times. For example, a/{2}b will only match 'a//b'.