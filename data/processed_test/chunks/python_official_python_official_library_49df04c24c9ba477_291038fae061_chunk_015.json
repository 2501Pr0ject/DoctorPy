{
  "chunk_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_015",
  "original_doc_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061",
  "content": "0, next_server_available - arrival_time) waits. append(wait) service_duration = max(0. 0, gauss(average_service_time, stdev_service_time)) service_completed = arrival_time + wait + service_duration heapreplace(servers, service_completed) print(f'Mean wait: {mean(waits):. 1f} Max wait: {max(waits):. 1f}') print('Quartiles:', [round(q, 1) for q in quantiles(waits)]) itertools def random_product(*args, repeat=1): \"Random selection from itertools. product(*args, **kwds)\" pools = [tuple(pool) for pool in args] * repeat return tuple(map(random. choice, pools)) def random_permutation(iterable, r=None): \"Random selection from itertools. permutations(iterable, r)\" pool = tuple(iterable) r = len(pool) if r is None else r return tuple(random. sample(pool, r)) def random_combination(iterable, r): \"Random selection from itertools. combinations(iterable, r)\" pool = tuple(iterable) n = len(pool) indices = sorted(random. sample(range(n), r)) return tuple(pool[i] for i in indices) def random_combination_with_replacement(iterable, r): \"Choose r elements with replacement. Order the result to match the iterable. \" # Result will be in set(itertools. combinations_with_replacement(iterable, r)). pool = tuple(iterable) n = len(pool) indices = sorted(random. choices(range(n), k=r)) return tuple(pool[i] for i in indices) random() 0. 05954861408025609 from random import Random from math import ldexp class FullRandom(Random): def random(self): mantissa = 0x10_0000_0000_0000 | self. getrandbits(52) exponent = -53 x = 0 while not x: x = self. getrandbits(32) exponent += x. bit_length() - 32 return ldexp(mantissa, exponent) >>> fr = FullRandom() >>> fr. random() 0. 05954861408025609 >>> fr. expovariate(0. 25) 8. 87925541791544 math. ulp(0. 0) random() random python -m random [-h] [-c CHOICE [CHOICE.",
  "title": "random â€” Generate pseudo-random numbers.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 15,
  "start_char": 29565,
  "end_char": 31364,
  "token_count": 496,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_49df04c24c9ba477.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.621535"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_015.txt"
}