HTTP is based on requests and responses - the client makes requests and servers send responses. urllib. request mirrors this with a Request object which represents the HTTP request you are making. In its simplest form you create a Request object that specifies the URL you want to fetch. Calling urlopen with this Request object returns a response object for the URL requested. This response is a file-like object, which means you can for example call. read() on the response: Request urlopen. read() import urllib. request req = urllib. request. Request(' with urllib. request. urlopen(req) as response: the_page = response. read() Note that urllib. request makes use of the same Request interface to handle all URL schemes. For example, you can make an FTP request like so: req = urllib. request. Request('ftp://example. com/') In the case of HTTP, there are two extra things that Request objects allow you to do: First, you can pass data to be sent to the server. Second, you can pass extra information (“metadata”) about the data or about the request itself, to the server - this information is sent as HTTP “headers”. Let’s look at each of these in turn. ### Data¶ Sometimes you want to send data to a URL (often the URL will refer to a CGI (Common Gateway Interface) script or other web application). With HTTP, this is often done using what’s known as a POST request. This is often what your browser does when you submit a HTML form that you filled in on the web. Not all POSTs have to come from forms: you can use a POST to transmit arbitrary data to your own application. In the common case of HTML forms, the data needs to be encoded in a standard way, and then passed to the Request object as the data argument. The encoding is done using a function from the urllib. parse library. data urllib. parse import urllib. parse import urllib. request url = ' values = {'name' : 'Michael Foord', 'location' : 'Northampton', 'language' : 'Python' } data = urllib. parse. urlencode(values) data = data. encode('ascii') # data should be bytes req = urllib. request. Request(url, data) with urllib. request. urlopen(req) as response: the_page = response. read() Note that other encodings are sometimes required (e. g.