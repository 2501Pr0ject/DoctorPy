{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_023",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "start stop step None Slice objects support one method: This method takes a single integer argument length and computes information about the slice that the slice object would describe if applied to a sequence of length items. It returns a tuple of three integers; respectively these are the start and stop indices and the step or stride length of the slice. Missing or out-of-bounds indices are handled in a manner consistent with regular slices. #### 3. 2. 13. 5. Static method objects¶ Static method objects provide a way of defeating the transformation of function objects to method objects described above. A static method object is a wrapper around any other object, usually a user-defined method object. When a static method object is retrieved from a class or a class instance, the object actually returned is the wrapped object, which is not subject to any further transformation. Static method objects are also callable. Static method objects are created by the built-in staticmethod() constructor. staticmethod() #### 3. 2. 13. 6. Class method objects¶ A class method object, like a static method object, is a wrapper around another object that alters the way in which that object is retrieved from classes and class instances. The behaviour of class method objects upon such retrieval is described above, under “instance methods”. Class method objects are created by the built-in classmethod() constructor. classmethod() ## 3. 3. Special method names¶ A class can implement certain operations that are invoked by special syntax (such as arithmetic operations or subscripting and slicing) by defining methods with special names. This is Python’s approach to operator overloading, allowing classes to define their own behavior with respect to language operators. For instance, if a class defines a method named getitem(), and x is an instance of this class, then x[i] is roughly equivalent to type(x). getitem(x, i). Except where mentioned, attempts to execute an operation raise an exception when no appropriate method is defined (typically AttributeError or TypeError). __getitem__() x x[i] type(x). __getitem__(x, i) AttributeError TypeError Setting a special method to None indicates that the corresponding operation is not available. For example, if a class sets iter() to None, the class is not iterable, so calling iter() on its instances will raise a TypeError (without falling back to getitem()).",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 23,
  "start_char": 52476,
  "end_char": 54890,
  "token_count": 477,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.714683"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_023.txt"
}