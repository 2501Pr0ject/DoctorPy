g = itemgetter(2, 5, 3) g(r) (r[2], r[5], r[3]) Equivalent to: def itemgetter(*items): if len(items) == 1: item = items[0] def g(obj): return obj[item] else: def g(obj): return tuple(obj[item] for item in items) return g The items can be any type accepted by the operandâ€™s getitem() method. Dictionaries accept any hashable value. Lists, tuples, and strings accept an index or a slice: __getitem__() >>> itemgetter(1)('ABCDEFG') 'B' >>> itemgetter(1, 3, 5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2, None))('ABCDEFG') 'CDEFG' >>> soldier = dict(rank='captain', name='dotterbart') >>> itemgetter('rank')(soldier) 'captain' Example of using itemgetter() to retrieve specific fields from a tuple record: itemgetter() >>> inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)] >>> getcount = itemgetter(1) >>> list(map(getcount, inventory)) [3, 2, 5, 1] >>> sorted(inventory, key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)] Return a callable object that calls the method name on its operand. If additional arguments and/or keyword arguments are given, they will be given to the method as well. For example: After f = methodcaller('name'), the call f(b) returns b. name(). After f = methodcaller('name'), the call f(b) returns b. name(). f = methodcaller('name') f(b) b. name() After f = methodcaller('name', 'foo', bar=1), the call f(b) returns b. name('foo', bar=1). After f = methodcaller('name', 'foo', bar=1), the call f(b) returns b. name('foo', bar=1). f = methodcaller('name', 'foo', bar=1) f(b) b.