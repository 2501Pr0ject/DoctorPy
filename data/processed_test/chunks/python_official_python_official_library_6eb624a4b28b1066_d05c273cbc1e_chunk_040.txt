altzone) else: DSTOFFSET = STDOFFSET DSTDIFF = DSTOFFSET - STDOFFSET class LocalTimezone(tzinfo): def fromutc(self, dt): assert dt. tzinfo is self stamp = (dt - datetime(1970, 1, 1, tzinfo=self)) // SECOND args = _time. localtime(stamp)[:6] dst_diff = DSTDIFF // SECOND # Detect fold fold = (args == _time. localtime(stamp - dst_diff)) return datetime(*args, microsecond=dt. microsecond, tzinfo=self, fold=fold) def utcoffset(self, dt): if self. _isdst(dt): return DSTOFFSET else: return STDOFFSET def dst(self, dt): if self. _isdst(dt): return DSTDIFF else: return ZERO def tzname(self, dt): return _time. tzname[self. _isdst(dt)] def _isdst(self, dt): tt = (dt. year, dt. month, dt. day, dt. hour, dt. minute, dt. second, dt. weekday(), 0, 0) stamp = _time. mktime(tt) tt = _time. localtime(stamp) return tt. tm_isdst > 0 Local = LocalTimezone() # A complete implementation of current DST rules for major US time zones. def first_sunday_on_or_after(dt): days_to_go = 6 - dt. weekday() if days_to_go: dt += timedelta(days_to_go) return dt # US DST Rules # # This is a simplified (i. e. , wrong for a few cases) set of rules for US # DST start and end times. For a complete and up-to-date set of DST rules # and timezone definitions, visit the Olson Database (or try pytz): #  #  (might not be up-to-date) # # In the US, since 2007, DST starts at 2am (standard time) on the second # Sunday in March, which is the first Sunday on or after Mar 8. DSTSTART_2007 = datetime(1, 3, 8, 2) # and ends at 2am (DST time) on the first Sunday of Nov.