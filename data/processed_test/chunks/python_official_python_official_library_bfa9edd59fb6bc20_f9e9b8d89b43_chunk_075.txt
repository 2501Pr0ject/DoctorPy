>>> d = {"one": 1, "two": 2, "three": 3, "four": 4} >>> d {'one': 1, 'two': 2, 'three': 3, 'four': 4} >>> list(reversed(d)) ['four', 'three', 'two', 'one'] >>> list(reversed(d. values())) [4, 3, 2, 1] >>> list(reversed(d. items())) [('four', 4), ('three', 3), ('two', 2), ('one', 1)] Changed in version 3. 8: Dictionaries are now reversible. See also types. MappingProxyType can be used to create a read-only view of a dict. types. MappingProxyType dict ### Dictionary view objects¶ The objects returned by dict. keys(), dict. values() and dict. items() are view objects. They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes. dict. keys() dict. values() dict. items() Dictionary views can be iterated over to yield their respective data, and support membership tests: Return the number of entries in the dictionary. Return an iterator over the keys, values or items (represented as tuples of (key, value)) in the dictionary. (key, value) Keys and values are iterated over in insertion order. This allows the creation of (value, key) pairs using zip(): pairs = zip(d. values(), d. keys()). Another way to create the same list is pairs = [(v, k) for (k, v) in d. items()]. (value, key) zip() pairs = zip(d. values(), d. keys()) pairs = [(v, k) for (k, v) in d. items()] Iterating views while adding or deleting entries in the dictionary may raise a RuntimeError or fail to iterate over all entries. RuntimeError Changed in version 3. 7: Dictionary order is guaranteed to be insertion order. Return True if x is in the underlying dictionary’s keys, values or items (in the latter case, x should be a (key, value) tuple). True (key, value) Return a reverse iterator over the keys, values or items of the dictionary. The view will be iterated in reverse order of the insertion. Changed in version 3.