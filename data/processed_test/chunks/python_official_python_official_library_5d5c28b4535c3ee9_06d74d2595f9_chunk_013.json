{
  "chunk_id": "python_official_python_official_library_5d5c28b4535c3ee9_06d74d2595f9_chunk_013",
  "original_doc_id": "python_official_python_official_library_5d5c28b4535c3ee9_06d74d2595f9",
  "content": "dumps() for more information. json. dumps() Added in version 3. 9. Parse every input line as separate JSON object. Added in version 3. 8. Mutually exclusive options for whitespace control. Added in version 3. 9. Show the help message. Footnotes ### Table of Contents json — JSON encoder and decoder Basic Usage Encoders and Decoders Exceptions Standard Compliance and Interoperability Character Encodings Infinite and NaN Number Values Repeated Names Within an Object Top-level Non-Object, Non-Array Values Implementation Limitations Command Line Interface Command line options json Basic Usage Encoders and Decoders Exceptions Standard Compliance and Interoperability Character Encodings Infinite and NaN Number Values Repeated Names Within an Object Top-level Non-Object, Non-Array Values Implementation Limitations Character Encodings Infinite and NaN Number Values Repeated Names Within an Object Top-level Non-Object, Non-Array Values Implementation Limitations Command Line Interface Command line options Command line options #### Previous topic email. iterators: Iterators email. iterators #### Next topic mailbox — Manipulate mailboxes in various formats mailbox ### This page Report a bug Show source json marshal pickle >>> import json >>> json. dumps(['foo', {'bar': ('baz', None, 1. 0, 2)}]) '[\"foo\", {\"bar\": [\"baz\", null, 1. 0, 2]}]' >>> print(json. dumps(\"\\\"foo\\bar\")) \"\\\"foo\\bar\" >>> print(json. dumps('\\u1234')) \"\\u1234\" >>> print(json. dumps('\\\\')) \"\\\\\" >>> print(json. dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True)) {\"a\": 0, \"b\": 0, \"c\": 0} >>> from io import StringIO >>> io = StringIO() >>> json. dump(['streaming API'], io) >>> io. getvalue() '[\"streaming API\"]' >>> import json >>> json. dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':')) '[1,2,3,{\"4\":5,\"6\":7}]' >>> import json >>> print(json. dumps({'6': 7, '4': 5}, sort_keys=True, indent=4)) { \"4\": 5, \"6\": 7 } >>> import json >>> def custom_json(obj):.",
  "title": "json — JSON encoder and decoder.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 13,
  "start_char": 27595,
  "end_char": 29533,
  "token_count": 500,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_5d5c28b4535c3ee9.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:37.150329"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_5d5c28b4535c3ee9_06d74d2595f9_chunk_013.txt"
}