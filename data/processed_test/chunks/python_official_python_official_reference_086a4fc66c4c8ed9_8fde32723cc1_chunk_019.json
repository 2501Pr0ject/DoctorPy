{
  "chunk_id": "python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1_chunk_019",
  "original_doc_id": "python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1",
  "content": "x as 3 property() IndexError __setitem__() a, b = b, a [0, 2] x = [0, 1] i = 0 i, x[i] = 1, 2 # i is updated, then x[i] is updated print(x) *target augmented_assignment_stmt ::= augtarget augop (expression_list | yield_expression) augtarget ::= identifier | attributeref | subscription | slicing augop ::= \"+=\" | \"-=\" | \"*=\" | \"@=\" | \"/=\" | \"//=\" | \"%=\" | \"**=\" | \">>=\" | \"<<=\" | \"&=\" | \"^=\" | \"|=\" augtarget augop expression_list yield_expression identifier attributeref subscription slicing x += 1 x = x + 1 x a[i] += f(x) a[i] f(x) a[i] annotated_assignment_stmt ::= augtarget \":\" expression [\"=\" (starred_expression | yield_expression)] augtarget expression starred_expression yield_expression __annotations__ __setitem__() __setattr__() typing assert assert_stmt ::= \"assert\" expression [\",\" expression] expression expression assert expression if __debug__: if not expression: raise AssertionError assert expression1, expression2 if __debug__: if not expression1: raise AssertionError(expression2) __debug__ AssertionError __debug__ True False -O assert __debug__ pass pass_stmt ::= \"pass\" pass def f(arg): pass # a function that does nothing (yet) class C: pass # a class with no methods (yet) del del_stmt ::= \"del\" target_list target_list global NameError return return_stmt ::= \"return\" [expression_list] expression_list return None return None return try finally finally return StopIteration StopIteration StopIteration. value return StopAsyncIteration return yield yield_stmt ::= yield_expression yield_expression yield yield yield <expr> yield from <expr> (yield <expr>) (yield from <expr>) yield yield raise raise_stmt ::= \"raise\" [expression [\"from\" expression]] expression expression raise RuntimeError raise BaseException __traceback__ with_traceback() raise Exception(\"foo occurred\"). with_traceback(tracebackobj) from __cause__ __cause__ >>> try:. print(1 / 0). except Exception as exc:. raise RuntimeError(\"Something bad happened\") from exc.",
  "title": "7. Simple statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 19,
  "start_char": 44062,
  "end_char": 46022,
  "token_count": 460,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_086a4fc66c4c8ed9.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:05.272037"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1_chunk_019.txt"
}