The following exceptions are kept for compatibility with previous versions; starting from Python 3. 3, they are aliases of OSError. OSError Only available on Windows. ### OS exceptions¶ The following exceptions are subclasses of OSError, they get raised depending on the system error code. OSError Raised when an operation would block on an object (e. g. socket) set for non-blocking operation. Corresponds to errno EAGAIN, EALREADY, EWOULDBLOCK and EINPROGRESS. errno EAGAIN EALREADY EWOULDBLOCK EINPROGRESS In addition to those of OSError, BlockingIOError can have one more attribute: OSError BlockingIOError An integer containing the number of characters written to the stream before it blocked. This attribute is available when using the buffered I/O classes from the io module. io Raised when an operation on a child process failed. Corresponds to errno ECHILD. errno ECHILD A base class for connection-related issues. Subclasses are BrokenPipeError, ConnectionAbortedError, ConnectionRefusedError and ConnectionResetError. BrokenPipeError ConnectionAbortedError ConnectionRefusedError ConnectionResetError A subclass of ConnectionError, raised when trying to write on a pipe while the other end has been closed, or trying to write on a socket which has been shutdown for writing. Corresponds to errno EPIPE and ESHUTDOWN. ConnectionError errno EPIPE ESHUTDOWN A subclass of ConnectionError, raised when a connection attempt is aborted by the peer. Corresponds to errno ECONNABORTED. ConnectionError errno ECONNABORTED A subclass of ConnectionError, raised when a connection attempt is refused by the peer. Corresponds to errno ECONNREFUSED. ConnectionError errno ECONNREFUSED A subclass of ConnectionError, raised when a connection is reset by the peer. Corresponds to errno ECONNRESET. ConnectionError errno ECONNRESET Raised when trying to create a file or directory which already exists. Corresponds to errno EEXIST. errno EEXIST Raised when a file or directory is requested but doesn’t exist. Corresponds to errno ENOENT. errno ENOENT Raised when a system call is interrupted by an incoming signal. Corresponds to errno EINTR. errno EINTR Changed in version 3. 5: Python now retries system calls when a syscall is interrupted by a signal, except if the signal handler raises an exception (see PEP 475 for the rationale), instead of raising InterruptedError.