For example, marking up a large third party library or application with PEP 484 style type annotations, reviewing how easy it was to add those annotations, and observing whether their presence increases code understandability. The Python standard library should be conservative in adopting such annotations, but their use is allowed for new code and for big refactorings. For code that wants to make a different use of function annotations it is recommended to put a comment of the form:# type: ignore near the top of the file; this tells type checkers to ignore all annotations. (More fine-grained ways of disabling complaints from type checkers can be found in PEP 484. ) # type: ignore near the top of the file; this tells type checkers to ignore all annotations. (More fine-grained ways of disabling complaints from type checkers can be found in PEP 484. ) Like linters, type checkers are optional, separate tools. Python interpreters by default should not issue any messages due to type checking and should not alter their behavior based on annotations. Users who don’t want to use type checkers are free to ignore them. However, it is expected that users of third party library packages may want to run type checkers over those packages. For this purpose PEP 484 recommends the use of stub files:. pyi files that are read by the type checker in preference of the corresponding. py files. Stub files can be distributed with a library, or separately (with the library author’s permission) through the typeshed repo [5]. ### Variable Annotations PEP 526 introduced variable annotations. The style recommendations for them are similar to those on function annotations described above: Annotations for module level variables, class and instance variables, and local variables should have a single space after the colon. There should be no space before the colon.