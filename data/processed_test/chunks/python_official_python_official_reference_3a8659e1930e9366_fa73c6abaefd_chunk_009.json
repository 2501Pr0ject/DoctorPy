{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_009",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "classmethod __self__ __func__ When an instance method object is called, the underlying function (func) is called, inserting the class instance (self) in front of the argument list. For instance, when C is a class which contains a definition for a function f(), and x is an instance of C, calling x. f(1) is equivalent to calling C. f(x, 1). __func__ __self__ C f() x C x. f(1) C. f(x, 1) When an instance method object is derived from a classmethod object, the “class instance” stored in self will actually be the class itself, so that calling either x. f(1) or C. f(1) is equivalent to calling f(C,1) where f is the underlying function. classmethod __self__ x. f(1) C. f(1) f(C,1) f It is important to note that user-defined functions which are attributes of a class instance are not converted to bound methods; this only happens when the function is an attribute of the class. #### 3. 2. 8. 3. Generator functions¶ A function or method which uses the yield statement (see section The yield statement) is called a generator function. Such a function, when called, always returns an iterator object which can be used to execute the body of the function: calling the iterator’s iterator. next() method will cause the function to execute until it provides a value using the yield statement. When the function executes a return statement or falls off the end, a StopIteration exception is raised and the iterator will have reached the end of the set of values to be returned. yield iterator. __next__() yield return StopIteration #### 3. 2. 8. 4. Coroutine functions¶ A function or method which is defined using async def is called a coroutine function. Such a function, when called, returns a coroutine object. It may contain await expressions, as well as async with and async for statements. See also the Coroutine Objects section. async def await async with async for #### 3. 2. 8. 5. Asynchronous generator functions¶ A function or method which is defined using async def and which uses the yield statement is called a asynchronous generator function.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 9,
  "start_char": 20857,
  "end_char": 22909,
  "token_count": 475,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.701774"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_009.txt"
}