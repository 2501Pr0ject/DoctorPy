If the exception is not handled by an except clause, the exception is re-raised after the finally clause has been executed. try except except finally An exception could occur during execution of an except or else clause. Again, the exception is re-raised after the finally clause has been executed. An exception could occur during execution of an except or else clause. Again, the exception is re-raised after the finally clause has been executed. except else finally If the finally clause executes a break, continue or return statement, exceptions are not re-raised. If the finally clause executes a break, continue or return statement, exceptions are not re-raised. finally break continue return If the try statement reaches a break, continue or return statement, the finally clause will execute just prior to the break, continue or return statement’s execution. If the try statement reaches a break, continue or return statement, the finally clause will execute just prior to the break, continue or return statement’s execution. try break continue return finally break continue return If a finally clause includes a return statement, the returned value will be the one from the finally clause’s return statement, not the value from the try clause’s return statement. If a finally clause includes a return statement, the returned value will be the one from the finally clause’s return statement, not the value from the try clause’s return statement. finally return finally return try return For example: >>> def bool_return():. try:. return True. finally:. return False. >>> bool_return() False A more complicated example: >>> def divide(x, y):. try:. result = x / y. except ZeroDivisionError:. print("division by zero. "). else:. print("result is", result). finally:. print("executing finally clause"). >>> divide(2, 1) result is 2. 0 executing finally clause >>> divide(2, 0) division by zero. executing finally clause >>> divide("2", "1") executing finally clause Traceback (most recent call last): File "<stdin>", line 1, in <module> divide("2", "1") ~~~~~~^^^^^^^^^^ File "<stdin>", line 3, in divide result = x / y ~~^~~ TypeError: unsupported operand type(s) for /: 'str' and 'str' As you can see, the finally clause is executed in any event.