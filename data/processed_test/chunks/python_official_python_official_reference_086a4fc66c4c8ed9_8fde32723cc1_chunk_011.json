{
  "chunk_id": "python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1_chunk_011",
  "original_doc_id": "python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1",
  "content": "11: If the traceback of the active exception is modified in an except clause, a subsequent raise statement re-raises the exception with the modified traceback. Previously, the exception was re-raised with the traceback it had when it was caught. except raise ## 7. 9. The break statement¶ break break_stmt ::= \"break\" break may only occur syntactically nested in a for or while loop, but not nested in a function or class definition within that loop. break for while It terminates the nearest enclosing loop, skipping the optional else clause if the loop has one. else If a for loop is terminated by break, the loop control target keeps its current value. for break When break passes control out of a try statement with a finally clause, that finally clause is executed before really leaving the loop. break try finally finally ## 7. 10. The continue statement¶ continue continue_stmt ::= \"continue\" continue may only occur syntactically nested in a for or while loop, but not nested in a function or class definition within that loop. It continues with the next cycle of the nearest enclosing loop. continue for while When continue passes control out of a try statement with a finally clause, that finally clause is executed before really starting the next loop cycle. continue try finally finally ## 7. 11. The import statement¶ import import_stmt ::= \"import\" module [\"as\" identifier] (\",\" module [\"as\" identifier])* | \"from\" relative_module \"import\" identifier [\"as\" identifier] (\",\" identifier [\"as\" identifier])* | \"from\" relative_module \"import\" \"(\" identifier [\"as\" identifier] (\",\" identifier [\"as\" identifier])* [\",\"] \")\" | \"from\" relative_module \"import\" \"*\" module ::= (identifier \". \")* identifier relative_module ::= \". \"* module | \". \"+ module identifier module identifier relative_module identifier identifier identifier identifier relative_module identifier identifier identifier identifier relative_module identifier identifier module The basic import statement (no from clause) is executed in two steps: from find a module, loading and initializing it if necessary find a module, loading and initializing it if necessary define a name or names in the local namespace for the scope where the import statement occurs. define a name or names in the local namespace for the scope where the import statement occurs. import When the statement contains multiple clauses (separated by commas) the two steps are carried out separately for each clause, just as though the clauses had been separated out into individual import statements.",
  "title": "7. Simple statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 11,
  "start_char": 26164,
  "end_char": 28710,
  "token_count": 500,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_086a4fc66c4c8ed9.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:05.265112"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_086a4fc66c4c8ed9_8fde32723cc1_chunk_011.txt"
}