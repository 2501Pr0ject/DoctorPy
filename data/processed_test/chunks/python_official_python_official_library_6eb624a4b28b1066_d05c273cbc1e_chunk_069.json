{
  "chunk_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_069",
  "original_doc_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e",
  "content": "dst() # raise ValueError if dtdst is None if dtdst: return dt + dtdst else: return dt tzinfo_examples. py tzinfo from datetime import tzinfo, timedelta, datetime ZERO = timedelta(0) HOUR = timedelta(hours=1) SECOND = timedelta(seconds=1) # A class capturing the platform's idea of local time. # (May result in wrong values on historical times in # timezones where UTC offset and/or the DST rules had # changed in the past. ) import time as _time STDOFFSET = timedelta(seconds = -_time. timezone) if _time. daylight: DSTOFFSET = timedelta(seconds = -_time. altzone) else: DSTOFFSET = STDOFFSET DSTDIFF = DSTOFFSET - STDOFFSET class LocalTimezone(tzinfo): def fromutc(self, dt): assert dt. tzinfo is self stamp = (dt - datetime(1970, 1, 1, tzinfo=self)) // SECOND args = _time. localtime(stamp)[:6] dst_diff = DSTDIFF // SECOND # Detect fold fold = (args == _time. localtime(stamp - dst_diff)) return datetime(*args, microsecond=dt. microsecond, tzinfo=self, fold=fold) def utcoffset(self, dt): if self. _isdst(dt): return DSTOFFSET else: return STDOFFSET def dst(self, dt): if self. _isdst(dt): return DSTDIFF else: return ZERO def tzname(self, dt): return _time. tzname[self. _isdst(dt)] def _isdst(self, dt): tt = (dt. year, dt. month, dt. day, dt. hour, dt. minute, dt. second, dt. weekday(), 0, 0) stamp = _time. mktime(tt) tt = _time. localtime(stamp) return tt. tm_isdst > 0 Local = LocalTimezone() # A complete implementation of current DST rules for major US time zones. def first_sunday_on_or_after(dt): days_to_go = 6 - dt. weekday() if days_to_go: dt += timedelta(days_to_go) return dt # US DST Rules # # This is a simplified (i. e. , wrong for a few cases) set of rules for US # DST start and end times.",
  "title": "datetime â€” Basic date and time types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 69,
  "start_char": 126766,
  "end_char": 128480,
  "token_count": 488,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_6eb624a4b28b1066.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:01.446297"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_069.txt"
}