In other words, date1 < date2 if and only if date1. toordinal() < date2. toordinal(). date1 < date2 date1. toordinal() < date2. toordinal() Order comparison between a date object that is not also a datetime instance and a datetime object raises TypeError. date datetime datetime TypeError Changed in version 3. 13: Comparison between datetime object and an instance of the date subclass that is not a datetime subclass no longer converts the latter to date, ignoring the time part and the time zone. The default behavior can be changed by overriding the special comparison methods in subclasses. datetime date datetime date In Boolean contexts, all date objects are considered to be true. date Instance methods: Return a new date object with the same values, but with specified parameters updated. date Example: >>> from datetime import date >>> d = date(2002, 12, 31) >>> d. replace(day=26) datetime. date(2002, 12, 26) The generic function copy. replace() also supports date objects. copy. replace() date Return a time. struct_time such as returned by time. localtime(). time. struct_time time. localtime() The hours, minutes and seconds are 0, and the DST flag is -1. d. timetuple() is equivalent to: d. timetuple() time. struct_time((d. year, d. month, d. day, 0, 0, 0, d. weekday(), yday, -1)) where yday = d. toordinal() - date(d. year, 1, 1). toordinal() + 1 is the day number within the current year starting with 1 for January 1st. yday = d. toordinal() - date(d. year, 1, 1). toordinal() + 1 Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1. For any date object d, date. fromordinal(d. toordinal()) == d. date d date. fromordinal(d. toordinal()) == d Return the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, date(2002, 12, 4). weekday() == 2, a Wednesday. See also isoweekday().