{
  "chunk_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_000",
  "original_doc_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7",
  "content": "11. Brief Tour of the Standard Library — Part II. 13. 5 Source:  11. Brief Tour of the Standard Library — Part II¶ This second tour covers more advanced modules that support professional programming needs. These modules rarely occur in small scripts. ## 11. 1. Output Formatting¶ The reprlib module provides a version of repr() customized for abbreviated displays of large or deeply nested containers: reprlib repr() >>> import reprlib >>> reprlib. repr(set('supercalifragilisticexpialidocious')) \"{'a', 'c', 'd', 'e', 'f', 'g',. }\" The pprint module offers more sophisticated control over printing both built-in and user defined objects in a way that is readable by the interpreter. When the result is longer than one line, the “pretty printer” adds line breaks and indentation to more clearly reveal data structure: pprint >>> import pprint >>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',. 'yellow'], 'blue']]]. >>> pprint. pprint(t, width=30) [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta', 'yellow'], 'blue']]] The textwrap module formats paragraphs of text to fit a given screen width: textwrap >>> import textwrap >>> doc = \"\"\"The wrap() method is just like fill() except that it returns. a list of strings instead of one big string with newlines to separate. the wrapped lines. \"\"\". >>> print(textwrap. fill(doc, width=40)) The wrap() method is just like fill() except that it returns a list of strings instead of one big string with newlines to separate the wrapped lines. The locale module accesses a database of culture specific data formats. The grouping attribute of locale’s format function provides a direct way of formatting numbers with group separators: locale >>> import locale >>> locale. setlocale(locale. LC_ALL, 'English_United States. 1252') 'English_United States. 1252' >>> conv = locale. localeconv() # get a mapping of conventions >>> x = 1234567. 8 >>> locale. format_string(\"%d\", x, grouping=True) '1,234,567' >>> locale. format_string(\"%s%. *f\", (conv['currency_symbol'],.",
  "title": "11. Brief Tour of the Standard Library — Part II.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 0,
  "start_char": 0,
  "end_char": 2040,
  "token_count": 487,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_df4c6c63651fc819.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.708326"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_000.txt"
}