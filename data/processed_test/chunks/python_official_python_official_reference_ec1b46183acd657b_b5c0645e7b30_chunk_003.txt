except try try except except For an except clause with an expression, the expression must evaluate to an exception type or a tuple of exception types. The raised exception matches an except clause whose expression evaluates to the class or a non-virtual base class of the exception object, or to a tuple that contains such a class. except except If no except clause matches the exception, the search for an exception handler continues in the surrounding code and on the invocation stack. [1] except If the evaluation of an expression in the header of an except clause raises an exception, the original search for a handler is canceled and a search starts for the new exception in the surrounding code and on the call stack (it is treated as if the entire try statement raised the exception). except try When a matching except clause is found, the exception is assigned to the target specified after the as keyword in that except clause, if present, and the except clause’s suite is executed. All except clauses must have an executable block. When the end of this block is reached, execution continues normally after the entire try statement. (This means that if two nested handlers exist for the same exception, and the exception occurs in the try clause of the inner handler, the outer handler will not handle the exception. ) except as except except except try try When an exception has been assigned using as target, it is cleared at the end of the except clause. This is as if as target except except E as N: foo was translated to except E as N: try: foo finally: del N This means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs. except Before an except clause’s suite is executed, the exception is stored in the sys module, where it can be accessed from within the body of the except clause by calling sys. exception(). When leaving an exception handler, the exception stored in the sys module is reset to its previous value: except sys except sys. exception() sys >>> print(sys. exception()) None >>> try:. raise TypeError. except:. print(repr(sys. exception())). try:. raise ValueError. except:. print(repr(sys. exception())). print(repr(sys. exception())). TypeError() ValueError() TypeError() >>> print(sys. exception()) None ### 8. 4. 2.