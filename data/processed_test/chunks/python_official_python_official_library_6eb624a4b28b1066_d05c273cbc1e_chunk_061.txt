isocalendar() datetime datetime(*(time. strptime(date_string, format)[0:6])) ValueError time. strptime() datetime. fromisoformat() DeprecationWarning >>> from datetime import datetime >>> date_string = "02/29" >>> when = datetime. strptime(f"{date_string};1984", "%m/%d;%Y") # Avoids leap year bug. >>> when. strftime("%B %d") 'February 29' datetime datetime(MINYEAR, 1, 1, tzinfo=None) datetime datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None) datetime timedelta(microseconds=1) MINYEAR MAXYEAR range(24) range(60) range(60) range(1000000) datetime None [0, 1] datetime2 = datetime1 + timedelta datetime2 = datetime1 - timedelta timedelta = datetime1 - datetime2 datetime1 == datetime2 datetime1. = datetime2 datetime1 < datetime2 datetime1 > datetime2 datetime1 <= datetime2 datetime1 >= datetime2 datetime2 timedelta datetime1 timedelta. days > 0 timedelta. days < 0 tzinfo datetime2 - datetime1 == timedelta OverflowError datetime2. year MINYEAR MAXYEAR datetime2 datetime2 + timedelta == datetime1 tzinfo datetime datetime TypeError tzinfo tzinfo timedelta t datetime2 + t == datetime1 tzinfo a-b a b (a. replace(tzinfo=None) - a. utcoffset()) - (b. replace(tzinfo=None) - b. utcoffset()) datetime datetime tzinfo tzinfo fold tzinfo datetime datetime datetime TypeError tzinfo tzinfo fold tzinfo datetime TypeError datetime date datetime date date time tzinfo None timetz() time time time() time datetime tzinfo=None datetime copy. replace() datetime tzinfo tzinfo utcoffset() dst() None tz=None. tzinfo timezone self. tzinfo self. astimezone(tz) astz = dt. astimezone(tz) astz - astz. utcoffset() dt - dt. utcoffset() timezone dt. replace(tzinfo=tz) timezone dt. replace(tzinfo=None) tzinfo. fromutc() tzinfo astimezone() astimezone() def astimezone(self, tz): if self.