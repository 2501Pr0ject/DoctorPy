{
  "chunk_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_003",
  "original_doc_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40",
  "content": "### Repeating Things¶ Being able to match varying sets of characters is the first thing regular expressions can do that isn’t already possible with the methods available on strings. However, if that was the only additional capability of regexes, they wouldn’t be much of an advance. Another capability is that you can specify that portions of the RE must be repeated a certain number of times. The first metacharacter for repeating things that we’ll look at is. * doesn’t match the literal character ''; instead, it specifies that the previous character can be matched zero or more times, instead of exactly once. * * '*' For example, cat will match 'ct' (0 'a' characters), 'cat' (1 'a'), 'caaat' (3 'a' characters), and so forth. ca*t 'ct' 'a' 'cat' 'a' 'caaat' 'a' Repetitions such as * are greedy; when repeating a RE, the matching engine will try to repeat it as many times as possible. If later portions of the pattern don’t match, the matching engine will then back up and try again with fewer repetitions. * A step-by-step example will make this more obvious. Let’s consider the expression a[bcd]b. This matches the letter 'a', zero or more letters from the class [bcd], and finally ends with a 'b'. Now imagine matching this RE against the string 'abcbd'. a[bcd]*b 'a' [bcd] 'b' 'abcbd' Step Matched Explanation 1 a a The a in the RE matches. a 2 abcbd abcbd The engine matches [bcd], going as far as it can, which is to the end of the string. [bcd]* 3 Failure The engine tries to match b, but the current position is at the end of the string, so it fails. b 4 abcb abcb Back up, so that [bcd] matches one less character. [bcd]* 5 Failure Try b again, but the current position is at the last character, which is a 'd'. b 'd' 6 abc abc Back up again, so that [bcd] is only matching bc. [bcd]* bc 6 abcb abcb Try b again. This time the character at the current position is 'b', so it succeeds.",
  "title": "Regular Expression HOWTO.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 3,
  "start_char": 6423,
  "end_char": 8323,
  "token_count": 485,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_ac8c5a4a74040ab8.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:41.032369"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_003.txt"
}