{
  "chunk_id": "python_official_python_official_library_0a70a89a6fb229e9_972eb7e87b87_chunk_003",
  "original_doc_id": "python_official_python_official_library_0a70a89a6fb229e9_972eb7e87b87",
  "content": "These specify a non-default format for the replacement value. '. ' ':' See also the Format Specification Mini-Language section. The field_name itself begins with an arg_name that is either a number or a keyword. If it’s a number, it refers to a positional argument, and if it’s a keyword, it refers to a named keyword argument. An arg_name is treated as a number if a call to str. isdecimal() on the string would return true. If the numerical arg_names in a format string are 0, 1, 2, … in sequence, they can all be omitted (not just some) and the numbers 0, 1, 2, … will be automatically inserted in that order. Because arg_name is not quote-delimited, it is not possible to specify arbitrary dictionary keys (e. g. , the strings '10' or ':-]') within a format string. The arg_name can be followed by any number of index or attribute expressions. An expression of the form '. name' selects the named attribute using getattr(), while an expression of the form '[index]' does an index lookup using getitem(). str. isdecimal() '10' ':-]' '. name' getattr() '[index]' __getitem__() Changed in version 3. 1: The positional argument specifiers can be omitted for str. format(), so '{} {}'. format(a, b) is equivalent to '{0} {1}'. format(a, b). str. format() '{} {}'. format(a, b) '{0} {1}'. format(a, b) Changed in version 3. 4: The positional argument specifiers can be omitted for Formatter. Formatter Some simple format string examples: \"First, thou shalt count to {0}\" # References first positional argument \"Bring me a {}\" # Implicitly references the first positional argument \"From {} to {}\" # Same as \"From {0} to {1}\" \"My quest is {name}\" # References keyword argument 'name' \"Weight in tons {0. weight}\" # 'weight' attribute of first positional arg \"Units destroyed: {players[0]}\" # First element of keyword argument 'players'. The conversion field causes a type coercion before formatting. Normally, the job of formatting a value is done by the format() method of the value itself.",
  "title": "string — Common string operations.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 3,
  "start_char": 7130,
  "end_char": 9117,
  "token_count": 475,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_0a70a89a6fb229e9.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:09.215449"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_0a70a89a6fb229e9_972eb7e87b87_chunk_003.txt"
}