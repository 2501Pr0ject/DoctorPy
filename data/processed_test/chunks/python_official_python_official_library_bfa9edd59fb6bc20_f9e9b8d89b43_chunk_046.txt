bytearray >>> bytearray. fromhex('2Ef0 F1f2 ') bytearray(b'. \xf0\xf1\xf2') Changed in version 3. 7: bytearray. fromhex() now skips all ASCII whitespace in the string, not just spaces. bytearray. fromhex() A reverse conversion function exists to transform a bytearray object into its hexadecimal representation. Return a string object containing two hexadecimal digits for each byte in the instance. >>> bytearray(b'\xf0\xf1\xf2'). hex() 'f0f1f2' Added in version 3. 5. Changed in version 3. 8: Similar to bytes. hex(), bytearray. hex() now supports optional sep and bytes_per_sep parameters to insert separators between bytes in the hex output. bytes. hex() bytearray. hex() Since bytearray objects are sequences of integers (akin to a list), for a bytearray object b, b[0] will be an integer, while b[0:1] will be a bytearray object of length 1. (This contrasts with text strings, where both indexing and slicing will produce a string of length 1) b[0] b[0:1] The representation of bytearray objects uses the bytes literal format (bytearray(b'. ')) since it is often more useful than e. g. bytearray([46, 46, 46]). You can always convert a bytearray object into a list of integers using list(b). bytearray(b'. ') bytearray([46, 46, 46]) list(b) ### Bytes and Bytearray Operations¶ Both bytes and bytearray objects support the common sequence operations. They interoperate not just with operands of the same type, but with any bytes-like object. Due to this flexibility, they can be freely mixed in operations without causing errors. However, the return type of the result may depend on the order of operands. Note The methods on bytes and bytearray objects don’t accept strings as their arguments, just as the methods on strings don’t accept bytes as their arguments. For example, you have to write: a = "abc" b = a. replace("a", "f") and: a = b"abc" b = a. replace(b"a", b"f") Some bytes and bytearray operations assume the use of ASCII compatible binary formats, and hence should be avoided when working with arbitrary binary data. These restrictions are covered below.