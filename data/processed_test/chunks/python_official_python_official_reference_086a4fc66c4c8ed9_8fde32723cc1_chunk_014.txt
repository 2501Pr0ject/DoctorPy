Attempting to use it in class or function definitions will raise a SyntaxError. from module import * SyntaxError When specifying what module to import you do not have to specify the absolute name of the module. When a module or package is contained within another package it is possible to make a relative import within the same top package without having to mention the package name. By using leading dots in the specified module or package after from you can specify how high to traverse up the current package hierarchy without specifying exact names. One leading dot means the current package where the module making the import exists. Two dots means up one package level. Three dots is up two levels, etc. So if you execute from. import mod from a module in the pkg package then you will end up importing pkg. mod. If you execute from. subpkg2 import mod from within pkg. subpkg1 you will import pkg. subpkg2. mod. The specification for relative imports is contained in the Package Relative Imports section. from from. import mod pkg pkg. mod from. subpkg2 import mod pkg. subpkg1 pkg. subpkg2. mod importlib. import_module() is provided to support applications that determine dynamically the modules to be loaded. importlib. import_module() Raises an auditing event import with arguments module, filename, sys. path, sys. meta_path, sys. path_hooks. import module filename sys. path sys. meta_path sys. path_hooks ### 7. 11. 1. Future statementsÂ¶ A future statement is a directive to the compiler that a particular module should be compiled using syntax or semantics that will be available in a specified future release of Python where the feature becomes standard. The future statement is intended to ease migration to future versions of Python that introduce incompatible changes to the language. It allows use of the new features on a per-module basis before the release in which the feature becomes standard. future_stmt ::= "from" "__future__" "import" feature ["as" identifier] ("," feature ["as" identifier])* | "from" "__future__" "import" "(" feature ["as" identifier] ("," feature ["as" identifier])* [","] ")" feature ::= identifier feature identifier feature identifier feature identifier feature identifier identifier A future statement must appear near the top of the module.