{
  "chunk_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_006",
  "original_doc_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e",
  "content": "timedelta(days=-1, seconds=68400) >>> print(_) -1 day, 19:00:00 The expression t2 - t3 will always be equal to the expression t2 + (-t3) except when t3 is equal to timedelta. max; in that case the former will produce a result while the latter will overflow. The expression t2 - t3 will always be equal to the expression t2 + (-t3) except when t3 is equal to timedelta. max; in that case the former will produce a result while the latter will overflow. t2 - t3 t2 + (-t3) timedelta. max In addition to the operations listed above, timedelta objects support certain additions and subtractions with date and datetime objects (see below). timedelta date datetime Changed in version 3. 2: Floor division and true division of a timedelta object by another timedelta object are now supported, as are remainder operations and the divmod() function. True division and multiplication of a timedelta object by a float object are now supported. timedelta timedelta divmod() timedelta float timedelta objects support equality and order comparisons. timedelta In Boolean contexts, a timedelta object is considered to be true if and only if it isn’t equal to timedelta(0). timedelta timedelta(0) Instance methods: Return the total number of seconds contained in the duration. Equivalent to td / timedelta(seconds=1). For interval units other than seconds, use the division form directly (e. g. td / timedelta(microseconds=1)). td / timedelta(seconds=1) td / timedelta(microseconds=1) Note that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy. Added in version 3. 2. ### Examples of usage: timedelta¶ timedelta An additional example of normalization: >>> # Components of another_year add up to exactly 365 days >>> from datetime import timedelta >>> year = timedelta(days=365) >>> another_year = timedelta(weeks=40, days=84, hours=23,. minutes=50, seconds=600) >>> year == another_year True >>> year. total_seconds() 31536000. 0 Examples of timedelta arithmetic: timedelta >>> from datetime import timedelta >>> year = timedelta(days=365) >>> ten_years = 10 * year >>> ten_years datetime. timedelta(days=3650) >>> ten_years.",
  "title": "datetime — Basic date and time types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 6,
  "start_char": 12149,
  "end_char": 14325,
  "token_count": 487,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_6eb624a4b28b1066.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:01.384769"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_006.txt"
}