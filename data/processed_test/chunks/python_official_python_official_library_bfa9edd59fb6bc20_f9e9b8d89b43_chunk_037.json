{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_037",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "For example: >>> comment_string = '#. Section 3. 2. 1 Issue #32. ' >>> comment_string. strip('. #. ') 'Section 3. 2. 1 Issue #32' Return a copy of the string with uppercase characters converted to lowercase and vice versa. Note that it is not necessarily true that s. swapcase(). swapcase() == s. s. swapcase(). swapcase() == s Return a titlecased version of the string where words start with an uppercase character and the remaining characters are lowercase. For example: >>> 'Hello world'. title() 'Hello World' The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result: >>> \"they're bill's friends from the UK\". title() \"They'Re Bill'S Friends From The Uk\" The string. capwords() function does not have this problem, as it splits words on spaces only. string. capwords() Alternatively, a workaround for apostrophes can be constructed using regular expressions: >>> import re >>> def titlecase(s):. return re. sub(r\"[A-Za-z]+('[A-Za-z]+). \",. lambda mo: mo. group(0). capitalize(),. s). >>> titlecase(\"they're bill's friends. \") \"They're Bill's Friends. \" Return a copy of the string in which each character has been mapped through the given translation table. The table must be an object that implements indexing via getitem(), typically a mapping or sequence. When indexed by a Unicode ordinal (an integer), the table object can do any of the following: return a Unicode ordinal or a string, to map the character to one or more other characters; return None, to delete the character from the return string; or raise a LookupError exception, to map the character to itself. __getitem__() None LookupError You can use str. maketrans() to create a translation map from character-to-character mappings in different formats. str. maketrans() See also the codecs module for a more flexible approach to custom character mappings. codecs Return a copy of the string with all the cased characters [4] converted to uppercase. Note that s. upper().",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 37,
  "start_char": 74555,
  "end_char": 76700,
  "token_count": 479,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.212659"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_037.txt"
}