{
  "chunk_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_006",
  "original_doc_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061",
  "content": "alpha is the shape parameter. Weibull distribution. alpha is the scale parameter and beta is the shape parameter. ## Alternative Generator¶ Class that implements the default pseudo-random number generator used by the random module. random Changed in version 3. 11: Formerly the seed could be any hashable object. Now it is limited to: None, int, float, str, bytes, or bytearray. None int float str bytes bytearray Subclasses of Random should override the following methods if they wish to make use of a different basic generator: Random Override this method in subclasses to customise the seed() behaviour of Random instances. seed() Random Override this method in subclasses to customise the getstate() behaviour of Random instances. getstate() Random Override this method in subclasses to customise the setstate() behaviour of Random instances. setstate() Random Override this method in subclasses to customise the random() behaviour of Random instances. random() Random Optionally, a custom generator subclass can also supply the following method: Override this method in subclasses to customise the getrandbits() behaviour of Random instances. getrandbits() Random Class that uses the os. urandom() function for generating random numbers from sources provided by the operating system. Not available on all systems. Does not rely on software state, and sequences are not reproducible. Accordingly, the seed() method has no effect and is ignored. The getstate() and setstate() methods raise NotImplementedError if called. os. urandom() seed() getstate() setstate() NotImplementedError ## Notes on Reproducibility¶ Sometimes it is useful to be able to reproduce the sequences given by a pseudo-random number generator. By reusing a seed value, the same sequence should be reproducible from run to run as long as multiple threads are not running. Most of the random module’s algorithms and seeding functions are subject to change across Python versions, but two aspects are guaranteed not to change: If a new seeding method is added, then a backward compatible seeder will be offered. If a new seeding method is added, then a backward compatible seeder will be offered. The generator’s random() method will continue to produce the same sequence when the compatible seeder is given the same seed. The generator’s random() method will continue to produce the same sequence when the compatible seeder is given the same seed. random() ## Examples¶ Basic examples: >>> random() # Random float: 0. 0 <= x < 1.",
  "title": "random — Generate pseudo-random numbers.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 6,
  "start_char": 13220,
  "end_char": 15723,
  "token_count": 500,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_49df04c24c9ba477.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.613689"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_006.txt"
}