Use the verb “override” to indicate that a subclass method replaces a superclass method and does not call the superclass method; use the verb “extend” to indicate that a subclass method calls the superclass method (in addition to its own behavior). Do not use the Emacs convention of mentioning the arguments of functions or methods in upper case in running text. Python is case sensitive and the argument names can be used for keyword arguments, so the docstring should document the correct argument names. It is best to list each argument on a separate line. For example: def complex(real=0. 0, imag=0. 0): """Form a complex number. Keyword arguments: real -- the real part (default 0. 0) imag -- the imaginary part (default 0. 0) """ if imag == 0. 0 and real == 0. 0: return complex_zero. Unless the entire docstring fits on a line, place the closing quotes on a line by themselves. This way, Emacs’ fill-paragraph command can be used on it. fill-paragraph ### Handling Docstring Indentation Docstring processing tools will strip a uniform amount of indentation from the second and further lines of the docstring, equal to the minimum indentation of all non-blank lines after the first line. Any indentation in the first line of the docstring (i. e. , up to the first newline) is insignificant and removed. Relative indentation of later lines in the docstring is retained. Blank lines should be removed from the beginning and end of the docstring. Since code is much more precise than words, here is an implementation of the algorithm: def trim(docstring): if not docstring: return '' # Convert tabs to spaces (following the normal Python rules) # and split into a list of lines: lines = docstring. expandtabs(). splitlines() # Determine minimum indentation (first line doesn't count): indent = sys. maxsize for line in lines[1:]: stripped = line. lstrip() if stripped: indent = min(indent, len(line) - len(stripped)) # Remove indentation (first line is special): trimmed = [lines[0]. strip()] if indent < sys. maxsize: for line in lines[1:]: trimmed. append(line[indent:]. rstrip()) # Strip off trailing and leading blank lines: while trimmed and not trimmed[-1]: trimmed.