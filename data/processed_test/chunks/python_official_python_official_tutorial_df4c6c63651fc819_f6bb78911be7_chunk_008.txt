>>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format): ') Enter rename style (%d-date %n-seqnum %f-format): Ashley_%n%f >>> t = BatchRename(fmt) >>> date = time. strftime('%d%b%y') >>> for i, filename in enumerate(photofiles):. base, ext = os. path. splitext(filename). newname = t. substitute(d=date, n=i, f=ext). print('{0} --> {1}'. format(filename, newname)) img_1074. jpg --> Ashley_0. jpg img_1076. jpg --> Ashley_1. jpg img_1077. jpg --> Ashley_2. jpg struct pack() unpack() zipfile "H" "I" "<" import struct with open('myfile. zip', 'rb') as f: data = f. read() start = 0 for i in range(3): # show the first 3 file headers start += 14 fields = struct. unpack('<IIIHH', data[start:start+16]) crc32, comp_size, uncomp_size, filenamesize, extra_size = fields start += 16 filename = data[start:start+filenamesize] start += filenamesize extra = data[start:start+extra_size] print(filename, hex(crc32), comp_size, uncomp_size) start += extra_size + comp_size # skip to the next header threading import threading, zipfile class AsyncZip(threading. Thread): def __init__(self, infile, outfile): threading. Thread. __init__(self) self. infile = infile self. outfile = outfile def run(self): f = zipfile. ZipFile(self. outfile, 'w', zipfile. ZIP_DEFLATED) f. write(self. infile) f. close() print('Finished background zip of:', self. infile) background = AsyncZip('mydata. txt', 'myarchive. zip') background. start() print('The main program continues to run in foreground. ') background. join() # Wait for the background task to finish print('Main program waited until background was done. ') queue Queue logging sys. stderr import logging logging. debug('Debugging information') logging. info('Informational message') logging. warning('Warning:config file %s not found', 'server. conf') logging. error('Error occurred') logging.