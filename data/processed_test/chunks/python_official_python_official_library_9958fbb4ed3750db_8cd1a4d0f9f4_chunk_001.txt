a // b Return a converted to an integer. Equivalent to a. index(). a. __index__() Changed in version 3. 10: The result always has exact type int. Previously, the result could have been an instance of a subclass of int. int int Return the bitwise inverse of the number obj. This is equivalent to ~obj. ~obj Return a shifted left by b. Return a % b. a % b Return a * b, for a and b numbers. a * b Return a @ b. a @ b Added in version 3. 5. Return obj negated (-obj). -obj Return the bitwise or of a and b. Return obj positive (+obj). +obj Return a ** b, for a and b numbers. a ** b Return a shifted right by b. Return a - b. a - b Return a / b where 2/3 is. 66 rather than 0. This is also known as “true” division. a / b Return the bitwise exclusive or of a and b. Operations which work with sequences (some of them with mappings too) include: Return a + b for a and b sequences. a + b Return the outcome of the test b in a. Note the reversed operands. b in a Return the number of occurrences of b in a. Remove the value of a at index b. Return the value of a at index b. Return the index of the first of occurrence of b in a. Set the value of a at index b to c. Return an estimated length for the object obj. First try to return its actual length, then an estimate using object. length_hint(), and finally return the default value. object. __length_hint__() Added in version 3. 4. The following operation works with callables: Return obj(args, kwargs). obj(*args, **kwargs) Added in version 3. 11. The operator module also defines tools for generalized attribute and item lookups. These are useful for making fast field extractors as arguments for map(), sorted(), itertools. groupby(), or other functions that expect a function argument. operator map() sorted() itertools. groupby() Return a callable object that fetches attr from its operand. If more than one attribute is requested, returns a tuple of attributes. The attribute names can also contain dots. For example: After f = attrgetter('name'), the call f(b) returns b. name.