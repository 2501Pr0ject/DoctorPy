{
  "chunk_id": "python_official_python_official_library_b3ab419475b0789f_74784175dd21_chunk_018",
  "original_doc_id": "python_official_python_official_library_b3ab419475b0789f_74784175dd21",
  "content": "This can be used to prune the search, or to impose a specific order of visiting, or even to inform Path. walk() about directories the caller creates or renames before it resumes Path. walk() again. Modifying dirnames when top_down is false has no effect on the behavior of Path. walk() since the directories in dirnames have already been generated by the time dirnames is yielded to the caller. del Path. walk() Path. walk() Path. walk() Path. walk() By default, errors from os. scandir() are ignored. If the optional argument on_error is specified, it should be a callable; it will be called with one argument, an OSError instance. The callable can handle the error to continue the walk or re-raise it to stop the walk. Note that the filename is available as the filename attribute of the exception object. os. scandir() OSError filename By default, Path. walk() does not follow symbolic links, and instead adds them to the filenames list. Set follow_symlinks to true to resolve symlinks and place them in dirnames and filenames as appropriate for their targets, and consequently visit directories pointed to by symlinks (where supported). Path. walk() Note Be aware that setting follow_symlinks to true can lead to infinite recursion if a link points to a parent directory of itself. Path. walk() does not keep track of the directories it has already visited. Path. walk() Note Path. walk() assumes the directories it walks are not modified during execution. For example, if a directory from dirnames has been replaced with a symlink and follow_symlinks is false, Path. walk() will still try to descend into it. To prevent such behavior, remove directories from dirnames as appropriate. Path. walk() Path. walk() Note Unlike os. walk(), Path. walk() lists symlinks to directories in filenames if follow_symlinks is false. os. walk() Path. walk() This example displays the number of bytes used by all files in each directory, while ignoring pycache directories: __pycache__ from pathlib import Path for root, dirs, files in Path(\"cpython/Lib/concurrent\"). walk(on_error=print): print( root, \"consumes\", sum((root / file). stat().",
  "title": "pathlib â€” Object-oriented filesystem paths.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 18,
  "start_char": 35777,
  "end_char": 37907,
  "token_count": 470,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_b3ab419475b0789f.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:32.500433"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_b3ab419475b0789f_74784175dd21_chunk_018.txt"
}