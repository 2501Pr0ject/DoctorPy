{
  "chunk_id": "python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6_chunk_003",
  "original_doc_id": "python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6",
  "content": "__str__() BaseException is the common base class of all exceptions. One of its subclasses, Exception, is the base class of all the non-fatal exceptions. Exceptions which are not subclasses of Exception are not typically handled, because they are used to indicate that the program should terminate. They include SystemExit which is raised by sys. exit() and KeyboardInterrupt which is raised when a user wishes to interrupt the program. BaseException Exception Exception SystemExit sys. exit() KeyboardInterrupt Exception can be used as a wildcard that catches (almost) everything. However, it is good practice to be as specific as possible with the types of exceptions that we intend to handle, and to allow any unexpected exceptions to propagate on. Exception The most common pattern for handling Exception is to print or log the exception and then re-raise it (allowing a caller to handle the exception as well): Exception import sys try: f = open('myfile. txt') s = f. readline() i = int(s. strip()) except OSError as err: print(\"OS error:\", err) except ValueError: print(\"Could not convert data to an integer. \") except Exception as err: print(f\"Unexpected {err=}, {type(err)=}\") raise The try … except statement has an optional else clause, which, when present, must follow all except clauses. It is useful for code that must be executed if the try clause does not raise an exception. For example: try except for arg in sys. argv[1:]: try: f = open(arg, 'r') except OSError: print('cannot open', arg) else: print(arg, 'has', len(f. readlines()), 'lines') f. close() The use of the else clause is better than adding additional code to the try clause because it avoids accidentally catching an exception that wasn’t raised by the code being protected by the try … except statement. else try try except Exception handlers do not handle only exceptions that occur immediately in the try clause, but also those that occur inside functions that are called (even indirectly) in the try clause. For example: >>> def this_fails():. x = 1/0. >>> try:. this_fails(). except ZeroDivisionError as err:. print('Handling run-time error:', err). Handling run-time error: division by zero ## 8. 4. Raising Exceptions¶ The raise statement allows the programmer to force a specified exception to occur.",
  "title": "8. Errors and Exceptions.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 3,
  "start_char": 6779,
  "end_char": 9067,
  "token_count": 492,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_7969fd9e5d06ff1d.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:33.776542"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_7969fd9e5d06ff1d_1e835a555be6_chunk_003.txt"
}