Replacing an existing key does not change the order, however removing a key and re-inserting it will add it to the end instead of keeping its old place. Dictionaries are mutable; they can be created by the {} notation (see section Dictionary displays). {} The extension modules dbm. ndbm and dbm. gnu provide additional examples of mapping types, as does the collections module. dbm. ndbm dbm. gnu collections Changed in version 3. 7: Dictionaries did not preserve insertion order in versions of Python before 3. 6. In CPython 3. 6, insertion order was preserved, but it was considered an implementation detail at that time rather than a language guarantee. ### 3. 2. 8. Callable types¶ These are the types to which the function call operation (see section Calls) can be applied: #### 3. 2. 8. 1. User-defined functions¶ A user-defined function object is created by a function definition (see section Function definitions). It should be called with an argument list containing the same number of items as the function’s formal parameter list. ##### 3. 2. 8. 1. 1. Special read-only attributes¶ Attribute Meaning A reference to the dictionary that holds the function’s global variables – the global namespace of the module in which the function was defined. dictionary None or a tuple of cells that contain bindings for the names specified in the co_freevars attribute of the function’s code object. None tuple co_freevars code object A cell object has the attribute cell_contents. This can be used to get the value of the cell, as well as set the value. cell_contents ##### 3. 2. 8. 1. 2. Special writable attributes¶ Most of these attributes check the type of the assigned value: Attribute Meaning The function’s documentation string, or None if unavailable. None The function’s name. See also: name attributes. __name__ attributes The function’s qualified name. See also: qualname attributes. __qualname__ attributes Added in version 3. 3. The name of the module the function was defined in, or None if unavailable. None A tuple containing default parameter values for those parameters that have defaults, or None if no parameters have a default value. tuple None The code object representing the compiled function body. The namespace supporting arbitrary function attributes. See also: dict attributes.