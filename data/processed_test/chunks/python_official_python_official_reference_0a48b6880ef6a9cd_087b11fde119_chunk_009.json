{
  "chunk_id": "python_official_python_official_reference_0a48b6880ef6a9cd_087b11fde119_chunk_009",
  "original_doc_id": "python_official_python_official_reference_0a48b6880ef6a9cd_087b11fde119",
  "content": "When send() is called to start the generator, it must be called with None as the argument, because there is no yield expression that could receive the value. send() StopIteration send() None Raises an exception at the point where the generator was paused, and returns the next value yielded by the generator function. If the generator exits without yielding another value, a StopIteration exception is raised. If the generator function does not catch the passed-in exception, or raises a different exception, then that exception propagates to the caller. StopIteration In typical use, this is called with a single exception instance similar to the way the raise keyword is used. raise For backwards compatibility, however, the second signature is supported, following a convention from older versions of Python. The type argument should be an exception class, and value should be an exception instance. If the value is not provided, the type constructor is called to get an instance. If traceback is provided, it is set on the exception, otherwise any existing traceback attribute stored in value may be cleared. __traceback__ Changed in version 3. 12: The second signature (type[, value[, traceback]]) is deprecated and may be removed in a future version of Python. Raises a GeneratorExit at the point where the generator function was paused. If the generator function catches the exception and returns a value, this value is returned from close(). If the generator function is already closed, or raises GeneratorExit (by not catching the exception), close() returns None. If the generator yields a value, a RuntimeError is raised. If the generator raises any other exception, it is propagated to the caller. If the generator has already exited due to an exception or normal exit, close() returns None and has no other effect. GeneratorExit close() GeneratorExit close() None RuntimeError close() None Changed in version 3. 13: If a generator returns a value upon being closed, the value is returned by close(). close() #### 6. 2. 9. 2. ExamplesÂ¶ Here is a simple example that demonstrates the behavior of generators and generator functions: >>> def echo(value=None):. print(\"Execution starts when 'next()' is called for the first time. \"). try:. while True:. try:. value = (yield value). except Exception as e:. value = e. finally:. print(\"Don't forget to clean up when 'close()' is called. \").",
  "title": "6. Expressions.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 9,
  "start_char": 20891,
  "end_char": 23287,
  "token_count": 487,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_0a48b6880ef6a9cd.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:08.578286"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_0a48b6880ef6a9cd_087b11fde119_chunk_009.txt"
}