17 with glibc >= 2. 27. Added in version 3. 8. These flags can be passed to memfd_create(). memfd_create() Availability: Linux >= 3. 17 with glibc >= 2. 27 The MFD_HUGE flags are only available since Linux 4. 14. MFD_HUGE* Added in version 3. 8. Create and return an event file descriptor. The file descriptors supports raw read() and write() with a buffer size of 8, select(), poll() and similar. See man page eventfd(2) for more information. By default, the new file descriptor is non-inheritable. read() write() select() poll() initval is the initial value of the event counter. The initial value must be a 32 bit unsigned integer. Please note that the initial value is limited to a 32 bit unsigned int although the event counter is an unsigned 64 bit integer with a maximum value of 264-2. flags can be constructed from EFD_CLOEXEC, EFD_NONBLOCK, and EFD_SEMAPHORE. EFD_CLOEXEC EFD_NONBLOCK EFD_SEMAPHORE If EFD_SEMAPHORE is specified and the event counter is non-zero, eventfd_read() returns 1 and decrements the counter by one. EFD_SEMAPHORE eventfd_read() If EFD_SEMAPHORE is not specified and the event counter is non-zero, eventfd_read() returns the current event counter value and resets the counter to zero. EFD_SEMAPHORE eventfd_read() If the event counter is zero and EFD_NONBLOCK is not specified, eventfd_read() blocks. EFD_NONBLOCK eventfd_read() eventfd_write() increments the event counter. Write blocks if the write operation would increment the counter to a value larger than 264-2. eventfd_write() Example: import os # semaphore with start value '1' fd = os. eventfd(1, os. EFD_SEMAPHORE | os. EFC_CLOEXEC) try: # acquire semaphore v = os. eventfd_read(fd) try: do_work() finally: # release semaphore os. eventfd_write(fd, v) finally: os. close(fd) Availability: Linux >= 2. 6. 27 with glibc >= 2. 8 Added in version 3.