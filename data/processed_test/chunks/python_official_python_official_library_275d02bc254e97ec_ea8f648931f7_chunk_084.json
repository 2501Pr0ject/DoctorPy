{
  "chunk_id": "python_official_python_official_library_275d02bc254e97ec_ea8f648931f7_chunk_084",
  "original_doc_id": "python_official_python_official_library_275d02bc254e97ec_ea8f648931f7",
  "content": "The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation. On Linux, if the getrandom() syscall is available, it is used in blocking mode: block until the system urandom entropy pool is initialized (128 bits of entropy are collected by the kernel). See the PEP 524 for the rationale. On Linux, the getrandom() function can be used to get random bytes in non-blocking mode (using the GRND_NONBLOCK flag) or to poll until the system urandom entropy pool is initialized. getrandom() getrandom() GRND_NONBLOCK On a Unix-like system, random bytes are read from the /dev/urandom device. If the /dev/urandom device is not available or not readable, the NotImplementedError exception is raised. /dev/urandom /dev/urandom NotImplementedError On Windows, it will use BCryptGenRandom(). BCryptGenRandom() See also The secrets module provides higher level functions. For an easy-to-use interface to the random number generator provided by your platform, please see random. SystemRandom. secrets random. SystemRandom Changed in version 3. 5: On Linux 3. 17 and newer, the getrandom() syscall is now used when available. On OpenBSD 5. 6 and newer, the C getentropy() function is now used. These functions avoid the usage of an internal file descriptor. getrandom() getentropy() Changed in version 3. 5. 2: On Linux, if the getrandom() syscall blocks (the urandom entropy pool is not initialized yet), fall back on reading /dev/urandom. getrandom() /dev/urandom Changed in version 3. 6: On Linux, getrandom() is now used in blocking mode to increase the security. getrandom() Changed in version 3. 11: On Windows, BCryptGenRandom() is used instead of CryptGenRandom() which is deprecated. BCryptGenRandom() CryptGenRandom() By default, when reading from /dev/random, getrandom() blocks if no random bytes are available, and when reading from /dev/urandom, it blocks if the entropy pool has not yet been initialized. /dev/random getrandom() /dev/urandom If the GRND_NONBLOCK flag is set, then getrandom() does not block in these cases, but instead immediately raises BlockingIOError.",
  "title": "os â€” Miscellaneous operating system interfaces.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 84,
  "start_char": 179721,
  "end_char": 181869,
  "token_count": 496,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_275d02bc254e97ec.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:24.846885"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_275d02bc254e97ec_ea8f648931f7_chunk_084.txt"
}