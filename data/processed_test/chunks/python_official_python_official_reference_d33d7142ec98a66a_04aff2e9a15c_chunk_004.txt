The import path is a list of locations that may name file system paths or zip files. It can also be extended to search for any locatable resource, such as those identified by URLs. The import machinery is extensible, so new finders can be added to extend the range and scope of module searching. Finders do not actually load modules. If they can find the named module, they return a module spec, an encapsulation of the module’s import-related information, which the import machinery then uses when loading the module. The following sections describe the protocol for finders and loaders in more detail, including how you can create and register new ones to extend the import machinery. Changed in version 3. 4: In previous versions of Python, finders returned loaders directly, whereas now they return module specs which contain loaders. Loaders are still used during import but have fewer responsibilities. ### 5. 3. 3. Import hooks¶ The import machinery is designed to be extensible; the primary mechanism for this are the import hooks. There are two types of import hooks: meta hooks and import path hooks. Meta hooks are called at the start of import processing, before any other import processing has occurred, other than sys. modules cache look up. This allows meta hooks to override sys. path processing, frozen modules, or even built-in modules. Meta hooks are registered by adding new finder objects to sys. meta_path, as described below. sys. modules sys. path sys. meta_path Import path hooks are called as part of sys. path (or package. path) processing, at the point where their associated path item is encountered. Import path hooks are registered by adding new callables to sys. path_hooks as described below. sys. path package. __path__ sys. path_hooks ### 5. 3. 4. The meta path¶ When the named module is not found in sys. modules, Python next searches sys. meta_path, which contains a list of meta path finder objects. These finders are queried in order to see if they know how to handle the named module. Meta path finders must implement a method called find_spec() which takes three arguments: a name, an import path, and (optionally) a target module. The meta path finder can use any strategy it wants to determine whether it can handle the named module or not. sys. modules sys.