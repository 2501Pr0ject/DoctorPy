In particular, on Windows adding O_BINARY is needed to open files in binary mode. O_RDONLY O_WRONLY os O_BINARY This function can support paths relative to directory descriptors with the dir_fd parameter. Raises an auditing event open with arguments path, mode, flags. open path mode flags Changed in version 3. 4: The new file descriptor is now non-inheritable. Note This function is intended for low-level I/O. For normal usage, use the built-in function open(), which returns a file object with read() and write() methods (and many more). To wrap a file descriptor in a file object, use fdopen(). open() read() write() fdopen() Changed in version 3. 3: Added the dir_fd parameter. Changed in version 3. 5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an InterruptedError exception (see PEP 475 for the rationale). InterruptedError Changed in version 3. 6: Accepts a path-like object. The following constants are options for the flags parameter to the open() function. They can be combined using the bitwise OR operator |. Some of them are not available on all platforms. For descriptions of their availability and use, consult the open(2) manual page on Unix or the MSDN on Windows. open() | The above constants are available on Unix and Windows. The above constants are only available on Unix. Changed in version 3. 3: Add O_CLOEXEC constant. O_CLOEXEC The above constants are only available on Windows. The above constants are only available on macOS. Changed in version 3. 10: Add O_EVTONLY, O_FSYNC, O_SYMLINK and O_NOFOLLOW_ANY constants. O_EVTONLY O_FSYNC O_SYMLINK O_NOFOLLOW_ANY The above constants are extensions and not present if they are not defined by the C library. Changed in version 3. 4: Add O_PATH on systems that support it. Add O_TMPFILE, only available on Linux Kernel 3. 11 or newer. O_PATH O_TMPFILE Open a new pseudo-terminal pair. Return a pair of file descriptors (master, slave) for the pty and the tty, respectively. The new file descriptors are non-inheritable.