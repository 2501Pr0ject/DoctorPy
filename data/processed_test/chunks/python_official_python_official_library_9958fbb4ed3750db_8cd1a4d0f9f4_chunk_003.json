{
  "chunk_id": "python_official_python_official_library_9958fbb4ed3750db_8cd1a4d0f9f4_chunk_003",
  "original_doc_id": "python_official_python_official_library_9958fbb4ed3750db_8cd1a4d0f9f4",
  "content": "g = itemgetter(2, 5, 3) g(r) (r[2], r[5], r[3]) Equivalent to: def itemgetter(*items): if len(items) == 1: item = items[0] def g(obj): return obj[item] else: def g(obj): return tuple(obj[item] for item in items) return g The items can be any type accepted by the operand’s getitem() method. Dictionaries accept any hashable value. Lists, tuples, and strings accept an index or a slice: __getitem__() >>> itemgetter(1)('ABCDEFG') 'B' >>> itemgetter(1, 3, 5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2, None))('ABCDEFG') 'CDEFG' >>> soldier = dict(rank='captain', name='dotterbart') >>> itemgetter('rank')(soldier) 'captain' Example of using itemgetter() to retrieve specific fields from a tuple record: itemgetter() >>> inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)] >>> getcount = itemgetter(1) >>> list(map(getcount, inventory)) [3, 2, 5, 1] >>> sorted(inventory, key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)] Return a callable object that calls the method name on its operand. If additional arguments and/or keyword arguments are given, they will be given to the method as well. For example: After f = methodcaller('name'), the call f(b) returns b. name(). After f = methodcaller('name'), the call f(b) returns b. name(). f = methodcaller('name') f(b) b. name() After f = methodcaller('name', 'foo', bar=1), the call f(b) returns b. name('foo', bar=1). After f = methodcaller('name', 'foo', bar=1), the call f(b) returns b. name('foo', bar=1). f = methodcaller('name', 'foo', bar=1) f(b) b.",
  "title": "operator — Standard operators as functions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 3,
  "start_char": 5664,
  "end_char": 7212,
  "token_count": 473,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_9958fbb4ed3750db.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.457148"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_9958fbb4ed3750db_8cd1a4d0f9f4_chunk_003.txt"
}