{
  "chunk_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_007",
  "original_doc_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40",
  "content": "findall() findall() Find all substrings where the RE matches, and returns them as a list. finditer() finditer() Find all substrings where the RE matches, and returns them as an iterator. match() and search() return None if no match can be found. If they’re successful, a match object instance is returned, containing information about the match: where it starts and ends, the substring it matched, and more. match() search() None You can learn about this by interactively experimenting with the re module. re This HOWTO uses the standard Python interpreter for its examples. First, run the Python interpreter, import the re module, and compile a RE: re >>> import re >>> p = re. compile('[a-z]+') >>> p re. compile('[a-z]+') Now, you can try matching various strings against the RE [a-z]+. An empty string shouldn’t match at all, since + means ‘one or more repetitions’. match() should return None in this case, which will cause the interpreter to print no output. You can explicitly print the result of match() to make this clear. [a-z]+ + match() None match() >>> p. match(\"\") >>> print(p. match(\"\")) None Now, let’s try it on a string that it should match, such as tempo. In this case, match() will return a match object, so you should store the result in a variable for later use. tempo match() >>> m = p. match('tempo') >>> m <re. Match object; span=(0, 5), match='tempo'> Now you can query the match object for information about the matching string. Match object instances also have several methods and attributes; the most important ones are: Method/Attribute Purpose group() group() Return the string matched by the RE start() start() Return the starting position of the match end() end() Return the ending position of the match span() span() Return a tuple containing the (start, end) positions of the match Trying these methods will soon clarify their meaning: >>> m. group() 'tempo' >>> m. start(), m. end() (0, 5) >>> m. span() (0, 5) group() returns the substring that was matched by the RE. start() and end() return the starting and ending index of the match. span() returns both start and end indexes in a single tuple.",
  "title": "Regular Expression HOWTO.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 7,
  "start_char": 14542,
  "end_char": 16676,
  "token_count": 498,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_ac8c5a4a74040ab8.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:41.036206"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_007.txt"
}