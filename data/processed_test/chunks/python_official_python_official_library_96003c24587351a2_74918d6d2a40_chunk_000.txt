Built-in Functions. 13. 5 Source:  Built-in FunctionsÂ¶ The Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order. Built-in Functions abs() aiter() all() anext() any() ascii() bin() bool() breakpoint() bytearray() bytes() callable() chr() classmethod() compile() complex() delattr() dict() dir() divmod() enumerate() eval() exec() filter() float() format() frozenset() getattr() globals() hasattr() hash() help() hex() id() input() int() isinstance() issubclass() iter() len() list() locals() map() max() memoryview() min() next() object() oct() open() ord() pow() print() property() range() repr() reversed() round() set() setattr() slice() sorted() staticmethod() str() sum() super() tuple() type() vars() zip() __import__() Return the absolute value of a number. The argument may be an integer, a floating-point number, or an object implementing abs(). If the argument is a complex number, its magnitude is returned. __abs__() Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x. aiter(). x. __aiter__() Note: Unlike iter(), aiter() has no 2-argument variant. iter() aiter() Added in version 3. 10. Return True if all elements of the iterable are true (or if the iterable is empty). Equivalent to: True def all(iterable): for element in iterable: if not element: return False return True When awaited, return the next item from the given asynchronous iterator, or default if given and the iterator is exhausted. This is the async variant of the next() builtin, and behaves similarly. next() This calls the anext() method of async_iterator, returning an awaitable. Awaiting this returns the next value of the iterator. If default is given, it is returned if the iterator is exhausted, otherwise StopAsyncIteration is raised. __anext__() StopAsyncIteration Added in version 3. 10. Return True if any element of the iterable is true. If the iterable is empty, return False.