{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_079",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "group(0) x[0] str GenericAlias re. Match[str] If y = re. search(b'bar', b'bar'), (note the b for bytes), y will also be an instance of re. Match, but the return values of y. group(0) and y[0] will both be of type bytes. In type annotations, we would represent this variety of re. Match objects with re. Match[bytes]. If y = re. search(b'bar', b'bar'), (note the b for bytes), y will also be an instance of re. Match, but the return values of y. group(0) and y[0] will both be of type bytes. In type annotations, we would represent this variety of re. Match objects with re. Match[bytes]. y = re. search(b'bar', b'bar') b bytes y re. Match y. group(0) y[0] bytes re. Match[bytes] GenericAlias objects are instances of the class types. GenericAlias, which can also be used to create GenericAlias objects directly. GenericAlias types. GenericAlias GenericAlias Creates a GenericAlias representing a type T parameterized by types X, Y, and more depending on the T used. For example, a function expecting a list containing float elements: GenericAlias T T list float def average(values: list[float]) -> float: return sum(values) / len(values) Another example for mapping objects, using a dict, which is a generic type expecting two type parameters representing the key type and the value type. In this example, the function expects a dict with keys of type str and values of type int: dict dict str int def send_post_request(url: str, body: dict[str, int]) -> None:. The builtin functions isinstance() and issubclass() do not accept GenericAlias types for their second argument: isinstance() issubclass() GenericAlias >>> isinstance([1, 2], list[str]) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: isinstance() argument 2 cannot be a parameterized generic The Python runtime does not enforce type annotations. This extends to generic types and their type parameters. When creating a container object from a GenericAlias, the elements in the container are not checked against their type.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 79,
  "start_char": 161211,
  "end_char": 163228,
  "token_count": 479,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.250468"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_079.txt"
}