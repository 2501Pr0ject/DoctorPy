{
  "chunk_id": "python_official_python_official_library_ccf716b46391ca56_40d31454785a_chunk_002",
  "original_doc_id": "python_official_python_official_library_ccf716b46391ca56_40d31454785a",
  "content": ") ^ (Caret. ) Matches the start of the string, and in MULTILINE mode also matches immediately after each newline. MULTILINE $ Matches the end of the string or just before the newline at the end of the string, and in MULTILINE mode also matches before a newline. foo matches both ‘foo’ and ‘foobar’, while the regular expression foo$ matches only ‘foo’. More interestingly, searching for foo. $ in 'foo1\\nfoo2\\n' matches ‘foo2’ normally, but ‘foo1’ in MULTILINE mode; searching for a single $ in 'foo\\n' will find two (empty) matches: one just before the newline, and one at the end of the string. MULTILINE foo foo$ foo. $ 'foo1\\nfoo2\\n' MULTILINE $ 'foo\\n' * Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. ab will match ‘a’, ‘ab’, or ‘a’ followed by any number of ‘b’s. ab* + Causes the resulting RE to match 1 or more repetitions of the preceding RE. ab+ will match ‘a’ followed by any non-zero number of ‘b’s; it will not match just ‘a’. ab+. Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. ab. will match either ‘a’ or ‘ab’. ab. *. +. The '', '+', and '. ' quantifiers are all greedy; they match as much text as possible. Sometimes this behaviour isn’t desired; if the RE <. > is matched against ' b ', it will match the entire string, and not just ''. Adding. after the quantifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched. Using the RE <. > will match only ''. '*' '+' '. ' <. *> '<a> b <c>' '<a>'. <. *. > '<a>' *+ ++. + Like the '', '+', and '. ' quantifiers, those where '+' is appended also match as many times as possible. However, unlike the true greedy quantifiers, these do not allow back-tracking when the expression following it fails to match. These are known as possessive quantifiers.",
  "title": "re — Regular expression operations.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 2,
  "start_char": 4639,
  "end_char": 6498,
  "token_count": 473,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_ccf716b46391ca56.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:36.803642"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_ccf716b46391ca56_40d31454785a_chunk_002.txt"
}