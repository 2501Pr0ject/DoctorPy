sort() set frozenset frozenset('ab') | set('bc') frozenset set frozenset KeyError KeyError update() intersection_update() difference_update() symmetric_difference_update() __contains__() remove() discard() dict list set tuple collections 1 1. 0 True key: value {'jack': 4098, 'sjoerd': 4127} {4098: 'jack', 4127: 'sjoerd'} {} {x: x ** 2 for x in range(10)} dict() dict([('foo', 100), ('bar', 200)]) dict(foo=100, bar=200) keys() __getitem__() (key, value) TypeError {"one": 1, "two": 2, "three": 3} >>> a = dict(one=1, two=2, three=3) >>> b = {'one': 1, 'two': 2, 'three': 3} >>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3])) >>> d = dict([('two', 2), ('one', 1), ('three', 3)]) >>> e = dict({'three': 3, 'one': 1, 'two': 2}) >>> f = dict({'one': 1, 'three': 3}, two=2) >>> a == b == c == d == e == f True >>> d = {"one": 1, "two": 2, "three": 3, "four": 4} >>> d {'one': 1, 'two': 2, 'three': 3, 'four': 4} >>> list(d) ['one', 'two', 'three', 'four'] >>> list(d. values()) [1, 2, 3, 4] >>> d["one"] = 42 >>> d {'one': 42, 'two': 2, 'three': 3, 'four': 4} >>> del d["two"] >>> d["two"] = None >>> d {'one': 42, 'three': 3, 'four': 4, 'two': None} KeyError __missing__() d[key] d[key] __missing__(key) __missing__() __missing__() KeyError __missing__() >>> class Counter(dict):. def __missing__(self, key):.