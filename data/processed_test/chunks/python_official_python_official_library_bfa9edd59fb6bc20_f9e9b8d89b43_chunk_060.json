{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_060",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "'0o' The alternate form causes a leading '0x' or '0X' (depending on whether the 'x' or 'X' format was used) to be inserted before the first digit. The alternate form causes a leading '0x' or '0X' (depending on whether the 'x' or 'X' format was used) to be inserted before the first digit. '0x' '0X' 'x' 'X' The alternate form causes the result to always contain a decimal point, even if no digits follow it. The precision determines the number of digits after the decimal point and defaults to 6. The alternate form causes the result to always contain a decimal point, even if no digits follow it. The precision determines the number of digits after the decimal point and defaults to 6. The alternate form causes the result to always contain a decimal point, and trailing zeroes are not removed as they would otherwise be. The precision determines the number of significant digits before and after the decimal point and defaults to 6. The alternate form causes the result to always contain a decimal point, and trailing zeroes are not removed as they would otherwise be. The precision determines the number of significant digits before and after the decimal point and defaults to 6. If precision is N, the output is truncated to N characters. If precision is N, the output is truncated to N characters. N N b'%s' is deprecated, but will not be removed during the 3. x series. b'%s' is deprecated, but will not be removed during the 3. x series. b'%s' b'%r' is deprecated, but will not be removed during the 3. x series. b'%r' is deprecated, but will not be removed during the 3. x series. b'%r' See PEP 237. See PEP 237. Note The bytearray version of this method does not operate in place - it always produces a new object, even if no changes were made. See also PEP 461 - Adding % formatting to bytes and bytearray Added in version 3. 5. ### Memory ViewsÂ¶ memoryview objects allow Python code to access the internal data of an object that supports the buffer protocol without copying. memoryview Create a memoryview that references object. object must support the buffer protocol. Built-in objects that support the buffer protocol include bytes and bytearray.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 60,
  "start_char": 123779,
  "end_char": 125939,
  "token_count": 494,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.233418"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_060.txt"
}