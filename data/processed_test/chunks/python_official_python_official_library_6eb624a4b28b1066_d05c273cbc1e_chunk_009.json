{
  "chunk_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_009",
  "original_doc_id": "python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e",
  "content": "(2) date2 date2 + timedelta == date1 timedelta = date1 - date2 timedelta = date1 - date2 (3) date1 == date2 date1. = date2 Equality comparison. (4) date1 < date2 date1 > date2 date1 <= date2 date1 >= date2 Order comparison. (5) Notes: date2 is moved forward in time if timedelta. days > 0, or backward if timedelta. days < 0. Afterward date2 - date1 == timedelta. days. timedelta. seconds and timedelta. microseconds are ignored. OverflowError is raised if date2. year would be smaller than MINYEAR or larger than MAXYEAR. date2 is moved forward in time if timedelta. days > 0, or backward if timedelta. days < 0. Afterward date2 - date1 == timedelta. days. timedelta. seconds and timedelta. microseconds are ignored. OverflowError is raised if date2. year would be smaller than MINYEAR or larger than MAXYEAR. timedelta. days > 0 timedelta. days < 0 date2 - date1 == timedelta. days timedelta. seconds timedelta. microseconds OverflowError date2. year MINYEAR MAXYEAR timedelta. seconds and timedelta. microseconds are ignored. timedelta. seconds and timedelta. microseconds are ignored. timedelta. seconds timedelta. microseconds This is exact, and cannot overflow. timedelta. seconds and timedelta. microseconds are 0, and date2 + timedelta == date1 after. This is exact, and cannot overflow. timedelta. seconds and timedelta. microseconds are 0, and date2 + timedelta == date1 after. timedelta. seconds timedelta. microseconds date2 + timedelta == date1 date objects are equal if they represent the same date. date objects that are not also datetime instances are never equal to datetime objects, even if they represent the same date. date objects are equal if they represent the same date. date date objects that are not also datetime instances are never equal to datetime objects, even if they represent the same date. date datetime datetime date1 is considered less than date2 when date1 precedes date2 in time. In other words, date1 < date2 if and only if date1. toordinal() < date2. toordinal(). Order comparison between a date object that is not also a datetime instance and a datetime object raises TypeError. date1 is considered less than date2 when date1 precedes date2 in time.",
  "title": "datetime â€” Basic date and time types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 9,
  "start_char": 18415,
  "end_char": 20606,
  "token_count": 498,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_6eb624a4b28b1066.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:01.387434"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_6eb624a4b28b1066_d05c273cbc1e_chunk_009.txt"
}