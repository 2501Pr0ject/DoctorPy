{
  "chunk_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_048",
  "original_doc_id": "python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43",
  "content": "register_error() For performance reasons, the value of errors is not checked for validity unless a decoding error actually occurs, Python Development Mode is enabled or a debug build is used. Note Passing the encoding argument to str allows decoding any bytes-like object directly, without needing to make a temporary bytes or bytearray object. str bytes bytearray Changed in version 3. 1: Added support for keyword arguments. Changed in version 3. 9: The value of the errors argument is now checked in Python Development Mode and in debug mode. Return True if the binary data ends with the specified suffix, otherwise return False. suffix can also be a tuple of suffixes to look for. With optional start, test beginning at that position. With optional end, stop comparing at that position. True False The suffix(es) to search for may be any bytes-like object. Return the lowest index in the data where the subsequence sub is found, such that sub is contained in the slice s[start:end]. Optional arguments start and end are interpreted as in slice notation. Return -1 if sub is not found. s[start:end] -1 The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255. Note The find() method should be used only if you need to know the position of sub. To check if sub is a substring or not, use the in operator: find() in >>> b'Py' in b'Python' True Changed in version 3. 3: Also accept an integer in the range 0 to 255 as the subsequence. Like find(), but raise ValueError when the subsequence is not found. find() ValueError The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255. Changed in version 3. 3: Also accept an integer in the range 0 to 255 as the subsequence. Return a bytes or bytearray object which is the concatenation of the binary data sequences in iterable. A TypeError will be raised if there are any values in iterable that are not bytes-like objects, including str objects. The separator between elements is the contents of the bytes or bytearray object providing this method. TypeError str This static method returns a translation table usable for bytes. translate() that will map each character in from into the character at the same position in to; from and to must both be bytes-like objects and have the same length. bytes.",
  "title": "Built-in Types.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 48,
  "start_char": 97963,
  "end_char": 100286,
  "token_count": 498,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_bfa9edd59fb6bc20.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:56.222997"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_bfa9edd59fb6bc20_f9e9b8d89b43_chunk_048.txt"
}