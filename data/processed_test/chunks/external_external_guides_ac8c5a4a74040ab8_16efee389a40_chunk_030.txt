search('^From', 'Reciting From Memory')) None '^' \^ $ >>> print(re. search('}$', '{block}')) <re. Match object; span=(6, 7), match='}'> >>> print(re. search('}$', '{block} ')) None >>> print(re. search('}$', '{block}\n')) <re. Match object; span=(6, 7), match='}'> '$' \$ [$] \A MULTILINE \A ^ MULTILINE \A ^ \Z \b class >>> p = re. compile(r'\bclass\b') >>> print(p. search('no class at all')) <re. Match object; span=(3, 8), match='class'> >>> print(p. search('the declassified algorithm')) None >>> print(p. search('one subclass is')) None \b \b 'r' >>> p = re. compile('\bclass\b') >>> print(p. search('no class at all')) None >>> print(p. search('\b' + 'class' + '\b')) <re. Match object; span=(0, 7), match='\x08class\x08'> \b \B \b ':' From: author@example. com User-Agent: Thunderbird 1. 5. 0. 9 (X11/20061227) MIME-Version: 1. 0 To: editor@example. com '(' ')' '(' ')' * +. {m,n} (ab)* ab >>> p = re. compile('(ab)*') >>> print(p. match('ababababab'). span()) (0, 10) '(' ')' group() start() end() span() >>> p = re. compile('(a)b') >>> m = p. match('ab') >>> m. group() 'ab' >>> m. group(0) 'ab' >>> p = re. compile('(a(b)c)d') >>> m = p. match('abcd') >>> m. group(0) 'abcd' >>> m. group(1) 'abc' >>> m. group(2) 'b' group() >>> m. group(2,1,2) ('b', 'abc', 'b') groups() >>> m. groups() ('abc', 'b') \1 >>> p = re. compile(r'\b(\w+)\s+\1\b') >>> p. search('Paris in the the spring').