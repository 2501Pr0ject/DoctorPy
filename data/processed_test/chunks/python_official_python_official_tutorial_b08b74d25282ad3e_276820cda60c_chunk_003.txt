r' repr() >>> animals = 'eels' >>> print(f'My hovercraft is full of {animals}. ') My hovercraft is full of eels. >>> print(f'My hovercraft is full of {animals. r}. ') My hovercraft is full of 'eels'. The = specifier can be used to expand an expression to the text of the expression, an equal sign, then the representation of the evaluated expression: = >>> bugs = 'roaches' >>> count = 13 >>> area = 'living room' >>> print(f'Debugging {bugs=} {count=} {area=}') Debugging bugs='roaches' count=13 area='living room' See self-documenting expressions for more information on the = specifier. For a reference on these format specifications, see the reference guide for the Format Specification Mini-Language. = ### 7. 1. 2. The String format() Method¶ Basic usage of the str. format() method looks like this: str. format() >>> print('We are the {} who say "{}. "'. format('knights', 'Ni')) We are the knights who say "Ni. " The brackets and characters within them (called format fields) are replaced with the objects passed into the str. format() method. A number in the brackets can be used to refer to the position of the object passed into the str. format() method. str. format() str. format() >>> print('{0} and {1}'. format('spam', 'eggs')) spam and eggs >>> print('{1} and {0}'. format('spam', 'eggs')) eggs and spam If keyword arguments are used in the str. format() method, their values are referred to by using the name of the argument. str. format() >>> print('This {food} is {adjective}. '. format(. food='spam', adjective='absolutely horrible')) This spam is absolutely horrible. Positional and keyword arguments can be arbitrarily combined: >>> print('The story of {0}, {1}, and {other}. '. format('Bill', 'Manfred',. other='Georg')) The story of Bill, Manfred, and Georg. If you have a really long format string that you don’t want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position.