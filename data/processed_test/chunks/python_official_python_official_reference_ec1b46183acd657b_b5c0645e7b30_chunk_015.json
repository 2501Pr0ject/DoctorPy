{
  "chunk_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_015",
  "original_doc_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30",
  "content": "If the length of the subject sequence is less than the number of non-star subpatterns, the sequence pattern fails. The leading non-star subpatterns are matched to their corresponding items as for fixed-length sequences. The leading non-star subpatterns are matched to their corresponding items as for fixed-length sequences. If the previous step succeeds, the star subpattern matches a list formed of the remaining subject items, excluding the remaining items corresponding to non-star subpatterns following the star subpattern. If the previous step succeeds, the star subpattern matches a list formed of the remaining subject items, excluding the remaining items corresponding to non-star subpatterns following the star subpattern. Remaining non-star subpatterns are matched to their corresponding subject items, as for a fixed-length sequence. Remaining non-star subpatterns are matched to their corresponding subject items, as for a fixed-length sequence. Note The length of the subject sequence is obtained via len() (i. e. via the len() protocol). This length may be cached by the interpreter in a similar manner as value patterns. len() __len__() In simple terms [P1, P2, P3, … , P] matches only if all the following happens: [P1, P2, P3, , P<N>] check is a sequence check is a sequence <subject> len(subject) == len(subject) == len(subject) == <N> P1 matches [0] (note that this match can also bind names) P1 matches [0] (note that this match can also bind names) P1 <subject>[0] P2 matches [1] (note that this match can also bind names) P2 matches [1] (note that this match can also bind names) P2 <subject>[1] … and so on for the corresponding pattern/element. … and so on for the corresponding pattern/element. #### 8. 6. 4. 9. Mapping Patterns¶ A mapping pattern contains one or more key-value patterns. The syntax is similar to the construction of a dictionary. Syntax: mapping_pattern ::= \"{\" [items_pattern] \"}\" items_pattern ::= \",\". key_value_pattern+ \",\". key_value_pattern ::= (literal_pattern | value_pattern) \":\" pattern | double_star_pattern double_star_pattern ::= \"**\" capture_pattern items_pattern key_value_pattern literal_pattern value_pattern pattern double_star_pattern capture_pattern At most one double star pattern may be in a mapping pattern.",
  "title": "8. Compound statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 15,
  "start_char": 34822,
  "end_char": 37096,
  "token_count": 494,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_ec1b46183acd657b.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.379242"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_015.txt"
}