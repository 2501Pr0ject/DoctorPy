RULE is shorthand for a negative lookahead assertion the notation. RULE is shorthand for a negative lookahead assertion. RULE The top-level syntax for patterns is: patterns patterns ::= open_sequence_pattern | pattern pattern ::= as_pattern | or_pattern closed_pattern ::= | literal_pattern | capture_pattern | wildcard_pattern | value_pattern | group_pattern | sequence_pattern | mapping_pattern | class_pattern open_sequence_pattern pattern as_pattern or_pattern literal_pattern capture_pattern wildcard_pattern value_pattern group_pattern sequence_pattern mapping_pattern class_pattern The descriptions below will include a description “in simple terms” of what a pattern does for illustration purposes (credits to Raymond Hettinger for a document that inspired most of the descriptions). Note that these descriptions are purely for illustration purposes and may not reflect the underlying implementation. Furthermore, they do not cover all valid forms. #### 8. 6. 4. 1. OR Patterns¶ An OR pattern is two or more patterns separated by vertical bars |. Syntax: | or_pattern ::= "|". closed_pattern+ closed_pattern Only the final subpattern may be irrefutable, and each subpattern must bind the same set of names to avoid ambiguity. An OR pattern matches each of its subpatterns in turn to the subject value, until one succeeds. The OR pattern is then considered successful. Otherwise, if none of the subpatterns succeed, the OR pattern fails. In simple terms, P1 | P2 |. will try to match P1, if it fails it will try to match P2, succeeding immediately if any succeeds, failing otherwise. P1 | P2 |. P1 P2 #### 8. 6. 4. 2. AS Patterns¶ An AS pattern matches an OR pattern on the left of the as keyword against a subject. Syntax: as as_pattern ::= or_pattern "as" capture_pattern or_pattern capture_pattern If the OR pattern fails, the AS pattern fails. Otherwise, the AS pattern binds the subject to the name on the right of the as keyword and succeeds. capture_pattern cannot be a. capture_pattern _ In simple terms P as NAME will match with P, and on success it will set NAME =. P as NAME P NAME = <subject> #### 8. 6. 4. 3. Literal Patterns¶ A literal pattern corresponds to most literals in Python.