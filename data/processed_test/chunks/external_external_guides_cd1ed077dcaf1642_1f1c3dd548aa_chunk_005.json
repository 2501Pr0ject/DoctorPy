{
  "chunk_id": "external_external_guides_cd1ed077dcaf1642_1f1c3dd548aa_chunk_005",
  "original_doc_id": "external_external_guides_cd1ed077dcaf1642_1f1c3dd548aa",
  "content": "') print('Reason: ', e. reason) else: # everything is fine Note The except HTTPError must come first, otherwise except URLError will also catch an HTTPError. except HTTPError except URLError HTTPError #### Number 2¶ from urllib. request import Request, urlopen from urllib. error import URLError req = Request(someurl) try: response = urlopen(req) except URLError as e: if hasattr(e, 'reason'): print('We failed to reach a server. ') print('Reason: ', e. reason) elif hasattr(e, 'code'): print('The server couldn\\'t fulfill the request. ') print('Error code: ', e. code) else: # everything is fine ## info and geturl¶ The response returned by urlopen (or the HTTPError instance) has two useful methods info() and geturl() and is defined in the module urllib. response. HTTPError info() geturl() urllib. response geturl - this returns the real URL of the page fetched. This is useful because urlopen (or the opener object used) may have followed a redirect. The URL of the page fetched may not be the same as the URL requested. geturl - this returns the real URL of the page fetched. This is useful because urlopen (or the opener object used) may have followed a redirect. The URL of the page fetched may not be the same as the URL requested. urlopen info - this returns a dictionary-like object that describes the page fetched, particularly the headers sent by the server. It is currently an http. client. HTTPMessage instance. info - this returns a dictionary-like object that describes the page fetched, particularly the headers sent by the server. It is currently an http. client. HTTPMessage instance. http. client. HTTPMessage Typical headers include ‘Content-length’, ‘Content-type’, and so on. See the Quick Reference to HTTP Headers for a useful listing of HTTP headers with brief explanations of their meaning and use. ## Openers and Handlers¶ When you fetch a URL you use an opener (an instance of the perhaps confusingly named urllib. request. OpenerDirector). Normally we have been using the default opener - via urlopen - but you can create custom openers. Openers use handlers. All the “heavy lifting” is done by the handlers. Each handler knows how to open URLs for a particular URL scheme (http, ftp, etc.",
  "title": "HOWTO Fetch Internet Resources Using The urllib Package.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 5,
  "start_char": 10784,
  "end_char": 13005,
  "token_count": 495,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_cd1ed077dcaf1642.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:39.195431"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_cd1ed077dcaf1642_1f1c3dd548aa_chunk_005.txt"
}