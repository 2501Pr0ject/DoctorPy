These methods are called to implement the augmented arithmetic assignments (+=, -=, =, @=, /=, //=, %=, **=, <<=, >>=, &=, ^=, |=). These methods should attempt to do the operation in-place (modifying self) and return the result (which could be, but does not have to be, self). If a specific method is not defined, or if that method returns NotImplemented, the augmented assignment falls back to the normal methods. For instance, if x is an instance of a class with an iadd() method, x += y is equivalent to x = x. iadd(y). If iadd() does not exist, or if x. iadd(y) returns NotImplemented, x. add(y) and y. radd(x) are considered, as with the evaluation of x + y. In certain situations, augmented assignment can result in unexpected errors (see Why does a_tuple[i] += [‘item’] raise an exception when the addition works. ), but this behavior is in fact part of the data model. += -= *= @= /= //= %= **= <<= >>= &= ^= |= NotImplemented __iadd__() x += y x = x. __iadd__(y) __iadd__() x. __iadd__(y) NotImplemented x. __add__(y) y. __radd__(x) x + y Called to implement the unary arithmetic operations (-, +, abs() and ~). - + abs() ~ Called to implement the built-in functions complex(), int() and float(). Should return a value of the appropriate type. complex() int() float() Called to implement operator. index(), and whenever Python needs to losslessly convert the numeric object to an integer object (such as in slicing, or in the built-in bin(), hex() and oct() functions). Presence of this method indicates that the numeric object is an integer type. Must return an integer. operator. index() bin() hex() oct() If int(), float() and complex() are not defined then corresponding built-in functions int(), float() and complex() fall back to index(). __int__() __float__() __complex__() int() float() complex() __index__() Called to implement the built-in function round() and math functions trunc(), floor() and ceil(). Unless ndigits is passed to round() all these methods should return the value of the object truncated to an Integral (typically an int).