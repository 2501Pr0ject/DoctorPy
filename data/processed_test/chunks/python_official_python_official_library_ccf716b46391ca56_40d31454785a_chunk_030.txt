[0-7]+ %s %s \S+ \S+ %u %u \d+ \d+ %x, %X %x %X [-+]. (0[xX]). [\dA-Fa-f]+ [-+]. (0[xX]). [\dA-Fa-f]+ To extract the filename and numbers from a string like /usr/sbin/sendmail - 0 errors, 4 warnings you would use a scanf() format like scanf() %s - %d errors, %d warnings The equivalent regular expression would be (\S+) - (\d+) errors, (\d+) warnings ### search() vs. match()Â¶ Python offers different primitive operations based on regular expressions: re. match() checks for a match only at the beginning of the string re. match() checks for a match only at the beginning of the string re. match() re. search() checks for a match anywhere in the string (this is what Perl does by default) re. search() checks for a match anywhere in the string (this is what Perl does by default) re. search() re. fullmatch() checks for entire string to be a match re. fullmatch() checks for entire string to be a match re. fullmatch() For example: >>> re. match("c", "abcdef") # No match >>> re. search("c", "abcdef") # Match <re. Match object; span=(2, 3), match='c'> >>> re. fullmatch("p. *n", "python") # Match <re. Match object; span=(0, 6), match='python'> >>> re. fullmatch("r. *n", "python") # No match Regular expressions beginning with '^' can be used with search() to restrict the match at the beginning of the string: '^' search() >>> re. match("c", "abcdef") # No match >>> re. search("^c", "abcdef") # No match >>> re. search("^a", "abcdef") # Match <re. Match object; span=(0, 1), match='a'> Note however that in MULTILINE mode match() only matches at the beginning of the string, whereas using search() with a regular expression beginning with '^' will match at the beginning of each line. MULTILINE match() search() '^' >>> re. match("X", "A\nB\nX", re.