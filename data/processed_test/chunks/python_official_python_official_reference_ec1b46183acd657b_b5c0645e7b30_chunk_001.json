{
  "chunk_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_001",
  "original_doc_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30",
  "content": "Also note that optional continuation clauses always begin with a keyword that cannot start a statement, thus there are no ambiguities (the ‘dangling else’ problem is solved in Python by requiring nested if statements to be indented). NEWLINE DEDENT else if The formatting of the grammar rules in the following sections places each clause on a separate line for clarity. ## 8. 1. The if statement¶ if The if statement is used for conditional execution: if if_stmt ::= \"if\" assignment_expression \":\" suite (\"elif\" assignment_expression \":\" suite)* [\"else\" \":\" suite] assignment_expression suite assignment_expression suite suite It selects exactly one of the suites by evaluating the expressions one by one until one is found to be true (see section Boolean operations for the definition of true and false); then that suite is executed (and no other part of the if statement is executed or evaluated). If all expressions are false, the suite of the else clause, if present, is executed. if else ## 8. 2. The while statement¶ while The while statement is used for repeated execution as long as an expression is true: while while_stmt ::= \"while\" assignment_expression \":\" suite [\"else\" \":\" suite] assignment_expression suite suite This repeatedly tests the expression and, if it is true, executes the first suite; if the expression is false (which may be the first time it is tested) the suite of the else clause, if present, is executed and the loop terminates. else A break statement executed in the first suite terminates the loop without executing the else clause’s suite. A continue statement executed in the first suite skips the rest of the suite and goes back to testing the expression. break else continue ## 8. 3. The for statement¶ for The for statement is used to iterate over the elements of a sequence (such as a string, tuple or list) or other iterable object: for for_stmt ::= \"for\" target_list \"in\" starred_list \":\" suite [\"else\" \":\" suite] target_list starred_list suite suite The starred_list expression is evaluated once; it should yield an iterable object. An iterator is created for that iterable. The first item provided by the iterator is then assigned to the target list using the standard rules for assignments (see Assignment statements), and the suite is executed. This repeats for each item provided by the iterator. When the iterator is exhausted, the suite in the else clause, if present, is executed, and the loop terminates.",
  "title": "8. Compound statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 1,
  "start_char": 2275,
  "end_char": 4729,
  "token_count": 499,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_ec1b46183acd657b.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.366641"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_001.txt"
}