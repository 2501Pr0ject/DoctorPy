{
  "chunk_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_009",
  "original_doc_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30",
  "content": "Conversely, do not rely on variables remaining unchanged after a failed match. The exact behavior is dependent on implementation and may vary. This is an intentional decision made to allow different implementations to add optimizations. If the pattern succeeds, the corresponding guard (if present) is evaluated. In this case all name bindings are guaranteed to have happened. If the guard evaluates as true or is missing, the block inside case_block is executed. Otherwise, the next case_block is attempted as described above. If there are no further case blocks, the match statement is completed. If the pattern succeeds, the corresponding guard (if present) is evaluated. In this case all name bindings are guaranteed to have happened. If the guard evaluates as true or is missing, the block inside case_block is executed. If the guard evaluates as true or is missing, the block inside case_block is executed. block case_block Otherwise, the next case_block is attempted as described above. Otherwise, the next case_block is attempted as described above. case_block If there are no further case blocks, the match statement is completed. If there are no further case blocks, the match statement is completed. Note Users should generally never rely on a pattern being evaluated. Depending on implementation, the interpreter may cache values or use other optimizations which skip repeated evaluations. A sample match statement: >>> flag = False >>> match (100, 200):. case (100, 300): # Mismatch: 200. = 300. print('Case 1'). case (100, 200) if flag: # Successful match, but guard fails. print('Case 2'). case (100, y): # Matches and binds y to 200. print(f'Case 3, y: {y}'). case _: # Pattern not attempted. print('Case 4, I match anything. '). Case 3, y: 200 In this case, if flag is a guard. Read more about that in the next section. if flag ### 8. 6. 2. GuardsÂ¶ guard ::= \"if\" named_expression named_expression A guard (which is part of the case) must succeed for code inside the case block to execute. It takes the form: if followed by an expression. guard case case if The logical flow of a case block with a guard follows: case guard Check that the pattern in the case block succeeded.",
  "title": "8. Compound statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 9,
  "start_char": 21063,
  "end_char": 23255,
  "token_count": 484,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_ec1b46183acd657b.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.374218"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_009.txt"
}