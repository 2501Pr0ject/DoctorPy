{
  "chunk_id": "external_external_guides_ab3164948a2522c6_60feccf23bf0_chunk_002",
  "original_doc_id": "external_external_guides_ab3164948a2522c6_60feccf23bf0",
  "content": "warning('And this, too') logger. error('And non-ASCII stuff, too, like Øresund and Malmö') Changed in version 3. 9: The encoding argument was added. In earlier Python versions, or if not specified, the encoding used is the default value used by open(). While not shown in the above example, an errors argument can also now be passed, which determines how encoding errors are handled. For available values and the default, see the documentation for open(). open() open() And now if we open the file and look at what we have, we should find the log messages: DEBUG:__main__:This message should go to the log file INFO:__main__:So should this WARNING:__main__:And this, too ERROR:__main__:And non-ASCII stuff, too, like Øresund and Malmö This example also shows how you can set the logging level which acts as the threshold for tracking. In this case, because we set the threshold to DEBUG, all of the messages were printed. DEBUG If you want to set the logging level from a command-line option such as: --log=INFO and you have the value of the parameter passed for --log in some variable loglevel, you can use: --log getattr(logging, loglevel. upper()) to get the value which you’ll pass to basicConfig() via the level argument. You may want to error check any user input value, perhaps as in the following example: basicConfig() # assuming loglevel is bound to the string value obtained from the # command line argument. Convert to upper case to allow the user to # specify --log=DEBUG or --log=debug numeric_level = getattr(logging, loglevel. upper(), None) if not isinstance(numeric_level, int): raise ValueError('Invalid log level: %s' % loglevel) logging. basicConfig(level=numeric_level,. ) The call to basicConfig() should come before any calls to a logger’s methods such as debug(), info(), etc. Otherwise, that logging event may not be handled in the desired manner. basicConfig() debug() info() If you run the above script several times, the messages from successive runs are appended to the file example. log. If you want each run to start afresh, not remembering the messages from earlier runs, you can specify the filemode argument, by changing the call in the above example to: logging. basicConfig(filename='example.",
  "title": "Logging HOWTO.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 2,
  "start_char": 4962,
  "end_char": 7191,
  "token_count": 501,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_ab3164948a2522c6.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:42.522049"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_ab3164948a2522c6_60feccf23bf0_chunk_002.txt"
}