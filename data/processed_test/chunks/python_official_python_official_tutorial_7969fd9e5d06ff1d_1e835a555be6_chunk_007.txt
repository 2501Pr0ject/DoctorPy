The TypeError raised by dividing two strings is not handled by the except clause and therefore re-raised after the finally clause has been executed. finally TypeError except finally In real world applications, the finally clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful. finally ## 8. 8. Predefined Clean-up Actions¶ Some objects define standard clean-up actions to be undertaken when the object is no longer needed, regardless of whether or not the operation using the object succeeded or failed. Look at the following example, which tries to open a file and print its contents to the screen. for line in open("myfile. txt"): print(line, end="") The problem with this code is that it leaves the file open for an indeterminate amount of time after this part of the code has finished executing. This is not an issue in simple scripts, but can be a problem for larger applications. The with statement allows objects like files to be used in a way that ensures they are always cleaned up promptly and correctly. with with open("myfile. txt") as f: for line in f: print(line, end="") After the statement is executed, the file f is always closed, even if a problem was encountered while processing the lines. Objects which, like files, provide predefined clean-up actions will indicate this in their documentation. ## 8. 9. Raising and Handling Multiple Unrelated Exceptions¶ There are situations where it is necessary to report several exceptions that have occurred. This is often the case in concurrency frameworks, when several tasks may have failed in parallel, but there are also other use cases where it is desirable to continue execution and collect multiple errors rather than raise the first exception. The builtin ExceptionGroup wraps a list of exception instances so that they can be raised together. It is an exception itself, so it can be caught like any other exception. ExceptionGroup >>> def f():. excs = [OSError('error 1'), SystemError('error 2')]. raise ExceptionGroup('there were problems', excs).