The context manager’s exit() method is invoked. If an exception caused the suite to be exited, its type, value, and traceback are passed as arguments to exit(). Otherwise, three None arguments are supplied. __exit__() __exit__() None If the suite was exited due to an exception, and the return value from the exit() method was false, the exception is reraised. If the return value was true, the exception is suppressed, and execution continues with the statement following the with statement. __exit__() with If the suite was exited for any reason other than an exception, the return value from exit() is ignored, and execution proceeds at the normal location for the kind of exit that was taken. __exit__() The following code: with EXPRESSION as TARGET: SUITE is semantically equivalent to: manager = (EXPRESSION) enter = type(manager). __enter__ exit = type(manager). __exit__ value = enter(manager) hit_except = False try: TARGET = value SUITE except: hit_except = True if not exit(manager, *sys. exc_info()): raise finally: if not hit_except: exit(manager, None, None, None) With more than one item, the context managers are processed as if multiple with statements were nested: with with A() as a, B() as b: SUITE is semantically equivalent to: with A() as a: with B() as b: SUITE You can also write multi-item context managers in multiple lines if the items are surrounded by parentheses. For example: with ( A() as a, B() as b, ): SUITE Changed in version 3. 1: Support for multiple context expressions. Changed in version 3. 10: Support for using grouping parentheses to break the statement in multiple lines. See also The specification, background, and examples for the Python with statement. with ## 8. 6. The match statement¶ match Added in version 3. 10. The match statement is used for pattern matching. Syntax: match_stmt ::= 'match' subject_expr ":" NEWLINE INDENT case_block+ DEDENT subject_expr ::= star_named_expression "," star_named_expressions. | named_expression case_block ::= 'case' patterns [guard] ":" block subject_expr case_block star_named_expression star_named_expressions named_expression patterns guard block Note This section uses single quotes to denote soft keywords.