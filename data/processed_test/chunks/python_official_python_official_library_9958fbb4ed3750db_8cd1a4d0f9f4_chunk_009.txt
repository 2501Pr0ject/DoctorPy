name('foo', bar=1) def methodcaller(name, /, *args, **kwargs): def caller(obj): return getattr(obj, name)(*args, **kwargs) return caller operator a + b add(a, b) seq1 + seq2 concat(seq1, seq2) obj in seq contains(seq, obj) a / b truediv(a, b) a // b floordiv(a, b) a & b and_(a, b) a ^ b xor(a, b) ~ a invert(a) a | b or_(a, b) a ** b pow(a, b) a is b is_(a, b) a is not b is_not(a, b) obj[k] = v setitem(obj, k, v) del obj[k] delitem(obj, k) obj[k] getitem(obj, k) a << b lshift(a, b) a % b mod(a, b) a * b mul(a, b) a @ b matmul(a, b) - a neg(a) not a not_(a) + a pos(a) a >> b rshift(a, b) seq[i:j] = values setitem(seq, slice(i, j), values) del seq[i:j] delitem(seq, slice(i, j)) seq[i:j] getitem(seq, slice(i, j)) s % obj mod(s, obj) a - b sub(a, b) obj truth(obj) a < b lt(a, b) a <= b le(a, b) a == b eq(a, b) a. = b ne(a, b) a >= b ge(a, b) a > b gt(a, b) x += y x = operator. iadd(x, y) z = operator.