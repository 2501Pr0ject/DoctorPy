{
  "chunk_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_001",
  "original_doc_id": "python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7",
  "content": "conv['frac_digits'], x), grouping=True) '$1,234,567. 80' ## 11. 2. Templating¶ The string module includes a versatile Template class with a simplified syntax suitable for editing by end-users. This allows users to customize their applications without having to alter the application. string Template The format uses placeholder names formed by $ with valid Python identifiers (alphanumeric characters and underscores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no intervening spaces. Writing $$ creates a single escaped $: $ $$ $ >>> from string import Template >>> t = Template('${village}folk send $$10 to $cause. ') >>> t. substitute(village='Nottingham', cause='the ditch fund') 'Nottinghamfolk send $10 to the ditch fund. ' The substitute() method raises a KeyError when a placeholder is not supplied in a dictionary or a keyword argument. For mail-merge style applications, user supplied data may be incomplete and the safe_substitute() method may be more appropriate — it will leave placeholders unchanged if data is missing: substitute() KeyError safe_substitute() >>> t = Template('Return the $item to $owner. ') >>> d = dict(item='unladen swallow') >>> t. substitute(d) Traceback (most recent call last):. KeyError: 'owner' >>> t. safe_substitute(d) 'Return the unladen swallow to $owner. ' Template subclasses can specify a custom delimiter. For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or file format: >>> import time, os. path >>> photofiles = ['img_1074. jpg', 'img_1076. jpg', 'img_1077. jpg'] >>> class BatchRename(Template):. delimiter = '%'. >>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format): ') Enter rename style (%d-date %n-seqnum %f-format): Ashley_%n%f >>> t = BatchRename(fmt) >>> date = time. strftime('%d%b%y') >>> for i, filename in enumerate(photofiles):. base, ext = os. path. splitext(filename). newname = t. substitute(d=date, n=i, f=ext). print('{0} --> {1}'.",
  "title": "11. Brief Tour of the Standard Library — Part II.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 1,
  "start_char": 2040,
  "end_char": 4114,
  "token_count": 490,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_df4c6c63651fc819.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.709490"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_df4c6c63651fc819_f6bb78911be7_chunk_001.txt"
}