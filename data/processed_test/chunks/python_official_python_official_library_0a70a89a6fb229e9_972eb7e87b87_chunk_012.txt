format(42) 'int: 42; hex: 2a; oct: 52; bin: 101010' >>> # with 0x, 0o, or 0b as prefix: >>> "int: {0:d}; hex: {0:#x}; oct: {0:#o}; bin: {0:#b}". format(42) 'int: 42; hex: 0x2a; oct: 0o52; bin: 0b101010' Using the comma or the underscore as a digit group separator: >>> '{:,}'. format(1234567890) '1,234,567,890' >>> '{:_}'. format(1234567890) '1_234_567_890' >>> '{:_b}'. format(1234567890) '100_1001_1001_0110_0000_0010_1101_0010' >>> '{:_x}'. format(1234567890) '4996_02d2' Expressing a percentage: >>> points = 19 >>> total = 22 >>> 'Correct answers: {:. 2%}'. format(points/total) 'Correct answers: 86. 36%' Using type-specific formatting: >>> import datetime >>> d = datetime. datetime(2010, 7, 4, 12, 15, 58) >>> '{:%Y-%m-%d %H:%M:%S}'. format(d) '2010-07-04 12:15:58' Nesting arguments and more complex examples: >>> for align, text in zip('<^>', ['left', 'center', 'right']):. '{0:{fill}{align}16}'. format(text, fill=align, align=align). 'left<<<<<<<<<<<<' '^^^^^center^^^^^' '>>>>>>>>>>>right' >>> >>> octets = [192, 168, 0, 1] >>> '{:02X}{:02X}{:02X}{:02X}'. format(*octets) 'C0A80001' >>> int(_, 16) 3232235521 >>> >>> width = 5 >>> for num in range(5,12):. for base in 'dXob':. print('{0:{width}{base}}'. format(num, base=base, width=width), end=' '). print().