{
  "chunk_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_012",
  "original_doc_id": "external_external_guides_ac8c5a4a74040ab8_16efee389a40",
  "content": "compile(\"&#(0[0-7]+\" \"|[0-9]+\" \"|x[0-9a-fA-F]+);\") In the above example, Python’s automatic concatenation of string literals has been used to break up the RE into smaller pieces, but it’s still more difficult to understand than the version using re. VERBOSE. re. VERBOSE ## More Pattern Power¶ So far we’ve only covered a part of the features of regular expressions. In this section, we’ll cover some new metacharacters, and how to use groups to retrieve portions of the text that was matched. ### More Metacharacters¶ There are some metacharacters that we haven’t covered yet. Most of them will be covered in this section. Some of the remaining metacharacters to be discussed are zero-width assertions. They don’t cause the engine to advance through the string; instead, they consume no characters at all, and simply succeed or fail. For example, \\b is an assertion that the current position is located at a word boundary; the position isn’t changed by the \\b at all. This means that zero-width assertions should never be repeated, because if they match once at a given location, they can obviously be matched an infinite number of times. \\b \\b | Alternation, or the “or” operator. If A and B are regular expressions, A|B will match any string that matches either A or B. | has very low precedence in order to make it work reasonably when you’re alternating multi-character strings. Crow|Servo will match either 'Crow' or 'Servo', not 'Cro', a 'w' or an 'S', and 'ervo'. A|B | Crow|Servo 'Crow' 'Servo' 'Cro' 'w' 'S' 'ervo' To match a literal '|', use \\|, or enclose it inside a character class, as in [|]. '|' \\| [|] ^ Matches at the beginning of lines. Unless the MULTILINE flag has been set, this will only match at the beginning of the string. In MULTILINE mode, this also matches immediately after each newline within the string. MULTILINE MULTILINE For example, if you wish to match the word From only at the beginning of a line, the RE to use is ^From. From ^From >>> print(re. search('^From', 'From Here to Eternity')) <re.",
  "title": "Regular Expression HOWTO.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 12,
  "start_char": 24480,
  "end_char": 26512,
  "token_count": 498,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_ac8c5a4a74040ab8.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:41.040450"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_ac8c5a4a74040ab8_16efee389a40_chunk_012.txt"
}