{
  "chunk_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_039",
  "original_doc_id": "python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd",
  "content": "When a class definition is executed, the following steps occur: MRO entries are resolved; MRO entries are resolved; the appropriate metaclass is determined; the appropriate metaclass is determined; the class namespace is prepared; the class namespace is prepared; the class body is executed; the class body is executed; the class object is created. the class object is created. #### 3. 3. 3. 2. Resolving MRO entries¶ If a base that appears in a class definition is not an instance of type, then an mro_entries() method is searched on the base. If an mro_entries() method is found, the base is substituted with the result of a call to mro_entries() when creating the class. The method is called with the original bases tuple passed to the bases parameter, and must return a tuple of classes that will be used instead of the base. The returned tuple may be empty: in these cases, the original base is ignored. type __mro_entries__() __mro_entries__() __mro_entries__() See also types. resolve_bases() Dynamically resolve bases that are not instances of type. type types. get_original_bases() Retrieve a class’s “original bases” prior to modifications by mro_entries(). __mro_entries__() Core support for typing module and generic types. #### 3. 3. 3. 3. Determining the appropriate metaclass¶ The appropriate metaclass for a class definition is determined as follows: if no bases and no explicit metaclass are given, then type() is used; if no bases and no explicit metaclass are given, then type() is used; type() if an explicit metaclass is given and it is not an instance of type(), then it is used directly as the metaclass; if an explicit metaclass is given and it is not an instance of type(), then it is used directly as the metaclass; type() if an instance of type() is given as the explicit metaclass, or bases are defined, then the most derived metaclass is used. if an instance of type() is given as the explicit metaclass, or bases are defined, then the most derived metaclass is used. type() The most derived metaclass is selected from the explicitly specified metaclass (if any) and the metaclasses (i. e. type(cls)) of all specified base classes.",
  "title": "3. Data model.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 39,
  "start_char": 89878,
  "end_char": 92038,
  "token_count": 488,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_3a8659e1930e9366.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:56:42.729677"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_3a8659e1930e9366_fa73c6abaefd_chunk_039.txt"
}