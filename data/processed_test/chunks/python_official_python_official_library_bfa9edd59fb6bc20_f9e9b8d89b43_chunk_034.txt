s[start:end] -1 Like rfind() but raises ValueError when the substring sub is not found. rfind() ValueError Return the string right justified in a string of length width. Padding is done using the specified fillchar (default is an ASCII space). The original string is returned if width is less than or equal to len(s). len(s) Split the string at the last occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return a 3-tuple containing two empty strings, followed by the string itself. Return a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done, the rightmost ones. If sep is not specified or None, any whitespace string is a separator. Except for splitting from the right, rsplit() behaves like split() which is described in detail below. None rsplit() split() Return a copy of the string with trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a suffix; rather, all combinations of its values are stripped: None >>> ' spacious '. rstrip() ' spacious' >>> 'mississippi'. rstrip('ipz') 'mississ' See str. removesuffix() for a method that will remove a single suffix string rather than all of a set of characters. For example: str. removesuffix() >>> 'Monty Python'. rstrip(' Python') 'M' >>> 'Monty Python'. removesuffix(' Python') 'Monty' Return a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements). If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). maxsplit+1 -1 If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, '1,,2'. split(',') returns ['1', '', '2']). The sep argument may consist of multiple characters as a single delimiter (to split with multiple delimiters, use re. split()).