getencoding() Character Meaning 'r' 'r' open for reading (default) 'w' 'w' open for writing, truncating the file first 'x' 'x' open for exclusive creation, failing if the file already exists 'a' 'a' open for writing, appending to the end of file if it exists 'b' 'b' binary mode 't' 't' text mode (default) '+' '+' open for updating (reading and writing) The default mode is 'r' (open for reading text, a synonym of 'rt'). Modes 'w+' and 'w+b' open and truncate the file. Modes 'r+' and 'r+b' open the file with no truncation. 'r' 'rt' 'w+' 'w+b' 'r+' 'r+b' As mentioned in the Overview, Python distinguishes between binary and text I/O. Files opened in binary mode (including 'b' in the mode argument) return contents as bytes objects without any decoding. In text mode (the default, or when 't' is included in the mode argument), the contents of the file are returned as str, the bytes having been first decoded using a platform-dependent encoding or using the specified encoding if given. 'b' bytes 't' str Note Python doesn’t depend on the underlying operating system’s notion of text files; all the processing is done by Python itself, and is therefore platform-independent. buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable when writing in text mode), and an integer > 1 to indicate the size in bytes of a fixed-size chunk buffer. Note that specifying a buffer size this way applies for binary buffered I/O, but TextIOWrapper (i. e. , files opened with mode='r+') would have another buffering. To disable buffering in TextIOWrapper, consider using the write_through flag for io. TextIOWrapper. reconfigure(). When no buffering argument is given, the default buffering policy works as follows: TextIOWrapper mode='r+' TextIOWrapper write_through io. TextIOWrapper. reconfigure() Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device’s “block size” and falling back on io. DEFAULT_BUFFER_SIZE.