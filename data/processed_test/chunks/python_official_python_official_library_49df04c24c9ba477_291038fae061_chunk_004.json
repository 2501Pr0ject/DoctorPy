{
  "chunk_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_004",
  "original_doc_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061",
  "content": "sample(['red', 'blue'], counts=[4, 2], k=5) sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5) To choose a sample from a range of integers, use a range() object as an argument. This is especially fast and space efficient for sampling from a large population: sample(range(10000000), k=60). range() sample(range(10000000), k=60) If the sample size is larger than the population size, a ValueError is raised. ValueError Changed in version 3. 9: Added the counts parameter. Changed in version 3. 11: The population must be a sequence. Automatic conversion of sets to lists is no longer supported. ## Discrete distributions¶ The following function generates a discrete distribution. Binomial distribution. Return the number of successes for n independent trials with the probability of success in each trial being p: Mathematically equivalent to: sum(random() < p for i in range(n)) The number of trials n should be a non-negative integer. The probability of success p should be between 0. 0 <= p <= 1. 0. The result is an integer in the range 0 <= X <= n. 0. 0 <= p <= 1. 0 0 <= X <= n Added in version 3. 12. ## Real-valued distributions¶ The following functions generate specific real-valued distributions. Function parameters are named after the corresponding variables in the distribution’s equation, as used in common mathematical practice; most of these equations can be found in any statistics text. Return the next random floating-point number in the range 0. 0 <= X < 1. 0 0. 0 <= X < 1. 0 Return a random floating-point number N such that a <= N <= b for a <= b and b <= N <= a for b < a. a <= N <= b a <= b b <= N <= a b < a The end-point value b may or may not be included in the range depending on floating-point rounding in the expression a + (b-a) * random(). b a + (b-a) * random() Return a random floating-point number N such that low <= N <= high and with the specified mode between those bounds. The low and high bounds default to zero and one.",
  "title": "random — Generate pseudo-random numbers.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 4,
  "start_char": 9003,
  "end_char": 10970,
  "token_count": 492,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_49df04c24c9ba477.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.611902"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_004.txt"
}