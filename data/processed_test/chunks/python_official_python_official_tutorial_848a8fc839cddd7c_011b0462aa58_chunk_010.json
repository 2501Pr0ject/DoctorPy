{
  "chunk_id": "python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58_chunk_010",
  "original_doc_id": "python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58",
  "content": "methodname obj methodname append() result = result + [a] ## 4. 9. More on Defining Functions¶ It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined. ### 4. 9. 1. Default Argument Values¶ The most useful form is to specify a default value for one or more arguments. This creates a function that can be called with fewer arguments than it is defined to allow. For example: def ask_ok(prompt, retries=4, reminder='Please try again. '): while True: reply = input(prompt) if reply in {'y', 'ye', 'yes'}: return True if reply in {'n', 'no', 'nop', 'nope'}: return False retries = retries - 1 if retries < 0: raise ValueError('invalid user response') print(reminder) This function can be called in several ways: giving only the mandatory argument: ask_ok('Do you really want to quit. ') giving only the mandatory argument: ask_ok('Do you really want to quit. ') ask_ok('Do you really want to quit. ') giving one of the optional arguments: ask_ok('OK to overwrite the file. ', 2) giving one of the optional arguments: ask_ok('OK to overwrite the file. ', 2) ask_ok('OK to overwrite the file. ', 2) or even giving all arguments: ask_ok('OK to overwrite the file. ', 2, 'Come on, only yes or no. ') or even giving all arguments: ask_ok('OK to overwrite the file. ', 2, 'Come on, only yes or no. ') ask_ok('OK to overwrite the file. ', 2, 'Come on, only yes or no. ') This example also introduces the in keyword. This tests whether or not a sequence contains a certain value. in The default values are evaluated at the point of function definition in the defining scope, so that i = 5 def f(arg=i): print(arg) i = 6 f() will print 5. 5 Important warning: The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the arguments passed to it on subsequent calls: def f(a, L=[]): L.",
  "title": "4. More Control Flow Tools.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 10,
  "start_char": 19600,
  "end_char": 21587,
  "token_count": 497,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_848a8fc839cddd7c.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:37.613467"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58_chunk_010.txt"
}