{
  "chunk_id": "external_external_guides_cd1ed077dcaf1642_1f1c3dd548aa_chunk_011",
  "original_doc_id": "external_external_guides_cd1ed077dcaf1642_1f1c3dd548aa",
  "content": "code) except URLError as e: print('We failed to reach a server. ') print('Reason: ', e. reason) else: # everything is fine except HTTPError except URLError HTTPError from urllib. request import Request, urlopen from urllib. error import URLError req = Request(someurl) try: response = urlopen(req) except URLError as e: if hasattr(e, 'reason'): print('We failed to reach a server. ') print('Reason: ', e. reason) elif hasattr(e, 'code'): print('The server couldn\\'t fulfill the request. ') print('Error code: ', e. code) else: # everything is fine HTTPError info() geturl() urllib. response urlopen http. client. HTTPMessage urllib. request. OpenerDirector urlopen OpenerDirector. add_handler(some_handler_instance) build_opener build_opener install_opener opener urlopen open urlopen install_opener HTTPBasicAuthHandler WWW-Authenticate: SCHEME realm=\"REALM\" WWW-Authenticate: Basic realm=\"cPanel Users\" HTTPBasicAuthHandler HTTPBasicAuthHandler HTTPPasswordMgr HTTPPasswordMgrWithDefaultRealm None add_password # create a password manager password_mgr = urllib. request. HTTPPasswordMgrWithDefaultRealm() # Add the username and password. # If we knew the realm, we could use it instead of None. top_level_url = \" password_mgr. add_password(None, top_level_url, username, password) handler = urllib. request. HTTPBasicAuthHandler(password_mgr) # create \"opener\" (OpenerDirector instance) opener = urllib. request. build_opener(handler) # use the opener to fetch a URL opener. open(a_url) # Install the opener. # Now all calls to urllib. request. urlopen use our opener. urllib. request. install_opener(opener) HTTPBasicAuthHandler build_opener ProxyHandler http_proxy UnknownHandler HTTPHandler HTTPDefaultErrorHandler HTTPRedirectHandler FTPHandler FileHandler DataHandler HTTPErrorProcessor top_level_url \" \"example. com\" \"example. com:8080\" \"joe:password@example. com\" ProxyHandler ProxyHandler >>> proxy_support = urllib. request. ProxyHandler({}) >>> opener = urllib. request. build_opener(proxy_support) >>> urllib. request. install_opener(opener) urllib. request https HTTP_PROXY REQUEST_METHOD getproxies() http. client import socket import urllib.",
  "title": "HOWTO Fetch Internet Resources Using The urllib Package.13.5",
  "section": "external",
  "subsection": "guides",
  "chunk_index": 11,
  "start_char": 23615,
  "end_char": 25772,
  "token_count": 498,
  "metadata": {
    "original_file": "data/raw/documentation_test/external/external_guides_cd1ed077dcaf1642.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:39.200665"
  },
  "file_path": "data/processed_test/chunks/external_external_guides_cd1ed077dcaf1642_1f1c3dd548aa_chunk_011.txt"
}