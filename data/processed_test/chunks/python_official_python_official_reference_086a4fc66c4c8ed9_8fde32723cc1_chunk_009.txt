The returned value (if any) is used as an argument to construct StopIteration and becomes the StopIteration. value attribute. return StopIteration StopIteration StopIteration. value In an asynchronous generator function, an empty return statement indicates that the asynchronous generator is done and will cause StopAsyncIteration to be raised. A non-empty return statement is a syntax error in an asynchronous generator function. return StopAsyncIteration return ## 7. 7. The yield statement¶ yield yield_stmt ::= yield_expression yield_expression A yield statement is semantically equivalent to a yield expression. The yield statement can be used to omit the parentheses that would otherwise be required in the equivalent yield expression statement. For example, the yield statements yield yield yield <expr> yield from <expr> are equivalent to the yield expression statements (yield <expr>) (yield from <expr>) Yield expressions and statements are only used when defining a generator function, and are only used in the body of the generator function. Using yield in a function definition is sufficient to cause that definition to create a generator function instead of a normal function. yield For full details of yield semantics, refer to the Yield expressions section. yield ## 7. 8. The raise statement¶ raise raise_stmt ::= "raise" [expression ["from" expression]] expression expression If no expressions are present, raise re-raises the exception that is currently being handled, which is also known as the active exception. If there isn’t currently an active exception, a RuntimeError exception is raised indicating that this is an error. raise RuntimeError Otherwise, raise evaluates the first expression as the exception object. It must be either a subclass or an instance of BaseException. If it is a class, the exception instance will be obtained when needed by instantiating the class with no arguments. raise BaseException The type of the exception is the exception instance’s class, the value is the instance itself. A traceback object is normally created automatically when an exception is raised and attached to it as the traceback attribute. You can create an exception and set your own traceback in one step using the with_traceback() exception method (which returns the same exception instance, with its traceback set to its argument), like so: __traceback__ with_traceback() raise Exception("foo occurred"). with_traceback(tracebackobj) The from clause is used for exception chaining: if given, the second expression must be another exception class or instance.