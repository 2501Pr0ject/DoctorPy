{
  "chunk_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_036",
  "original_doc_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30",
  "content": "attr funcdef ::= [decorators] \"def\" funcname [type_params] \"(\" [parameter_list] \")\" [\"->\" expression] \":\" suite decorators ::= decorator+ decorator ::= \"@\" assignment_expression NEWLINE parameter_list ::= defparameter (\",\" defparameter)* \",\" \"/\" [\",\" [parameter_list_no_posonly]] | parameter_list_no_posonly parameter_list_no_posonly ::= defparameter (\",\" defparameter)* [\",\" [parameter_list_starargs]] | parameter_list_starargs parameter_list_starargs ::= \"*\" [star_parameter] (\",\" defparameter)* [\",\" [parameter_star_kwargs]] | \"*\" (\",\" defparameter)+ [\",\" [parameter_star_kwargs]] | parameter_star_kwargs parameter_star_kwargs ::= \"**\" parameter [\",\"] parameter ::= identifier [\":\" expression] star_parameter ::= identifier [\":\" [\"*\"] expression] defparameter ::= parameter [\"=\" expression] funcname ::= identifier decorators funcname type_params parameter_list expression suite decorator assignment_expression defparameter defparameter parameter_list_no_posonly parameter_list_no_posonly defparameter defparameter parameter_list_starargs parameter_list_starargs star_parameter defparameter parameter_star_kwargs defparameter parameter_star_kwargs parameter_star_kwargs parameter identifier expression identifier expression parameter expression identifier @f1(arg) @f2 def func(): pass def func(): pass func = f1(arg)(f2(func)) func assignment_expression __type_params__ = * None def whats_on_the_telly(penguin=None): if penguin is None: penguin = [] penguin. append(\"property of the zoo\") return penguin *identifier **identifier * *identifier / / : expression *identifier **identifier *identifier : *expression -> expression __annotations__ annotations __future__ *identifier : *expression def def def classdef ::= [decorators] \"class\" classname [type_params] [inheritance] \":\" suite inheritance ::= \"(\" [argument_list] \")\" classname ::= identifier decorators classname type_params inheritance suite argument_list identifier object class Foo: pass class Foo(object): pass __dict__ @f1(arg) @f2 class Foo: pass class Foo: pass Foo = f1(arg)(f2(Foo)) assignment_expression __type_params__ self. name = value self.",
  "title": "8. Compound statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 36,
  "start_char": 79200,
  "end_char": 81315,
  "token_count": 433,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_ec1b46183acd657b.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.396927"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_036.txt"
}