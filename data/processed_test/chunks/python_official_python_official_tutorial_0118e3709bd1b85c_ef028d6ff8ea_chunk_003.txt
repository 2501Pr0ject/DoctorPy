%d %b %Y is a %A on the %d day of %B. ") '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December. ' >>> # dates support calendar arithmetic >>> birthday = date(1964, 7, 31) >>> age = now - birthday >>> age. days 14368 ## 10. 9. Data Compression¶ Common data archiving and compression formats are directly supported by modules including: zlib, gzip, bz2, lzma, zipfile and tarfile. zlib gzip bz2 lzma zipfile tarfile >>> import zlib >>> s = b'witch which has which witches wrist watch' >>> len(s) 41 >>> t = zlib. compress(s) >>> len(t) 37 >>> zlib. decompress(t) b'witch which has which witches wrist watch' >>> zlib. crc32(s) 226805979 ## 10. 10. Performance Measurement¶ Some Python users develop a deep interest in knowing the relative performance of different approaches to the same problem. Python provides a measurement tool that answers those questions immediately. For example, it may be tempting to use the tuple packing and unpacking feature instead of the traditional approach to swapping arguments. The timeit module quickly demonstrates a modest performance advantage: timeit >>> from timeit import Timer >>> Timer('t=a; a=b; b=t', 'a=1; b=2'). timeit() 0. 57535828626024577 >>> Timer('a,b = b,a', 'a=1; b=2'). timeit() 0. 54962537085770791 In contrast to timeit’s fine level of granularity, the profile and pstats modules provide tools for identifying time critical sections in larger blocks of code. timeit profile pstats ## 10. 11. Quality Control¶ One approach for developing high quality software is to write tests for each function as it is developed and to run those tests frequently during the development process. The doctest module provides a tool for scanning a module and validating tests embedded in a program’s docstrings. Test construction is as simple as cutting-and-pasting a typical call along with its results into the docstring.