array('i', [1,2,3,4,5]) >>> m = memoryview(a) >>> len(m) 5 >>> m. nbytes 20 >>> y = m[::2] >>> len(y) 3 >>> y. nbytes 12 >>> len(y. tobytes()) 12 >>> import struct >>> buf = struct. pack("d"*12, *[1. 5*x for x in range(12)]) >>> x = memoryview(buf) >>> y = x. cast('d', shape=[3,4]) >>> y. tolist() [[0. 0, 1. 5, 3. 0, 4. 5], [6. 0, 7. 5, 9. 0, 10. 5], [12. 0, 13. 5, 15. 0, 16. 5]] >>> len(y) 3 >>> y. nbytes 96 struct tolist() 'B' memoryview(b'abc')[0] == b'abc'[0] == 97 >>> import array, struct >>> m = memoryview(array. array('H', [32000, 32001, 32002])) >>> m. itemsize 2 >>> m[0] 32000 >>> struct. calcsize('H') == m. itemsize True ndim None ndim None set frozenset dict list tuple collections x in set len(set) for x in set set frozenset set add() remove() frozenset {'jack', 'sjoerd'} set frozenset {'jack', 'sjoerd'} {c for c in 'abracadabra' if c not in 'abc'} set() set('foobar') set(['a', 'b', 'foo']) set frozenset True set <= other and set. = other set >= other and set. = other union() intersection() difference() symmetric_difference() issubset() issuperset() set('abc') & 'cbs' set('abc'). intersection('cbs') set frozenset set frozenset set('abc') == frozenset('abc') True set('abc') in set([frozenset('abc')]) False a<b a==b a>b list.