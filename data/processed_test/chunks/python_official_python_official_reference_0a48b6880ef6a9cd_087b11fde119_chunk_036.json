{
  "chunk_id": "python_official_python_official_reference_0a48b6880ef6a9cd_087b11fde119_chunk_036",
  "original_doc_id": "python_official_python_official_reference_0a48b6880ef6a9cd_087b11fde119",
  "content": "bar __f from spam import __f __spam Foo _Foo __Foo _Foo__spam __spam _ __ literal ::= stringliteral | bytesliteral | integer | floatnumber | imagnumber stringliteral bytesliteral integer floatnumber imagnumber parenth_form ::= \"(\" [starred_expression] \")\" starred_expression comprehension ::= assignment_expression comp_for comp_for ::= [\"async\"] \"for\" target_list \"in\" or_test [comp_iter] comp_iter ::= comp_for | comp_if comp_if ::= \"if\" or_test [comp_iter] assignment_expression comp_for target_list or_test comp_iter comp_for comp_if or_test comp_iter for for if for if for for for for [x*y for x in range(10) for y in range(x, x+10)] yield yield from async def async for async def for async for for async for await async for await for yield yield from list_display ::= \"[\" [flexible_expression_list | comprehension] \"]\" flexible_expression_list comprehension set_display ::= \"{\" (flexible_expression_list | comprehension) \"}\" flexible_expression_list comprehension {} dict_display ::= \"{\" [dict_item_list | dict_comprehension] \"}\" dict_item_list ::= dict_item (\",\" dict_item)* [\",\"] dict_item ::= expression \":\" expression | \"**\" or_expr dict_comprehension ::= expression \":\" expression comp_for dict_item_list dict_comprehension dict_item dict_item expression expression or_expr expression expression comp_for ** generator_expression ::= \"(\" expression comp_for \")\" expression comp_for __next__() for for for (x*y for x in range(10) for y in range(x, x+10)) yield yield from async for await async def yield yield from yield_atom ::= \"(\" yield_expression \")\" yield_from ::= \"yield\" \"from\" expression yield_expression ::= \"yield\" yield_list | yield_from yield_expression expression yield_list yield_from async def def gen(): # defines a generator function yield 123 async def agen(): # defines an asynchronous generator function yield 123 yield yield_list None yield_list __next__() for next() None send() try close() finally yield from <expr> send() throw() send() AttributeError TypeError throw() value StopIteration StopIteration yield from <expr> yield yield_from ValueError __next__() None yield_list __next__() StopIteration for next() send() StopIteration send() None StopIteration raise __traceback__ GeneratorExit close() GeneratorExit close() None RuntimeError close() None close() >>> def echo(value=None):.",
  "title": "6. Expressions.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 36,
  "start_char": 78457,
  "end_char": 80779,
  "token_count": 493,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_0a48b6880ef6a9cd.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:08.601625"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_0a48b6880ef6a9cd_087b11fde119_chunk_036.txt"
}