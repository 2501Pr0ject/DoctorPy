Representation Description \n \n Line Feed \r \r Carriage Return \r\n \r\n Carriage Return + Line Feed \v or \x0b \v \x0b Line Tabulation \f or \x0c \f \x0c Form Feed \x1c \x1c File Separator \x1d \x1d Group Separator \x1e \x1e Record Separator \x85 \x85 Next Line (C1 Control Code) \u2028 \u2028 Line Separator \u2029 \u2029 Paragraph Separator Changed in version 3. 2: \v and \f added to list of line boundaries. \v \f For example: >>> 'ab c\n\nde fg\rkl\r\n'. splitlines() ['ab c', '', 'de fg', 'kl'] >>> 'ab c\n\nde fg\rkl\r\n'. splitlines(keepends=True) ['ab c\n', '\n', 'de fg\r', 'kl\r\n'] Unlike split() when a delimiter string sep is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line: split() >>> "". splitlines() [] >>> "One line\n". splitlines() ['One line'] For comparison, split('\n') gives: split('\n') >>> ''. split('\n') [''] >>> 'Two lines\n'. split('\n') ['Two lines', ''] Return True if string starts with the prefix, otherwise return False. prefix can also be a tuple of prefixes to look for. With optional start, test string beginning at that position. With optional end, stop comparing string at that position. True False Return a copy of the string with the leading and trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a prefix or suffix; rather, all combinations of its values are stripped: None >>> ' spacious '. strip() 'spacious' >>> 'www. example. com'. strip('cmowz. ') 'example' The outermost leading and trailing chars argument values are stripped from the string. Characters are removed from the leading end until reaching a string character that is not contained in the set of characters in chars. A similar action takes place on the trailing end.