\ [ \ \[ \\ Some of the special sequences beginning with '\' represent predefined sets of characters that are often useful, such as the set of digits, the set of letters, or the set of anything that isn’t whitespace. '\' Let’s take an example: \w matches any alphanumeric character. If the regex pattern is expressed in bytes, this is equivalent to the class [a-zA-Z0-9_]. If the regex pattern is a string, \w will match all the characters marked as letters in the Unicode database provided by the unicodedata module. You can use the more restricted definition of \w in a string pattern by supplying the re. ASCII flag when compiling the regular expression. \w [a-zA-Z0-9_] \w unicodedata \w re. ASCII The following list of special sequences isn’t complete. For a complete list of sequences and expanded class definitions for Unicode string patterns, see the last part of Regular Expression Syntax in the Standard Library reference. In general, the Unicode versions match any character that’s in the appropriate category in the Unicode database. \d Matches any decimal digit; this is equivalent to the class [0-9]. [0-9] \D Matches any non-digit character; this is equivalent to the class [^0-9]. [^0-9] \s Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v]. [ \t\n\r\f\v] \S Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v]. [^ \t\n\r\f\v] \w Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_]. [a-zA-Z0-9_] \W Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_]. [^a-zA-Z0-9_] These sequences can be included inside a character class. For example, [\s,. ] is a character class that will match any whitespace character, or ',' or '. '. [\s,. ] ',' '. ' The final metacharacter in this section is. It matches anything except a newline character, and there’s an alternate mode (re. DOTALL) where it will match even a newline. is often used where you want to match “any character”. re. DOTALL.