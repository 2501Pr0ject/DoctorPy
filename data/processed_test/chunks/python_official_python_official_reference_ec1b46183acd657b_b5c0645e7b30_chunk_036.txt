attr funcdef ::= [decorators] "def" funcname [type_params] "(" [parameter_list] ")" ["->" expression] ":" suite decorators ::= decorator+ decorator ::= "@" assignment_expression NEWLINE parameter_list ::= defparameter ("," defparameter)* "," "/" ["," [parameter_list_no_posonly]] | parameter_list_no_posonly parameter_list_no_posonly ::= defparameter ("," defparameter)* ["," [parameter_list_starargs]] | parameter_list_starargs parameter_list_starargs ::= "*" [star_parameter] ("," defparameter)* ["," [parameter_star_kwargs]] | "*" ("," defparameter)+ ["," [parameter_star_kwargs]] | parameter_star_kwargs parameter_star_kwargs ::= "**" parameter [","] parameter ::= identifier [":" expression] star_parameter ::= identifier [":" ["*"] expression] defparameter ::= parameter ["=" expression] funcname ::= identifier decorators funcname type_params parameter_list expression suite decorator assignment_expression defparameter defparameter parameter_list_no_posonly parameter_list_no_posonly defparameter defparameter parameter_list_starargs parameter_list_starargs star_parameter defparameter parameter_star_kwargs defparameter parameter_star_kwargs parameter_star_kwargs parameter identifier expression identifier expression parameter expression identifier @f1(arg) @f2 def func(): pass def func(): pass func = f1(arg)(f2(func)) func assignment_expression __type_params__ = * None def whats_on_the_telly(penguin=None): if penguin is None: penguin = [] penguin. append("property of the zoo") return penguin *identifier **identifier * *identifier / / : expression *identifier **identifier *identifier : *expression -> expression __annotations__ annotations __future__ *identifier : *expression def def def classdef ::= [decorators] "class" classname [type_params] [inheritance] ":" suite inheritance ::= "(" [argument_list] ")" classname ::= identifier decorators classname type_params inheritance suite argument_list identifier object class Foo: pass class Foo(object): pass __dict__ @f1(arg) @f2 class Foo: pass class Foo: pass Foo = f1(arg)(f2(Foo)) assignment_expression __type_params__ self. name = value self.