{
  "chunk_id": "python_official_python_official_library_482e94da82fc8f58_4a9e7712fa00_chunk_013",
  "original_doc_id": "python_official_python_official_library_482e94da82fc8f58_4a9e7712fa00",
  "content": "__cause__, rest. __notes__ (MyGroup('eg', [TypeError(2)]), Exception('context'), Exception('cause'), ['a note']) >>> exc. __traceback__ is match. __traceback__ is rest. __traceback__ True Note that BaseExceptionGroup defines new(), so subclasses that need a different constructor signature need to override that rather than init(). For example, the following defines an exception group subclass which accepts an exit_code and and constructs the groupâ€™s message from it. BaseExceptionGroup __new__() __init__() class Errors(ExceptionGroup): def __new__(cls, errors, exit_code): self = super(). __new__(Errors, f\"exit code: {exit_code}\", errors) self. exit_code = exit_code return self def derive(self, excs): return Errors(excs, self. exit_code) Like ExceptionGroup, any subclass of BaseExceptionGroup which is also a subclass of Exception can only wrap instances of Exception. ExceptionGroup BaseExceptionGroup Exception Exception Added in version 3. 11.",
  "title": "Built-in Exceptions.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 13,
  "start_char": 31470,
  "end_char": 32424,
  "token_count": 214,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_482e94da82fc8f58.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:34.397136"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_482e94da82fc8f58_4a9e7712fa00_chunk_013.txt"
}