default_name = default_name class AustralianPhilosopher(Philosopher, default_name="Bruce"): pass The default implementation object. init_subclass does nothing, but raises an error if it is called with any arguments. object. __init_subclass__ Note The metaclass hint metaclass is consumed by the rest of the type machinery, and is never passed to init_subclass implementations. The actual metaclass (rather than the explicit hint) can be accessed as type(cls). metaclass __init_subclass__ type(cls) Added in version 3. 6. When a class is created, type. new() scans the class variables and makes callbacks to those with a set_name() hook. type. __new__() __set_name__() Automatically called at the time the owning class owner is created. The object has been assigned to name in that class: class A: x = C() # Automatically calls: x. __set_name__(A, 'x') If the class variable is assigned after the class is created, set_name() will not be called automatically. If needed, set_name() can be called directly: __set_name__() __set_name__() class A: pass c = C() A. x = c # The hook is not called c. __set_name__(A, 'x') # Manually invoke the hook See Creating the class object for more details. Added in version 3. 6. #### 3. 3. 3. 1. MetaclassesÂ¶ By default, classes are constructed using type(). The class body is executed in a new namespace and the class name is bound locally to the result of type(name, bases, namespace). type() type(name, bases, namespace) The class creation process can be customized by passing the metaclass keyword argument in the class definition line, or by inheriting from an existing class that included such an argument. In the following example, both MyClass and MySubclass are instances of Meta: metaclass MyClass MySubclass Meta class Meta(type): pass class MyClass(metaclass=Meta): pass class MySubclass(MyClass): pass Any other keyword arguments that are specified in the class definition are passed through to all metaclass operations described below.