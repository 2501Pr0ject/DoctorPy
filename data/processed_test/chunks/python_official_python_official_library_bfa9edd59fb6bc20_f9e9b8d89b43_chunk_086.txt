exec() eval() See The standard type hierarchy for more information. ### Type Objects¶ Type objects represent the various object types. An object’s type is accessed by the built-in function type(). There are no special operations on types. The standard module types defines names for all standard built-in types. type() types Types are written like this:. <class 'int'> ### The Null Object¶ This object is returned by functions that don’t explicitly return a value. It supports no special operations. There is exactly one null object, named None (a built-in name). type(None)() produces the same singleton. None type(None)() It is written as None. None ### The Ellipsis Object¶ This object is commonly used by slicing (see Slicings). It supports no special operations. There is exactly one ellipsis object, named Ellipsis (a built-in name). type(Ellipsis)() produces the Ellipsis singleton. Ellipsis type(Ellipsis)() Ellipsis It is written as Ellipsis or. Ellipsis. ### The NotImplemented Object¶ This object is returned from comparisons and binary operations when they are asked to operate on types they don’t support. See Comparisons for more information. There is exactly one NotImplemented object. type(NotImplemented)() produces the singleton instance. NotImplemented type(NotImplemented)() It is written as NotImplemented. NotImplemented ### Internal Objects¶ See The standard type hierarchy for this information. It describes stack frame objects, traceback objects, and slice objects. ## Special Attributes¶ The implementation adds a few special read-only attributes to several object types, where they are relevant. Some of these are not reported by the dir() built-in function. dir() The name of the class, function, method, descriptor, or generator instance. The qualified name of the class, function, method, descriptor, or generator instance. Added in version 3. 3. The name of the module in which a class or function was defined. The documentation string of a class or function, or None if undefined. None The type parameters of generic classes, functions, and type aliases. For classes and functions that are not generic, this will be an empty tuple. Added in version 3. 12. ## Integer string conversion length limitation¶ CPython has a global limit for converting between int and str to mitigate denial of service attacks. This limit only applies to decimal or other non-power-of-two number bases.