{
  "chunk_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_035",
  "original_doc_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30",
  "content": "global nonlocal NAME NAME = <subject> wildcard_pattern ::= '_' _ match guard case _ value_pattern ::= attr attr ::= name_or_attr \". \" NAME name_or_attr ::= attr | NAME attr name_or_attr attr == NAME1. NAME2 <subject> == NAME1. NAME2 group_pattern ::= \"(\" pattern \")\" pattern (P) P sequence_pattern ::= \"[\" [maybe_sequence_pattern] \"]\" | \"(\" [open_sequence_pattern] \")\" open_sequence_pattern ::= maybe_star_pattern \",\" [maybe_sequence_pattern] maybe_sequence_pattern ::= \",\". maybe_star_pattern+ \",\". maybe_star_pattern ::= star_pattern | pattern star_pattern ::= \"*\" (capture_pattern | wildcard_pattern) maybe_sequence_pattern open_sequence_pattern maybe_star_pattern maybe_sequence_pattern maybe_star_pattern star_pattern pattern capture_pattern wildcard_pattern (. ) [. ] (3 | 4) [3 | 4] str bytes bytearray len() __len__() [P1, P2, P3, , P<N>] <subject> len(subject) == <N> P1 <subject>[0] P2 <subject>[1] mapping_pattern ::= \"{\" [items_pattern] \"}\" items_pattern ::= \",\". key_value_pattern+ \",\". key_value_pattern ::= (literal_pattern | value_pattern) \":\" pattern | double_star_pattern double_star_pattern ::= \"**\" capture_pattern items_pattern key_value_pattern literal_pattern value_pattern pattern double_star_pattern capture_pattern SyntaxError ValueError SyntaxError ValueError get() __missing__() __getitem__() {KEY1: P1, KEY2: P2,. } <subject> KEY1 in <subject> P1 <subject>[KEY1] class_pattern ::= name_or_attr \"(\" [pattern_arguments \",\". ] \")\" pattern_arguments ::= positional_patterns [\",\" keyword_patterns] | keyword_patterns positional_patterns ::= \",\". pattern+ keyword_patterns ::= \",\". keyword_pattern+ keyword_pattern ::= NAME \"=\" pattern name_or_attr pattern_arguments positional_patterns keyword_patterns keyword_patterns pattern keyword_pattern pattern name_or_attr type TypeError name_or_attr isinstance() AttributeError AttributeError __match_args__ name_or_attr getattr(cls, \"__match_args__\", ()) TypeError len(cls. __match_args__) TypeError i __match_args__[i] __match_args__[i] TypeError TypeError bool bytearray bytes dict float frozenset int list set str tuple int(0|1) 0 0. 0 CLS(P1, attr=P2) isinstance(<subject>, CLS) P1 CLS. __match_args__ attr=P2 hasattr(<subject>, \"attr\") P2 <subject>.",
  "title": "8. Compound statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 35,
  "start_char": 76978,
  "end_char": 79200,
  "token_count": 501,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_ec1b46183acd657b.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.396134"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_035.txt"
}