{
  "chunk_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_002",
  "original_doc_id": "python_official_python_official_library_49df04c24c9ba477_291038fae061",
  "content": "randrange(start=100) randrange(0, 100, 1) Changed in version 3. 2: randrange() is more sophisticated about producing equally distributed values. Formerly it used a style like int(random()n) which could produce slightly uneven distributions. randrange() int(random()*n) Changed in version 3. 12: Automatic conversion of non-integer types is no longer supported. Calls such as randrange(10. 0) and randrange(Fraction(10, 1)) now raise a TypeError. randrange(10. 0) randrange(Fraction(10, 1)) TypeError Return a random integer N such that a <= N <= b. Alias for randrange(a, b+1). a <= N <= b randrange(a, b+1) Returns a non-negative Python integer with k random bits. This method is supplied with the Mersenne Twister generator and some other generators may also provide it as an optional part of the API. When available, getrandbits() enables randrange() to handle arbitrarily large ranges. getrandbits() randrange() Changed in version 3. 9: This method now accepts zero for k. ## Functions for sequences¶ Return a random element from the non-empty sequence seq. If seq is empty, raises IndexError. IndexError Return a k sized list of elements chosen from the population with replacement. If the population is empty, raises IndexError. IndexError If a weights sequence is specified, selections are made according to the relative weights. Alternatively, if a cum_weights sequence is given, the selections are made according to the cumulative weights (perhaps computed using itertools. accumulate()). For example, the relative weights [10, 5, 30, 5] are equivalent to the cumulative weights [10, 15, 45, 50]. Internally, the relative weights are converted to cumulative weights before making selections, so supplying the cumulative weights saves work. itertools. accumulate() [10, 5, 30, 5] [10, 15, 45, 50] If neither weights nor cum_weights are specified, selections are made with equal probability. If a weights sequence is supplied, it must be the same length as the population sequence. It is a TypeError to specify both weights and cum_weights.",
  "title": "random — Generate pseudo-random numbers.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 2,
  "start_char": 4712,
  "end_char": 6759,
  "token_count": 473,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_49df04c24c9ba477.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.610076"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_49df04c24c9ba477_291038fae061_chunk_002.txt"
}