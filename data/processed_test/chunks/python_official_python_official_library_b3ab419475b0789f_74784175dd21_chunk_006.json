{
  "chunk_id": "python_official_python_official_library_b3ab419475b0789f_74784175dd21_chunk_006",
  "original_doc_id": "python_official_python_official_library_b3ab419475b0789f_74784175dd21",
  "content": "gz'). stem 'library. tar' >>> PurePosixPath('my/library. tar'). stem 'library' >>> PurePosixPath('my/library'). stem 'library' Return a string representation of the path with forward slashes (/): / >>> p = PureWindowsPath('c:\\\\windows') >>> str(p) 'c:\\\\windows' >>> p. as_posix() 'c:/windows' Return whether the path is absolute or not. A path is considered absolute if it has both a root and (if the flavour allows) a drive: >>> PurePosixPath('/a/b'). is_absolute() True >>> PurePosixPath('a/b'). is_absolute() False >>> PureWindowsPath('c:/a/b'). is_absolute() True >>> PureWindowsPath('/a/b'). is_absolute() False >>> PureWindowsPath('c:'). is_absolute() False >>> PureWindowsPath('//some/share'). is_absolute() True Return whether or not this path is relative to the other path. >>> p = PurePath('/etc/passwd') >>> p. is_relative_to('/etc') True >>> p. is_relative_to('/usr') False This method is string-based; it neither accesses the filesystem nor treats “. ” segments specially. The following code is equivalent:. >>> u = PurePath('/usr') >>> u == p or u in p. parents False Added in version 3. 9. Deprecated since version 3. 12, will be removed in version 3. 14: Passing additional arguments is deprecated; if supplied, they are joined with other. With PureWindowsPath, return True if the path is considered reserved under Windows, False otherwise. With PurePosixPath, False is always returned. PureWindowsPath True False PurePosixPath False Changed in version 3. 13: Windows path names that contain a colon, or end with a dot or a space, are considered reserved. UNC paths may be reserved. Deprecated since version 3. 13, will be removed in version 3. 15: This method is deprecated; use os. path. isreserved() to detect reserved paths on Windows. os. path. isreserved() Calling this method is equivalent to combining the path with each of the given pathsegments in turn: >>> PurePosixPath('/etc'). joinpath('passwd') PurePosixPath('/etc/passwd') >>> PurePosixPath('/etc').",
  "title": "pathlib — Object-oriented filesystem paths.13.5",
  "section": "python_official",
  "subsection": "library",
  "chunk_index": 6,
  "start_char": 11547,
  "end_char": 13528,
  "token_count": 490,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_library_b3ab419475b0789f.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:32.490424"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_library_b3ab419475b0789f_74784175dd21_chunk_006.txt"
}