As such, there is no need for it to be decorated with @classmethod when it is defined. __class_getitem__() @classmethod #### 3. 3. 5. 1. The purpose of class_getitem¶ The purpose of class_getitem() is to allow runtime parameterization of standard-library generic classes in order to more easily apply type hints to these classes. __class_getitem__() To implement custom generic classes that can be parameterized at runtime and understood by static type-checkers, users should either inherit from a standard library class that already implements class_getitem(), or inherit from typing. Generic, which has its own implementation of class_getitem(). __class_getitem__() typing. Generic __class_getitem__() Custom implementations of class_getitem() on classes defined outside of the standard library may not be understood by third-party type-checkers such as mypy. Using class_getitem() on any class for purposes other than type hinting is discouraged. __class_getitem__() __class_getitem__() #### 3. 3. 5. 2. class_getitem versus getitem¶ Usually, the subscription of an object using square brackets will call the getitem() instance method defined on the object’s class. However, if the object being subscribed is itself a class, the class method class_getitem() may be called instead. class_getitem() should return a GenericAlias object if it is properly defined. __getitem__() __class_getitem__() __class_getitem__() Presented with the expression obj[x], the Python interpreter follows something like the following process to decide whether getitem() or class_getitem() should be called: obj[x] __getitem__() __class_getitem__() from inspect import isclass def subscribe(obj, x): """Return the result of the expression 'obj[x]'""" class_of_obj = type(obj) # If the class of obj defines __getitem__, # call class_of_obj. __getitem__(obj, x) if hasattr(class_of_obj, '__getitem__'): return class_of_obj. __getitem__(obj, x) # Else, if obj is a class and defines __class_getitem__, # call obj. __class_getitem__(x) elif isclass(obj) and hasattr(obj, '__class_getitem__'): return obj. __class_getitem__(x) # Else, raise an exception else: raise TypeError( f"'{class_of_obj.