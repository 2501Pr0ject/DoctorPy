{
  "chunk_id": "python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58_chunk_018",
  "original_doc_id": "python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58",
  "content": "Here is an example of a multi-line docstring: >>> def my_function():. \"\"\"Do nothing, but document it. No, really, it doesn't do anything. \"\"\". pass. >>> print(my_function. __doc__) Do nothing, but document it. No, really, it doesn't do anything. ### 4. 9. 8. Function Annotations¶ Function annotations are completely optional metadata information about the types used by user-defined functions (see PEP 3107 and PEP 484 for more information). Annotations are stored in the annotations attribute of the function as a dictionary and have no effect on any other part of the function. Parameter annotations are defined by a colon after the parameter name, followed by an expression evaluating to the value of the annotation. Return annotations are defined by a literal ->, followed by an expression, between the parameter list and the colon denoting the end of the def statement. The following example has a required argument, an optional argument, and the return value annotated: __annotations__ -> def >>> def f(ham: str, eggs: str = 'eggs') -> str:. print(\"Annotations:\", f. __annotations__). print(\"Arguments:\", ham, eggs). return ham + ' and ' + eggs. >>> f('spam') Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>} Arguments: spam eggs 'spam and eggs' ## 4. 10. Intermezzo: Coding Style¶ Now that you are about to write longer, more complex pieces of Python, it is a good time to talk about coding style. Most languages can be written (or more concise, formatted) in different styles; some are more readable than others. Making it easy for others to read your code is always a good idea, and adopting a nice coding style helps tremendously for that. For Python, PEP 8 has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. Every Python developer should read it at some point; here are the most important points extracted for you: Use 4-space indentation, and no tabs. 4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out. Use 4-space indentation, and no tabs.",
  "title": "4. More Control Flow Tools.13.5",
  "section": "python_official",
  "subsection": "tutorial",
  "chunk_index": 18,
  "start_char": 35514,
  "end_char": 37697,
  "token_count": 494,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_tutorial_848a8fc839cddd7c.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:37.624262"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_tutorial_848a8fc839cddd7c_011b0462aa58_chunk_018.txt"
}