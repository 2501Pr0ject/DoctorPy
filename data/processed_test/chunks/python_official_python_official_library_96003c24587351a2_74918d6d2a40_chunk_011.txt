If globals and locals are given, they are used for the global and local variables, respectively. If provided, locals can be any mapping object. Remember that at the module level, globals and locals are the same dictionary. Note When exec gets two separate objects as globals and locals, the code will be executed as if it were embedded in a class definition. This means functions and classes defined in the executed code will not be able to access variables assigned at the top level (as the “top level” variables are treated as class variables in a class definition). exec If the globals dictionary does not contain a value for the key builtins, a reference to the dictionary of the built-in module builtins is inserted under that key. That way you can control what builtins are available to the executed code by inserting your own builtins dictionary into globals before passing it to exec(). __builtins__ builtins __builtins__ exec() The closure argument specifies a closure–a tuple of cellvars. It’s only valid when the object is a code object containing free (closure) variables. The length of the tuple must exactly match the length of the code object’s co_freevars attribute. co_freevars Raises an auditing event exec with the code object as the argument. Code compilation events may also be raised. Raises an auditing event exec with the code object as the argument. Code compilation events may also be raised. exec Note The built-in functions globals() and locals() return the current global and local namespace, respectively, which may be useful to pass around for use as the second and third argument to exec(). globals() locals() exec() Note The default locals act as described for function locals() below. Pass an explicit locals dictionary if you need to see effects of the code on locals after function exec() returns. locals() exec() Changed in version 3. 11: Added the closure parameter. Changed in version 3. 13: The globals and locals arguments can now be passed as keywords. Changed in version 3. 13: The semantics of the default locals namespace have been adjusted as described for the locals() builtin. locals() Construct an iterator from those elements of iterable for which function is true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.