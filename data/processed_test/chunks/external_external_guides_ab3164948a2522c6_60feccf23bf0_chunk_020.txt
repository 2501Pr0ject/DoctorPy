logThreads False Current process ID (os. getpid()) os. getpid() Set logging. logProcesses to False. logging. logProcesses False Current process name when using multiprocessing to manage multiple processes. multiprocessing Set logging. logMultiprocessing to False. logging. logMultiprocessing False Current asyncio. Task name when using asyncio. asyncio. Task asyncio Set logging. logAsyncioTasks to False. logging. logAsyncioTasks False Also note that the core logging module only includes the basic handlers. If you don’t import logging. handlers and logging. config, they won’t take up any memory. logging. handlers logging. config ## Other resources¶ See also logging API reference for the logging module. logging. config Configuration API for the logging module. logging. handlers Useful handlers included with the logging module. A logging cookbook ### Table of Contents Logging HOWTO Basic Logging Tutorial When to use logging A simple example Logging to a file Logging variable data Changing the format of displayed messages Displaying the date/time in messages Next Steps Advanced Logging Tutorial Logging Flow Loggers Handlers Formatters Configuring Logging What happens if no configuration is provided Configuring Logging for a Library Logging Levels Custom Levels Useful Handlers Exceptions raised during logging Using arbitrary objects as messages Optimization Other resources Basic Logging Tutorial When to use logging A simple example Logging to a file Logging variable data Changing the format of displayed messages Displaying the date/time in messages Next Steps When to use logging A simple example Logging to a file Logging variable data Changing the format of displayed messages Displaying the date/time in messages Next Steps Advanced Logging Tutorial Logging Flow Loggers Handlers Formatters Configuring Logging What happens if no configuration is provided Configuring Logging for a Library Logging Flow Loggers Handlers Formatters Configuring Logging What happens if no configuration is provided Configuring Logging for a Library Logging Levels Custom Levels Custom Levels Useful Handlers Exceptions raised during logging Using arbitrary objects as messages Optimization Other resources #### Previous topic Functional Programming HOWTO #### Next topic Logging Cookbook ### This page Report a bug Show source logger = getLogger(__name__) debug() info() warning() error() critical() print() info() debug() warnings. warn() warning() error() exception() critical() DEBUG INFO WARNING ERROR CRITICAL WARNING import logging logging. warning('Watch out. ') # will print a message to the console logging. info('I told you so') # will not print anything WARNING:root:Watch out. INFO WARNING logging logging. debug basicConfig() import logging logger = logging. getLogger(__name__) logging.