{
  "chunk_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_033",
  "original_doc_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30",
  "content": "except:. print(repr(sys. exception())). print(repr(sys. exception())). TypeError() ValueError() TypeError() >>> print(sys. exception()) None except* except* ExceptionGroup except except* except* >>> try:. raise ExceptionGroup(\"eg\",. [ValueError(1), TypeError(2), OSError(3), OSError(4)]). except* TypeError as e:. print(f'caught {type(e)} with nested {e. exceptions}'). except* OSError as e:. print(f'caught {type(e)} with nested {e. exceptions}'). caught <class 'ExceptionGroup'> with nested (TypeError(2),) caught <class 'ExceptionGroup'> with nested (OSError(3), OSError(4)) + Exception Group Traceback (most recent call last): | File \"<stdin>\", line 2, in <module> | ExceptionGroup: eg +-+---------------- 1 ---------------- | ValueError: 1 +------------------------------------ except* except* except* >>> try:. raise BlockingIOError. except* BlockingIOError as e:. print(repr(e)). ExceptionGroup('', (BlockingIOError())) except* except*: except except* try break continue return except* else else try return continue break else except finally finally try except else finally finally finally finally return break continue >>> def f():. try:. 1/0. finally:. return 42. >>> f() 42 finally return break continue try try finally finally return finally return finally >>> def foo():. try:. return 'try'. finally:. return 'finally'. >>> foo() 'finally' continue finally with with try except finally with_stmt ::= \"with\" ( \"(\" with_stmt_contents \",\". \")\" | with_stmt_contents ) \":\" suite with_stmt_contents ::= with_item (\",\" with_item)* with_item ::= expression [\"as\" target] with_stmt_contents with_stmt_contents suite with_item with_item expression target with with_item __enter__() __exit__() __enter__() with __enter__() with __enter__() __exit__() __exit__() __exit__() None __exit__() with __exit__() with EXPRESSION as TARGET: SUITE manager = (EXPRESSION) enter = type(manager). __enter__ exit = type(manager). __exit__ value = enter(manager) hit_except = False try: TARGET = value SUITE except: hit_except = True if not exit(manager, *sys.",
  "title": "8. Compound statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 33,
  "start_char": 72917,
  "end_char": 74963,
  "token_count": 474,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_ec1b46183acd657b.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.394464"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_033.txt"
}