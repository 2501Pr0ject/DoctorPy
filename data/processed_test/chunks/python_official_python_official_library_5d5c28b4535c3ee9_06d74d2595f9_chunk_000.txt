json — JSON encoder and decoder. 13. 5 Source:  json — JSON encoder and decoder¶ json Source code: Lib/json/init. py JSON (JavaScript Object Notation), specified by RFC 7159 (which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript object literal syntax (although it is not a strict subset of JavaScript [1] ). Note The term “object” in the context of JSON processing in Python can be ambiguous. All values in Python are objects. In JSON, an object refers to any data wrapped in curly braces, similar to a Python dictionary. Warning Be cautious when parsing JSON data from untrusted sources. A malicious JSON string may cause the decoder to consume considerable CPU and memory resources. Limiting the size of data to be parsed is recommended. This module exposes an API familiar to users of the standard library marshal and pickle modules. marshal pickle Encoding basic Python object hierarchies: >>> import json >>> json. dumps(['foo', {'bar': ('baz', None, 1. 0, 2)}]) '["foo", {"bar": ["baz", null, 1. 0, 2]}]' >>> print(json. dumps("\"foo\bar")) "\"foo\bar" >>> print(json. dumps('\u1234')) "\u1234" >>> print(json. dumps('\\')) "\\" >>> print(json. dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True)) {"a": 0, "b": 0, "c": 0} >>> from io import StringIO >>> io = StringIO() >>> json. dump(['streaming API'], io) >>> io. getvalue() '["streaming API"]' Compact encoding: >>> import json >>> json. dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':')) '[1,2,3,{"4":5,"6":7}]' Pretty printing: >>> import json >>> print(json. dumps({'6': 7, '4': 5}, sort_keys=True, indent=4)) { "4": 5, "6": 7 } Customizing JSON object encoding: >>> import json >>> def custom_json(obj):. if isinstance(obj, complex):. return {'__complex__': True, 'real': obj.