else clause¶ else The optional else clause is executed if the control flow leaves the try suite, no exception was raised, and no return, continue, or break statement was executed. Exceptions in the else clause are not handled by the preceding except clauses. else try return continue break else except ### 8. 4. 4. finally clause¶ finally If finally is present, it specifies a ‘cleanup’ handler. The try clause is executed, including any except and else clauses. If an exception occurs in any of the clauses and is not handled, the exception is temporarily saved. The finally clause is executed. If there is a saved exception it is re-raised at the end of the finally clause. If the finally clause raises another exception, the saved exception is set as the context of the new exception. If the finally clause executes a return, break or continue statement, the saved exception is discarded: finally try except else finally finally finally finally return break continue >>> def f():. try:. 1/0. finally:. return 42. >>> f() 42 The exception information is not available to the program during execution of the finally clause. finally When a return, break or continue statement is executed in the try suite of a try…finally statement, the finally clause is also executed ‘on the way out. ’ return break continue try try finally finally The return value of a function is determined by the last return statement executed. Since the finally clause always executes, a return statement executed in the finally clause will always be the last one executed: return finally return finally >>> def foo():. try:. return 'try'. finally:. return 'finally'. >>> foo() 'finally' Changed in version 3. 8: Prior to Python 3. 8, a continue statement was illegal in the finally clause due to a problem with the implementation. continue finally ## 8. 5. The with statement¶ with The with statement is used to wrap the execution of a block with methods defined by a context manager (see section With Statement Context Managers). This allows common try…except…finally usage patterns to be encapsulated for convenient reuse. with try except finally with_stmt ::= "with" ( "(" with_stmt_contents ",".