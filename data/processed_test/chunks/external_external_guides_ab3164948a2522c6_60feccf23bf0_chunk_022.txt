getLogger(__name__) debug() info() warning() error() critical() basicConfig() debug() info() warning() error() critical() sys. stderr basicConfig() severity:logger name:message basicConfig() Logger Logger. setLevel() Logger. addHandler() Logger. removeHandler() Logger. addFilter() Logger. removeFilter() Logger. debug() Logger. info() Logger. warning() Logger. error() Logger. critical() %s %d %f **kwargs exc_info Logger. exception() Logger. error() Logger. exception() Logger. log() getLogger() root getLogger() foo foo. bar foo. bar. baz foo. bam foo WARNING False Handler Logger addHandler() StreamHandler FileHandler setLevel() setLevel() setFormatter() addFilter() removeFilter() Handler Handler logging. Handler %Y-%m-%d %H:%M:%S style '%' '{' '$' '%' style '%' %(<dictionary key>)s '{' str. format() '$' string. Template. substitute() style '%(asctime)s - %(levelname)s - %(message)s' time. localtime() converter time. localtime() time. gmtime() converter time. gmtime fileConfig() dictConfig() import logging # create logger logger = logging. getLogger('simple_example') logger. setLevel(logging. DEBUG) # create console handler and set level to debug ch = logging. StreamHandler() ch. setLevel(logging. DEBUG) # create formatter formatter = logging. Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') # add formatter to ch ch. setFormatter(formatter) # add ch to logger logger. addHandler(ch) # 'application' code logger. debug('debug message') logger. info('info message') logger. warning('warn message') logger. error('error message') logger. critical('critical message') $ python simple_logging_module.