Match None The optional second parameter pos gives an index in the string where the search is to start; it defaults to 0. This is not completely equivalent to slicing the string; the '^' pattern character matches at the real beginning of the string and at positions just after a newline, but not necessarily at the index where the search is to start. 0 '^' The optional parameter endpos limits how far the string will be searched; it will be as if the string is endpos characters long, so only the characters from pos to endpos - 1 will be searched for a match. If endpos is less than pos, no match will be found; otherwise, if rx is a compiled regular expression object, rx. search(string, 0, 50) is equivalent to rx. search(string[:50], 0). endpos - 1 rx. search(string, 0, 50) rx. search(string[:50], 0) >>> pattern = re. compile("d") >>> pattern. search("dog") # Match at index 0 <re. Match object; span=(0, 1), match='d'> >>> pattern. search("dog", 1) # No match; search doesn't include the "d" If zero or more characters at the beginning of string match this regular expression, return a corresponding Match. Return None if the string does not match the pattern; note that this is different from a zero-length match. Match None The optional pos and endpos parameters have the same meaning as for the search() method. search() >>> pattern = re. compile("o") >>> pattern. match("dog") # No match as "o" is not at the start of "dog". >>> pattern. match("dog", 1) # Match as "o" is the 2nd character of "dog". <re. Match object; span=(1, 2), match='o'> If you want to locate a match anywhere in string, use search() instead (see also search() vs. match()). search() If the whole string matches this regular expression, return a corresponding Match. Return None if the string does not match the pattern; note that this is different from a zero-length match. Match None The optional pos and endpos parameters have the same meaning as for the search() method. search() >>> pattern = re. compile("o[gh]") >>> pattern.