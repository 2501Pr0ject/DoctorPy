0): return magic(r=real, i=imag) # Wrong: def complex(real, imag = 0. 0): return magic(r = real, i = imag) When combining an argument annotation with a default value, however, do use spaces around the = sign: # Correct: def munge(sep: AnyStr = None):. def munge(input: AnyStr, sep: AnyStr = None, limit=1000):. # Wrong: def munge(input: AnyStr=None):. def munge(input: AnyStr, limit = 1000):. = # Correct: def complex(real, imag=0. 0): return magic(r=real, i=imag) # Wrong: def complex(real, imag = 0. 0): return magic(r = real, i = imag) When combining an argument annotation with a default value, however, do use spaces around the = sign: = # Correct: def munge(sep: AnyStr = None):. def munge(input: AnyStr, sep: AnyStr = None, limit=1000):. # Wrong: def munge(input: AnyStr=None):. def munge(input: AnyStr, limit = 1000):. Compound statements (multiple statements on the same line) are generally discouraged:# Correct: if foo == 'blah': do_blah_thing() do_one() do_two() do_three() Rather not: # Wrong: if foo == 'blah': do_blah_thing() do_one(); do_two(); do_three() # Correct: if foo == 'blah': do_blah_thing() do_one() do_two() do_three() Rather not: # Wrong: if foo == 'blah': do_blah_thing() do_one(); do_two(); do_three() While sometimes itâ€™s okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements. Also avoid folding such long lines.