object Semantically similar to enter(), the only difference being that it must return an awaitable. __enter__() Semantically similar to exit(), the only difference being that it must return an awaitable. __exit__() An example of an asynchronous context manager class: class AsyncContextManager: async def __aenter__(self): await log('entering context') async def __aexit__(self, exc_type, exc, tb): await log('exiting context') Added in version 3. 5. Footnotes ### Table of Contents 3. Data model 3. 1. Objects, values and types 3. 2. The standard type hierarchy 3. 2. 1. None 3. 2. 2. NotImplemented 3. 2. 3. Ellipsis 3. 2. 4. numbers. Number 3. 2. 4. 1. numbers. Integral 3. 2. 4. 2. numbers. Real (float) 3. 2. 4. 3. numbers. Complex (complex) 3. 2. 5. Sequences 3. 2. 5. 1. Immutable sequences 3. 2. 5. 2. Mutable sequences 3. 2. 6. Set types 3. 2. 7. Mappings 3. 2. 7. 1. Dictionaries 3. 2. 8. Callable types 3. 2. 8. 1. User-defined functions 3. 2. 8. 1. 1. Special read-only attributes 3. 2. 8. 1. 2. Special writable attributes 3. 2. 8. 2. Instance methods 3. 2. 8. 3. Generator functions 3. 2. 8. 4. Coroutine functions 3. 2. 8. 5. Asynchronous generator functions 3. 2. 8. 6. Built-in functions 3. 2. 8. 7. Built-in methods 3. 2. 8. 8. Classes 3. 2. 8. 9. Class Instances 3. 2. 9. Modules 3. 2. 9.