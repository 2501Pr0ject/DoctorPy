import_module() provides a recommended, simpler API than built-in import() for invoking the import machinery. Refer to the importlib library documentation for additional detail. importlib importlib. import_module() __import__() importlib ## 5. 2. Packages¶ Python has only one type of module object, and all modules are of this type, regardless of whether the module is implemented in Python, C, or something else. To help organize modules and provide a naming hierarchy, Python has a concept of packages. You can think of packages as the directories on a file system and modules as files within directories, but don’t take this analogy too literally since packages and modules need not originate from the file system. For the purposes of this documentation, we’ll use this convenient analogy of directories and files. Like file system directories, packages are organized hierarchically, and packages may themselves contain subpackages, as well as regular modules. It’s important to keep in mind that all packages are modules, but not all modules are packages. Or put another way, packages are just a special kind of module. Specifically, any module that contains a path attribute is considered a package. __path__ All modules have a name. Subpackage names are separated from their parent package name by a dot, akin to Python’s standard attribute access syntax. Thus you might have a package called email, which in turn has a subpackage called email. mime and a module within that subpackage called email. mime. text. email email. mime email. mime. text ### 5. 2. 1. Regular packages¶ Python defines two types of packages, regular packages and namespace packages. Regular packages are traditional packages as they existed in Python 3. 2 and earlier. A regular package is typically implemented as a directory containing an init. py file. When a regular package is imported, this init. py file is implicitly executed, and the objects it defines are bound to names in the package’s namespace. The init. py file can contain the same Python code that any other module can contain, and Python will add some additional attributes to the module when it is imported. __init__. py __init__. py __init__. py For example, the following file system layout defines a top level parent package with three subpackages: parent parent/ __init__. py one/ __init__. py two/ __init__. py three/ __init__. py Importing parent. one will implicitly execute parent/init.