{
  "chunk_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_019",
  "original_doc_id": "python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30",
  "content": "match_args[i] must be a string; if not TypeError is raised. Otherwise, positional pattern i is converted to a keyword pattern using match_args[i] as the keyword. match_args[i] must be a string; if not TypeError is raised. i __match_args__[i] __match_args__[i] TypeError If there are duplicate keywords, TypeError is raised. If there are duplicate keywords, TypeError is raised. TypeError See also Customizing positional arguments in class pattern matching the match proceeds as if there were only keyword patterns. For the following built-in types the handling of positional subpatterns is different: bool bool bool bytearray bytearray bytearray bytes bytes bytes dict dict dict float float float frozenset frozenset frozenset int int int list list list set set set str str str tuple tuple tuple These classes accept a single positional argument, and the pattern there is matched against the whole object rather than an attribute. For example int(0|1) matches the value 0, but not the value 0. 0. int(0|1) 0 0. 0 In simple terms CLS(P1, attr=P2) matches only if the following happens: CLS(P1, attr=P2) isinstance(, CLS) isinstance(, CLS) isinstance(<subject>, CLS) convert P1 to a keyword pattern using CLS. match_args convert P1 to a keyword pattern using CLS. match_args P1 CLS. __match_args__ For each keyword argument attr=P2: hasattr(, \"attr\") P2 matches. attr For each keyword argument attr=P2: attr=P2 hasattr(, \"attr\") hasattr(, \"attr\") hasattr(<subject>, \"attr\") P2 matches. attr P2 matches. attr P2 <subject>. attr … and so on for the corresponding keyword argument/pattern pair. … and so on for the corresponding keyword argument/pattern pair. See also PEP 634 – Structural Pattern Matching: Specification PEP 634 – Structural Pattern Matching: Specification PEP 636 – Structural Pattern Matching: Tutorial PEP 636 – Structural Pattern Matching: Tutorial ## 8. 7.",
  "title": "8. Compound statements.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 19,
  "start_char": 44349,
  "end_char": 46223,
  "token_count": 442,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_ec1b46183acd657b.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:27.382498"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_ec1b46183acd657b_b5c0645e7b30_chunk_019.txt"
}