{
  "chunk_id": "python_official_python_official_reference_99fb26420c3873aa_898565d1500b_chunk_015",
  "original_doc_id": "python_official_python_official_reference_99fb26420c3873aa_898565d1500b",
  "content": "0x Note that leading zeros in a non-zero decimal number are not allowed. This is for disambiguation with C-style octal literals, which Python used before version 3. 0. Some examples of integer literals: 7 2147483647 0o177 0b100110111 3 79228162514264337593543950336 0o377 0xdeadbeef 100_000_000_000 0b_1110_0101 Changed in version 3. 6: Underscores are now allowed for grouping purposes in literals. ### 2. 4. 6. Floating-point literals¶ Floating-point literals are described by the following lexical definitions: floatnumber ::= pointfloat | exponentfloat pointfloat ::= [digitpart] fraction | digitpart \". \" exponentfloat ::= (digitpart | pointfloat) exponent digitpart ::= digit ([\"_\"] digit)* fraction ::= \". \" digitpart exponent ::= (\"e\" | \"E\") [\"+\" | \"-\"] digitpart pointfloat exponentfloat digitpart fraction digitpart digitpart pointfloat exponent digit digit digitpart digitpart Note that the integer and exponent parts are always interpreted using radix 10. For example, 077e010 is legal, and denotes the same number as 77e10. The allowed range of floating-point literals is implementation-dependent. As in integer literals, underscores are supported for digit grouping. 077e010 77e10 Some examples of floating-point literals: 3. 14 10. 001 1e100 3. 14e-10 0e0 3. 14_15_93 Changed in version 3. 6: Underscores are now allowed for grouping purposes in literals. ### 2. 4. 7. Imaginary literals¶ Imaginary literals are described by the following lexical definitions: imagnumber ::= (floatnumber | digitpart) (\"j\" | \"J\") floatnumber digitpart An imaginary literal yields a complex number with a real part of 0. 0. Complex numbers are represented as a pair of floating-point numbers and have the same restrictions on their range. To create a complex number with a nonzero real part, add a floating-point number to it, e. g. , (3+4j). Some examples of imaginary literals: (3+4j) 3. 14j 10.",
  "title": "2. Lexical analysis.13.5",
  "section": "python_official",
  "subsection": "reference",
  "chunk_index": 15,
  "start_char": 30791,
  "end_char": 32685,
  "token_count": 499,
  "metadata": {
    "original_file": "data/raw/documentation_test/python_official/python_official_reference_99fb26420c3873aa.md",
    "chunk_method": "paragraph_based",
    "overlap_chars": 100,
    "processing_date": "2025-06-11T23:57:25.404791"
  },
  "file_path": "data/processed_test/chunks/python_official_python_official_reference_99fb26420c3873aa_898565d1500b_chunk_015.txt"
}