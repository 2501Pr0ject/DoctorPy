Emulating container types¶ The following methods can be defined to implement container objects. None of them are provided by the object class itself. Containers usually are sequences (such as lists or tuples) or mappings (like dictionaries), but can represent other containers as well. The first set of methods is used either to emulate a sequence or to emulate a mapping; the difference is that for a sequence, the allowable keys should be the integers k for which 0 <= k < N where N is the length of the sequence, or slice objects, which define a range of items. It is also recommended that mappings provide the methods keys(), values(), items(), get(), clear(), setdefault(), pop(), popitem(), copy(), and update() behaving similar to those for Python’s standard dictionary objects. The collections. abc module provides a MutableMapping abstract base class to help create those methods from a base set of getitem(), setitem(), delitem(), and keys(). Mutable sequences should provide methods append(), count(), index(), extend(), insert(), pop(), remove(), reverse() and sort(), like Python standard list objects. Finally, sequence types should implement addition (meaning concatenation) and multiplication (meaning repetition) by defining the methods add(), radd(), iadd(), mul(), rmul() and imul() described below; they should not define other numerical operators. It is recommended that both mappings and sequences implement the contains() method to allow efficient use of the in operator; for mappings, in should search the mapping’s keys; for sequences, it should search through the values. It is further recommended that both mappings and sequences implement the iter() method to allow efficient iteration through the container; for mappings, iter() should iterate through the object’s keys; for sequences, it should iterate through the values. object lists tuples 0 <= k < N slice keys() values() items() get() clear() setdefault() pop() popitem() copy() update() dictionary collections. abc MutableMapping __getitem__() __setitem__() __delitem__() keys() append() count() index() extend() insert() pop() remove() reverse() sort() list __add__() __radd__() __iadd__() __mul__() __rmul__() __imul__() __contains__() in in __iter__() __iter__() Called to implement the built-in function len(). Should return the length of the object, an integer >= 0.